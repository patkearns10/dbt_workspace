name: 'secret'
version: '1.0.0'
config-version: 2

profile: default
dbt-cloud:
  project-id: 89074

vars:
  dbt_artifacts_environment_aware: true
  is_backfill: false
  refresh_start_date: '1970-01-01'
  refresh_end_date: '2999-01-01'
  my_cool_var: '2016-06-01'
  disable_models: "['some_model_name']"
  snowflake_meta_src_db: 'snowflake' # override this with -> dbt run --vars "'snowflake_meta_src_db': 'my_snowflake_meta_src_db'"
  # dbt_artifacts_database: development
  # dbt_artifacts_schema: dbt_artifacts_kearns_added
  source_database: 'raw'
  target_database: 'raw'
  schemas: {'dev': ['dev_schema', 'dev_test']}
  do_something: "nope nope nope"
  weekday_sale:
    - weekday: monday,
      data:
        promotion_no: 1
        sp_sales_code: 2
        media_mark: 3
    - weekday: tuesday,
      data:
        promotion_no: 4
        sp_sales_code: 5
        media_mark: 6
    - weekday: wednesday,
      data:
        promotion_no: 7
        sp_sales_code: 8
        media_mark: 9

  weekday_sale_dict: [{weekday: monday, promotion_no: 1, sp_sales_code: 2, media_mark: 3}, {weekday: tuesday, promotion_no: 1, sp_sales_code: 2, media_mark: 3}, {weekday: wednesday, promotion_no: 1, sp_sales_code: 2, media_mark: 3}]

models:
  secret:
    #+post-hook:
    #  - "{{ log(invocation_id, true) }}"
    #  - "{{ log(modules.datetime.datetime.now(), true) }}" 
    #+pre-hook:
    #  - "{{ governance_check() }}"
    +materialized: view
    +meta:
      some_key: some_value

    snowflake_meta:
      +tags: snowflake_meta
      +schema: snowflake_meta

    demos:
      custom_schema:
        +schema: custom_schema
        +materialized: table
      easy_incremental:
        +watermark: watermark
        +materialized: easy_incremental
      hard_deletes:
        +enabled: true

    marts:
      core:
        +tags:
          - "marts_core_subfolder"
    python:
      +enabled: false

  dbt_artifacts:
    +schema: less_dbt_artifact

sources:
  secret:
    snowflake_meta:
      +tags: ['snowflake_meta']

snapshots:
  secret:
    +target_schema: "{{ target.schema }}"
    schema_change:
      +target_schema: "{{target.schema if env_var('DBT_ENV_CLEANSED') == 'DEVELOPER' or env_var('DBT_CLOUD_RUN_REASON_CATEGORY', 'default') == 'github_pull_request' else 'CLEANSED' }}"
    snowflake_meta:
      +tags: ['snowflake_meta']
      +target_schema: "{{ 'snowflake_meta' if 'prod' in target.name.lower() else target.schema ~ '__snowflake_meta' }}"

    hard_deletes:
      +enabled: true

# on-run-start:
  # - "{{ create_run_end_results_table() }}"

on-run-end:
  - "{{ outside_macro() }}"
  # - "{% if target.name != 'ci' %}{{ dbt_artifacts.upload_results(results) }}{% endif %}" # dont dbt_artifacts run in ci
  # - "{{ get_updated_at(graph, target) }}"
  # - "{{ log_run_end_results(results) }}"  # JYeo code
  # - "{{ store_test_results(results) }}" # store test failures
  # - "{{ log(invocation_id, true) }}"
  # - "{{ log(modules.datetime.datetime.now(), true) }}"
  # - "{{ test_results(results) }}"
flags:
  require_generic_test_arguments_property: true