{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v9.json", "dbt_version": "1.5.4", "generated_at": "2023-08-08T08:09:45.717721Z", "invocation_id": "6977eb67-4221-40ac-a03f-f1a46d13ff77", "env": {"DBT_CLOUD_PROJECT_ID": "89074", "DBT_CLOUD_RUN_ID": "180032098", "DBT_CLOUD_JOB_ID": "287898", "DBT_CLOUD_RUN_REASON": "Kicked off from UI by pat.kearns@dbtlabs.com", "DBT_CLOUD_RUN_REASON_CATEGORY": "other"}, "project_id": "5ebe2294ecd0e0f08eab7690d2a6ee69", "user_id": "b314c8db-0dcd-4b1e-93e6-8e16041eb8cd", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.secret.my_incremental_model": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "my_incremental_model", "resource_type": "model", "package_name": "secret", "path": "my_incremental_model.sql", "original_file_path": "models/my_incremental_model.sql", "unique_id": "model.secret.my_incremental_model", "fqn": ["secret", "my_incremental_model"], "alias": "my_incremental_model", "checksum": {"name": "sha256", "checksum": "95c1369082e1cae9f6af2f2fe09d6afab593fba52c09ff1a4e4683a48976a176"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["generic_id", "unique_id", "sometimes_bad_id"], "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "meta": {"some_key": "some_value"}, "unique_key": ["generic_id", "unique_id", "sometimes_bad_id"]}, "created_at": 1691482187.8559232, "relation_name": "DEVELOPMENT.dbt_pkearns.my_incremental_model", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key=['generic_id', 'unique_id', 'sometimes_bad_id']\n    )\n}}\n\nwith\n\nsample_data as (\n    select\n        1 as generic_id,\n        1 as unique_id,\n        'Pass' as sometimes_bad_id,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        1 as generic_id,\n        2 as unique_id,\n        'Fail' as sometimes_bad_id,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        1 as generic_id,\n        2 as unique_id,\n        null as sometimes_bad_id,\n        current_timestamp as _updated_at\n)\n\nselect\n    *\nfrom sample_data\n\n    {% if is_incremental() %}\n        -- this filter will only be applied on an incremental run\n        where _updated_at > (select max(_updated_at) from {{ this }}) \n    {% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.my_third_model": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "my_third_model", "resource_type": "model", "package_name": "secret", "path": "my_third_model.sql", "original_file_path": "models/my_third_model.sql", "unique_id": "model.secret.my_third_model", "fqn": ["secret", "my_third_model"], "alias": "my_third_model", "checksum": {"name": "sha256", "checksum": "f4568ba048ef5db8a43d16729c820f6faa2b4429d90d45c019059bd9aa4da944"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482187.8822083, "relation_name": "DEVELOPMENT.dbt_pkearns.my_third_model", "raw_code": "select *, current_timestamp::date as updated_day from {{ref('my_second_model')}}", "language": "sql", "refs": [{"name": "my_second_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.my_second_model"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.run_query_return": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "run_query_return", "resource_type": "model", "package_name": "secret", "path": "run_query_return.sql", "original_file_path": "models/run_query_return.sql", "unique_id": "model.secret.run_query_return", "fqn": ["secret", "run_query_return"], "alias": "run_query_return", "checksum": {"name": "sha256", "checksum": "c1a0704beaf52e6c6455e5a637445e8891f8c80ecee7132eead70f30ff25b630"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482187.8895977, "relation_name": "DEVELOPMENT.dbt_pkearns.run_query_return", "raw_code": "{% set payment_methods_query -%}\n    select status, payment_method from {{ ref('stg_payments') }}\n    order by 1\n{% endset -%}\n\n{% set customers_query -%}\n    select distinct first_name from {{ ref('stg_customers') }}\n    order by 1\n{% endset -%}\n\n{% set payment_results = run_query(payment_methods_query) -%}\n    -- {{ payment_results | length }}\n{% set customer_results  = run_query(customers_query) -%}\n    -- {{ customer_results | length }}\n\n{%- if execute -%}\n    {# Return the first column #}\n        {% set payments_results_list = payment_results.columns[0].values() | list -%}\n        {% set customers_results_list = customer_results.columns[0].values() | list -%}\n    {%- else -%}\n        {% set payments_results_list = [] -%}\n        {% set customers_results_list = [] -%}\n{%- endif %}\n\nselect {{ payments_results_list }} as results\nunion all\nselect {{ customers_results_list }} as results", "language": "sql", "refs": [{"name": "stg_payments", "package": null, "version": null}, {"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.run_query"], "nodes": ["model.secret.stg_payments", "model.secret.stg_customers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.union_relations": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "union_relations", "resource_type": "model", "package_name": "secret", "path": "union_relations.sql", "original_file_path": "models/union_relations.sql", "unique_id": "model.secret.union_relations", "fqn": ["secret", "union_relations"], "alias": "union_relations", "checksum": {"name": "sha256", "checksum": "1b9f8a8b3e53b7ea63ae62314b17fe92463e990837b7438b150cee6277f626aa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482187.9130356, "relation_name": "DEVELOPMENT.dbt_pkearns.union_relations", "raw_code": "{% set relations=dbt_utils.get_relations_by_pattern('dbt_pkearns', 'stg_customers%') %}\n\n{{ dbt_utils.union_relations(relations)}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern", "macro.dbt_utils.union_relations"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.foo_table": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "foo_table", "resource_type": "model", "package_name": "secret", "path": "foo_table.sql", "original_file_path": "models/foo_table.sql", "unique_id": "model.secret.foo_table", "fqn": ["secret", "foo_table"], "alias": "foo_table", "checksum": {"name": "sha256", "checksum": "5364dbb4b95121761b081a541aaa3b245cf7372cdc3a50e73e16ac722093ac02"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"some_key": "some_value"}}, "created_at": 1691482187.9572291, "relation_name": "DEVELOPMENT.dbt_pkearns.foo_table", "raw_code": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nselect 1 as col", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.my_second_model": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "my_second_model", "resource_type": "model", "package_name": "secret", "path": "my_second_model.sql", "original_file_path": "models/my_second_model.sql", "unique_id": "model.secret.my_second_model", "fqn": ["secret", "my_second_model"], "alias": "my_second_model", "checksum": {"name": "sha256", "checksum": "bad6dfa47b28ee092b8bad095a0eeac721a312673403b467d5982cb25f2e877a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482187.9628344, "relation_name": "DEVELOPMENT.dbt_pkearns.my_second_model", "raw_code": "select * from {{ ref('my_first_model') }}", "language": "sql", "refs": [{"name": "my_first_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.my_first_model"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.bar_view": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "bar_view", "resource_type": "model", "package_name": "secret", "path": "bar_view.sql", "original_file_path": "models/bar_view.sql", "unique_id": "model.secret.bar_view", "fqn": ["secret", "bar_view"], "alias": "bar_view", "checksum": {"name": "sha256", "checksum": "a74277eedf0c4704ea1d0e58fdf2035eceedea55b5ffaeab65b939c9960f6a61"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value", "from_model_yml": "yerp", "single_key": "override"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value", "from_model_yml": "yerp", "single_key": "override"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "secret://models/_core.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"single_key": "override"}}, "created_at": 1691482189.618755, "relation_name": "DEVELOPMENT.dbt_pkearns.bar_view", "raw_code": "{{\n    config(\n        materialized='view',\n        meta = {\n            'single_key': 'override'\n        }\n    )\n}}\n\n{{ log_something() }}\n\nselect * from {{ ref('foo_view') }}", "language": "sql", "refs": [{"name": "foo_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.secret.log_something"], "nodes": ["model.secret.foo_view"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.baz_table": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "baz_table", "resource_type": "model", "package_name": "secret", "path": "baz_table.sql", "original_file_path": "models/baz_table.sql", "unique_id": "model.secret.baz_table", "fqn": ["secret", "baz_table"], "alias": "baz_table", "checksum": {"name": "sha256", "checksum": "24a460420b968944af99ab997f208ef53b1faf6327fa597a806f9819c84b7d03"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"some_key": "some_value"}}, "created_at": 1691482187.9802625, "relation_name": "DEVELOPMENT.dbt_pkearns.baz_table", "raw_code": "{{\n    config(\n        materialized='table'\n    )\n}}\n\n\nselect * from {{ ref('bar_table') }}", "language": "sql", "refs": [{"name": "bar_table", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.bar_table"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.json_example": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "json_example", "resource_type": "model", "package_name": "secret", "path": "json_example.sql", "original_file_path": "models/json_example.sql", "unique_id": "model.secret.json_example", "fqn": ["secret", "json_example"], "alias": "json_example", "checksum": {"name": "sha256", "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482187.985813, "relation_name": "DEVELOPMENT.dbt_pkearns.json_example", "raw_code": "", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.ephemeral_1": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "ephemeral_1", "resource_type": "model", "package_name": "secret", "path": "ephemeral_1.sql", "original_file_path": "models/ephemeral_1.sql", "unique_id": "model.secret.ephemeral_1", "fqn": ["secret", "ephemeral_1"], "alias": "ephemeral_1", "checksum": {"name": "sha256", "checksum": "ef0c39213cad2a2c86b2ec25e6563b0abead47786fd1b9713634933cf9387006"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "meta": {"some_key": "some_value"}}, "created_at": 1691482187.9912825, "relation_name": null, "raw_code": "{{\n    config(\n        materialized='ephemeral',\n    )\n}}\n\nwith\n\ncte_1 as (\n    select 1 as some_column\n)\n\nselect * from cte_1", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.bar_table": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "bar_table", "resource_type": "model", "package_name": "secret", "path": "bar_table.sql", "original_file_path": "models/bar_table.sql", "unique_id": "model.secret.bar_table", "fqn": ["secret", "bar_table"], "alias": "bar_table", "checksum": {"name": "sha256", "checksum": "7ace745e37938428938a5a5a624f155896cbaccadf3318123245d403e99b7216"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"some_key": "some_value"}}, "created_at": 1691482187.9969647, "relation_name": "DEVELOPMENT.dbt_pkearns.bar_table", "raw_code": "{{\n    config(\n        materialized='table'\n    )\n}}\n\n\nselect * from {{ ref('foo_table') }}", "language": "sql", "refs": [{"name": "foo_table", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.foo_table"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.tag_model": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "tag_model", "resource_type": "model", "package_name": "secret", "path": "tag_model.sql", "original_file_path": "models/tag_model.sql", "unique_id": "model.secret.tag_model", "fqn": ["secret", "tag_model"], "alias": "tag_model", "checksum": {"name": "sha256", "checksum": "3d86c6d476e468aec8a32baa43500aab8f3f15696df8b6d61277d7a7bf7f3c69"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["some_tag"], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["some_tag"], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}, "tags": ["some_tag"]}, "created_at": 1691482188.0025074, "relation_name": "DEVELOPMENT.dbt_pkearns.tag_model", "raw_code": "{{\n    config(\n        tags=[\"some_tag\"]\n    )\n}}\n\nselect 1 as col\n\n---- find all models and tags\n{%- for node in graph.nodes.values() -%}\n    {%- if node.tags %}\n        -- {{ node.name }} has these tags: {{ node.tags }}\n    {%- endif -%}\n{%- endfor %}\n\n----- for a specific tag\n{%- set specific_tag='some_tag' -%}\n{%- for node in graph.nodes.values() -%}\n    {%- if node.tags -%}\n        {%- if specific_tag in node.tags %}\n            -- {{ node.name }}\n        {%- endif -%}\n    {%- endif -%}\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.query_tag": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "query_tag", "resource_type": "model", "package_name": "secret", "path": "query_tag.sql", "original_file_path": "models/query_tag.sql", "unique_id": "model.secret.query_tag", "fqn": ["secret", "query_tag"], "alias": "query_tag", "checksum": {"name": "sha256", "checksum": "7108925014b4ff41025f684ec3a787595218ef7529544506301741b1db30d06d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.0151074, "relation_name": "DEVELOPMENT.dbt_pkearns.query_tag", "raw_code": "select 1 as col", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.test_list_depends_on": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "test_list_depends_on", "resource_type": "model", "package_name": "secret", "path": "test_list_depends_on.sql", "original_file_path": "models/test_list_depends_on.sql", "unique_id": "model.secret.test_list_depends_on", "fqn": ["secret", "test_list_depends_on"], "alias": "test_list_depends_on", "checksum": {"name": "sha256", "checksum": "f1993c921698ce49ec3844e1c68958fa1d9e7d6fdbf964f1e01d8f57eae5c3fe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.0205562, "relation_name": "DEVELOPMENT.dbt_pkearns.test_list_depends_on", "raw_code": "with\norders as  (\n    select * from {{ ref('stg_orders' )}}\n),\npayments as (\n    select * from {{ ref('stg_payments') }}\n)\n\nselect\n{{ list_depends_on(graph,this) }} as depends_on_column", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}, {"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.secret.list_depends_on"], "nodes": ["model.secret.stg_orders", "model.secret.stg_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.project_info": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "project_info", "resource_type": "model", "package_name": "secret", "path": "project_info.sql", "original_file_path": "models/project_info.sql", "unique_id": "model.secret.project_info", "fqn": ["secret", "project_info"], "alias": "project_info", "checksum": {"name": "sha256", "checksum": "e46a2712729b018ae54afc98accc8e668a5d3bedba9d6c1300e18fea46b9a4c1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.0338206, "relation_name": "DEVELOPMENT.dbt_pkearns.project_info", "raw_code": "select\n    '{{ dbt_version }}' as dbt_version,\n    '{{ project_name }}' as project_name,\n    '{{ env_var('DBT_CLOUD_PROJECT_ID', 'dev') }}' as dbt_cloud_project_id,\n    '{{ env_var('DBT_CLOUD_JOB_ID', 'dev') }}' as dbt_cloud_job_id,\n    '{{ env_var('DBT_CLOUD_RUN_ID', 'dev') }}' as dbt_cloud_run_id", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.ephemeral_2": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "ephemeral_2", "resource_type": "model", "package_name": "secret", "path": "ephemeral_2.sql", "original_file_path": "models/ephemeral_2.sql", "unique_id": "model.secret.ephemeral_2", "fqn": ["secret", "ephemeral_2"], "alias": "ephemeral_2", "checksum": {"name": "sha256", "checksum": "11088bb475d15764c167898a99fa8574f843ac94998622094d5a1dd941efe677"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.0452332, "relation_name": "DEVELOPMENT.dbt_pkearns.ephemeral_2", "raw_code": "with \n\nephemeral_1 as (\n    select * from {{ ref('ephemeral_1') }}\n)\n\nselect * from ephemeral_1", "language": "sql", "refs": [{"name": "ephemeral_1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.ephemeral_1"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.conditional_run": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "conditional_run", "resource_type": "model", "package_name": "secret", "path": "conditional_run.sql", "original_file_path": "models/conditional_run.sql", "unique_id": "model.secret.conditional_run", "fqn": ["secret", "conditional_run"], "alias": "conditional_run", "checksum": {"name": "sha256", "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.050661, "relation_name": "DEVELOPMENT.dbt_pkearns.conditional_run", "raw_code": "", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.incremental_dupes": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "incremental_dupes", "resource_type": "model", "package_name": "secret", "path": "incremental_dupes.sql", "original_file_path": "models/incremental_dupes.sql", "unique_id": "model.secret.incremental_dupes", "fqn": ["secret", "incremental_dupes"], "alias": "incremental_dupes", "checksum": {"name": "sha256", "checksum": "5decb1009e33897aaf95c047f2808288e7aa14989bc8c2ebbf9472bd8f740f69"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "meta": {"some_key": "some_value"}, "unique_key": "unique_id"}, "created_at": 1691482188.0563471, "relation_name": "DEVELOPMENT.dbt_pkearns.incremental_dupes", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='unique_id'\n    )\n}}\n\nwith\n\nsample_data as (\n\n\n{% if is_incremental() %}\n\n    select\n        3 as unique_id,\n        3 as generic_id,\n        'Pass' as some_status,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        3 as unique_id,\n        3 as generic_id,\n        'Pass' as some_status,\n        current_timestamp as _updated_at\n\n{% endif %}\n\n)\n\nselect distinct * from sample_data", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.my_first_model": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "my_first_model", "resource_type": "model", "package_name": "secret", "path": "my_first_model.sql", "original_file_path": "models/my_first_model.sql", "unique_id": "model.secret.my_first_model", "fqn": ["secret", "my_first_model"], "alias": "my_first_model", "checksum": {"name": "sha256", "checksum": "fed713716057c5028c79a58ec3c13a335e709d2f4dd572508711a96397b0ea44"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"col": {"name": "col", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "secret://models/_core.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482189.6142437, "relation_name": "DEVELOPMENT.dbt_pkearns.my_first_model", "raw_code": "select 'hello, world!' as col,\n'{{ this }}' as this,\n'{{ this.name }}' as this_name,\n{{ dbt_utils.get_filtered_columns_in_relation( this ) }} as cols2", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.foo_view": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "foo_view", "resource_type": "model", "package_name": "secret", "path": "foo_view.sql", "original_file_path": "models/foo_view.sql", "unique_id": "model.secret.foo_view", "fqn": ["secret", "foo_view"], "alias": "foo_view", "checksum": {"name": "sha256", "checksum": "0eb0e79017d6f23f0611951f1413059132feec71489fa6039fc8f08f6807f998"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.0902221, "relation_name": "DEVELOPMENT.dbt_pkearns.foo_view", "raw_code": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nselect 1 as col", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.baz_view": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "baz_view", "resource_type": "model", "package_name": "secret", "path": "baz_view.sql", "original_file_path": "models/baz_view.sql", "unique_id": "model.secret.baz_view", "fqn": ["secret", "baz_view"], "alias": "baz_view", "checksum": {"name": "sha256", "checksum": "8a7cc160f732bdfaa7800c80b4816ba6e8b3e8e24552a0be2a8590817e9b85c6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.106833, "relation_name": "DEVELOPMENT.dbt_pkearns.baz_view", "raw_code": "{{\n    config(\n        materialized='view'\n    )\n}}\n\n\nselect * from {{ ref('bar_view') }}", "language": "sql", "refs": [{"name": "bar_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.bar_view"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.stg_customers_2": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "stg_customers_2", "resource_type": "model", "package_name": "secret", "path": "staging/jaffle_shop/stg_customers_2.sql", "original_file_path": "models/staging/jaffle_shop/stg_customers_2.sql", "unique_id": "model.secret.stg_customers_2", "fqn": ["secret", "staging", "jaffle_shop", "stg_customers_2"], "alias": "stg_customers_2", "checksum": {"name": "sha256", "checksum": "56518aef9d3b6686feb0e8ccca8f748a7ca3d9c442fb12870d4edcf1f37a6a23"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.1124172, "relation_name": "DEVELOPMENT.dbt_pkearns.stg_customers_2", "raw_code": "with\nsource as (\n    select * from {{ source('jaffle_shop', 'customers_2') }}\n),\n\nrenamed as (\n    select\n        id as customer_id,\n        first_name,\n        last_name\n    from\n        source\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["jaffle_shop", "customers_2"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.secret.jaffle_shop.customers_2"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.stg_orders": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "stg_orders", "resource_type": "model", "package_name": "secret", "path": "staging/jaffle_shop/stg_orders.sql", "original_file_path": "models/staging/jaffle_shop/stg_orders.sql", "unique_id": "model.secret.stg_orders", "fqn": ["secret", "staging", "jaffle_shop", "stg_orders"], "alias": "stg_orders", "checksum": {"name": "sha256", "checksum": "aa7483de088ce07faa14431cb3eb56cf43e61c87b00d67697c727521e7208e7d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "One record per order", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "One of the following values:\n\n| status         | definition                                                 |\n|----------------|------------------------------------------------------------|\n| placed         | Order placed but not yet shipped                           |\n| shipped        | Order has been shipped but hasn't yet been delivered       |\n| completed      | Order has been received by customers                       |\n| return_pending | Customer has indicated they would like to return this item |\n| returned       | Item has been returned                                     |", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "secret://models/staging/jaffle_shop/stg_jaffle_shop.yml", "build_path": "target/run/secret/models/staging/jaffle_shop/stg_orders.sql", "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482189.679783, "relation_name": "DEVELOPMENT.dbt_pkearns.stg_orders", "raw_code": "select\n    id as order_id,\n    user_id as customer_id,\n    order_date,\n    status\n\nfrom {{ source('jaffle_shop','orders') }}", "language": "sql", "refs": [], "sources": [["jaffle_shop", "orders"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.secret.jaffle_shop.orders"]}, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/stg_orders.sql", "compiled": true, "compiled_code": "select\n    id as order_id,\n    user_id as customer_id,\n    order_date,\n    status\n\nfrom raw.jaffle_shop.orders", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.stg_customers": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "stg_customers", "resource_type": "model", "package_name": "secret", "path": "staging/jaffle_shop/stg_customers.sql", "original_file_path": "models/staging/jaffle_shop/stg_customers.sql", "unique_id": "model.secret.stg_customers", "fqn": ["secret", "staging", "jaffle_shop", "stg_customers"], "alias": "stg_customers", "checksum": {"name": "sha256", "checksum": "d8f8afb2d09ede9b39704e76b54dc0adcc6ce2a643e5ed0feeb7be77a7994c1e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This model cleans up customer data", "columns": {"customer_id": {"name": "customer_id", "description": "Primary key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "secret://models/staging/jaffle_shop/stg_jaffle_shop.yml", "build_path": "target/run/secret/models/staging/jaffle_shop/stg_customers.sql", "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482189.6775498, "relation_name": "DEVELOPMENT.dbt_pkearns.stg_customers", "raw_code": "with\nsource as (\n    select * from {{ source('jaffle_shop', 'customers') }}\n),\n\nrenamed as (\n    select\n        id as customer_id,\n        first_name,\n        last_name\n    from\n        source\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["jaffle_shop", "customers"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.secret.jaffle_shop.customers"]}, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/stg_customers.sql", "compiled": true, "compiled_code": "with\nsource as (\n    select * from raw.jaffle_shop.customers\n),\n\nrenamed as (\n    select\n        id as customer_id,\n        first_name,\n        last_name\n    from\n        source\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.stg_payments": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "stg_payments", "resource_type": "model", "package_name": "secret", "path": "staging/stripe/stg_payments.sql", "original_file_path": "models/staging/stripe/stg_payments.sql", "unique_id": "model.secret.stg_payments", "fqn": ["secret", "staging", "stripe", "stg_payments"], "alias": "stg_payments", "checksum": {"name": "sha256", "checksum": "3afdf5c5b67ec4060fe53bb53d51e092b464fe2687b141f7536ebbe7604cf09e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/staging/stripe/stg_payments.sql", "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.128882, "relation_name": "DEVELOPMENT.dbt_pkearns.stg_payments", "raw_code": "select\n    id as payment_id,\n    orderid as order_id,\n    paymentmethod as payment_method,\n    status,\n    {{ cents_to_dollars('amount') }} as amount, -- amount is stored in cents, convert it to dollars\n    created as created_at\n\nfrom {{ source('stripe','payment') }}", "language": "sql", "refs": [], "sources": [["stripe", "payment"]], "metrics": [], "depends_on": {"macros": ["macro.secret.cents_to_dollars"], "nodes": ["source.secret.stripe.payment"]}, "compiled_path": "target/compiled/secret/models/staging/stripe/stg_payments.sql", "compiled": true, "compiled_code": "select\n    id as payment_id,\n    orderid as order_id,\n    paymentmethod as payment_method,\n    status,\n    (amount / 100)::numeric(16, 2) as amount, -- amount is stored in cents, convert it to dollars\n    created as created_at\n\nfrom raw.stripe.payment", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.stg_stripe__payments": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "stg_stripe__payments", "resource_type": "model", "package_name": "secret", "path": "staging/stripe/stg_stripe__payments.sql", "original_file_path": "models/staging/stripe/stg_stripe__payments.sql", "unique_id": "model.secret.stg_stripe__payments", "fqn": ["secret", "staging", "stripe", "stg_stripe__payments"], "alias": "stg_stripe__payments", "checksum": {"name": "sha256", "checksum": "e00026029aee7ee25cde279b7d76a6b8159d5fa876c60774d2a24eafc0b0b13e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.1401372, "relation_name": "DEVELOPMENT.dbt_pkearns.stg_stripe__payments", "raw_code": "select * from raw.stripe.payment", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.check_sources": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "check_sources", "resource_type": "model", "package_name": "secret", "path": "onsemi/check_sources.sql", "original_file_path": "models/onsemi/check_sources.sql", "unique_id": "model.secret.check_sources", "fqn": ["secret", "onsemi", "check_sources"], "alias": "check_sources", "checksum": {"name": "sha256", "checksum": "0a30c669ca5da02dd8c862c04241da541dd4f0607b08d54ed92ea51e35ada2b0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.172081, "relation_name": "DEVELOPMENT.dbt_pkearns.check_sources", "raw_code": "{%- set target_sources=var('source_database') -%}\n{%- set target_database=var('target_database') -%}\n{%- set sources=get_sources(target_sources) -%}\n\n-- sources exist in this database:\n  -- {{ target_sources }}\n\n-- check if sources exist in this database:\n  -- {{ target_database }}\n\n-- list of sources to check:\n  -- {{ sources }}\n\nselect * from (\n  {%- for source in sources %}\n    select count(1) from {{ target_database }}.{{ source }} {% if not loop.last %} union all {% endif %}\n  {%- endfor %}\n)", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.secret.get_sources"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.int_onsemi": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "int_onsemi", "resource_type": "model", "package_name": "secret", "path": "onsemi/int_onsemi.sql", "original_file_path": "models/onsemi/int_onsemi.sql", "unique_id": "model.secret.int_onsemi", "fqn": ["secret", "onsemi", "int_onsemi"], "alias": "int_onsemi", "checksum": {"name": "sha256", "checksum": "92866e85d881d8319071d2b2a744fac81e51300c9280e0d064c21d3e0a6e0826"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.1875074, "relation_name": "DEVELOPMENT.dbt_pkearns.int_onsemi", "raw_code": "-- static\n{%- set v_pk_list = [\"CORPORATION_CODE\"] -%}\n{%- set v_house_keeping_column = [\"BIW_INS_DTTM\",\"BIW_UPD_DTTM\",\"BIW_BATCH_ID\",\"BIW_MD5_KEY\"] -%}\n-- derived\n{%- set v_all_column_list = edw_get_column_list_new(this) -%}\n{%- set v_update_column_list = edw_get_quoted_column_list_new(this, v_pk_list|list + ['BIW_INS_DTTM']|list) -%}\n{%- set v_md5_column_list = edw_get_md5_column_list_new(this, v_pk_list|list+ v_house_keeping_column|list ) -%}\n\n-- sql\nwith\n\nsample_data as (\n    select * from {{ ref('stg_onsemi') }}\n)\n\nselect\n    *\n    ,\n    {{ v_pk_list }} as v_pk_list,\n    {{ v_house_keeping_column }} as v_house_keeping_column,\n    '{{ v_all_column_list }}' as v_all_column_list,\n    {{ v_update_column_list }} as v_update_column_list,\n    {{ v_md5_column_list }} as BIW_MD5_KEY\nfrom sample_data", "language": "sql", "refs": [{"name": "stg_onsemi", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.secret.edw_get_column_list_new", "macro.secret.edw_get_quoted_column_list_new", "macro.secret.edw_get_md5_column_list_new"], "nodes": ["model.secret.stg_onsemi"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.product_using_macros": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "product_using_macros", "resource_type": "model", "package_name": "secret", "path": "onsemi/product_using_macros.sql", "original_file_path": "models/onsemi/product_using_macros.sql", "unique_id": "model.secret.product_using_macros", "fqn": ["secret", "onsemi", "product_using_macros"], "alias": "product_using_macros", "checksum": {"name": "sha256", "checksum": "5b96a54e188d3f290ba76f846b494493e441545f51773589b4180f741d745dfb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "PRODUCT_KEY", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "meta": {"some_key": "some_value"}, "unique_key": "PRODUCT_KEY"}, "created_at": 1691482188.2415464, "relation_name": "DEVELOPMENT.dbt_pkearns.product_using_macros", "raw_code": "-- incremental model to bring in:\n    -- one time load data\n    -- -1 for pk \n    -- stg data \n-- using macros instead\n\n{{\n    config(\n        materialized='incremental',\n        unique_key=\"PRODUCT_KEY\"\n        )\n}}\n\nwith\n\n{{ one_time_load(from=ref('seed__product__one_time_load')) }}\n\n-- daily updated data\nstg_data as (\n    select * from {{ ref('seed__product__stg_data') }}\n    {%- if is_incremental() %}\n    where BIW_UPD_DTTM >= (select max(BIW_UPD_DTTM) from {{ this }})\n    {%- endif %}\n)\n\nselect * from one_time_load\n    -- after the initial load, this should return 0 records\n    {%- if is_incremental() %}\n    where BIW_UPD_DTTM >= (select max(BIW_UPD_DTTM) from {{ this }}) or BIW_UPD_DTTM is null\n    {%- endif %}\n\nunion all\n\nselect * from stg_data", "language": "sql", "refs": [{"name": "seed__product__one_time_load", "package": null, "version": null}, {"name": "seed__negative_key", "package": null, "version": null}, {"name": "seed__product__stg_data", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.secret.one_time_load", "macro.dbt.is_incremental"], "nodes": ["seed.secret.seed__product__one_time_load", "seed.secret.seed__negative_key", "seed.secret.seed__product__stg_data"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.onsemi_incremental": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__MART_SALES", "name": "onsemi_incremental", "resource_type": "model", "package_name": "secret", "path": "onsemi/onsemi_incremental.sql", "original_file_path": "models/onsemi/onsemi_incremental.sql", "unique_id": "model.secret.onsemi_incremental", "fqn": ["secret", "onsemi", "onsemi_incremental"], "alias": "BILLING_FACT", "checksum": {"name": "sha256", "checksum": "a7b70a718e047f27ad1a5c985baeef34b18d0f4de1bbc62ad607223ce3256d64"}, "config": {"enabled": true, "alias": "BILLING_FACT", "schema": "MART_SALES", "database": null, "tags": ["MART SALES"], "meta": {"some_key": "some_value"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["CORPORATION_CODE"], "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "merge_update_columns": ["BIW_UPD_DTTM", "BIW_BATCH_ID", "GENERIC_ID", "UNIQUE_ID", "SOMETIMES_BAD_ID", "_UPDATED_AT", "V_PK_LIST", "V_HOUSE_KEEPING_COLUMN", "V_ALL_COLUMN_LIST", "V_UPDATE_COLUMN_LIST", "BIW_MD5_KEY"], "description": "Building table Billing_FACT for sales mart ", "post-hook": [{"sql": "{{ v_sql_update_macro(11) }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": ["MART SALES"], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "meta": {"some_key": "some_value"}, "description": "Building table Billing_FACT for sales mart ", "transient": false, "schema": "MART_SALES", "alias": "BILLING_FACT", "tags": ["MART SALES"], "unique_key": ["CORPORATION_CODE"], "merge_update_columns": ["BIW_UPD_DTTM", "BIW_BATCH_ID", "GENERIC_ID", "UNIQUE_ID", "SOMETIMES_BAD_ID", "_UPDATED_AT", "V_PK_LIST", "V_HOUSE_KEEPING_COLUMN", "V_ALL_COLUMN_LIST", "V_UPDATE_COLUMN_LIST", "BIW_MD5_KEY"], "post-hook": ["{{ v_sql_update_macro(11) }}"]}, "created_at": 1691482188.2581549, "relation_name": "DEVELOPMENT.dbt_pkearns__MART_SALES.BILLING_FACT", "raw_code": "-- static\n{%- set v_pk_list = [\"CORPORATION_CODE\"]-%}\n{%- set v_house_keeping_column = [\"BIW_INS_DTTM\",\"BIW_UPD_DTTM\",\"BIW_BATCH_ID\",\"BIW_MD5_KEY\"]-%}\n-- derived\n{%- set v_all_column_list = edw_get_column_list_new(ref('int_onsemi')) -%}\n{%- set v_update_column_list = edw_get_quoted_column_list_new(ref('int_onsemi'), v_pk_list|list + ['BIW_INS_DTTM']|list) -%}\n{%- set v_md5_column_list = edw_get_md5_column_list_new(ref('int_onsemi'), v_pk_list|list+ v_house_keeping_column|list ) -%}\n\n{#\n{%- set v_sql_update_tgt -%}\n    update DEVELOPMENT.dbt_pkearns.seed__sample_data\n    set deleted=3\n    where id not in (\n        select id from {{ ref('seed__sample_data_status') }}\n    )\n{% endset %}\n#}\n\n\n{{\n    config(\n         description = 'Building table Billing_FACT for sales mart '\n        ,transient=false\n        ,materialized='incremental'\n        ,schema ='MART_SALES'\n        ,alias='BILLING_FACT'\n        ,tags ='MART SALES'\n        ,unique_key=v_pk_list\n        ,merge_update_columns=[ \"BIW_UPD_DTTM\", \"BIW_BATCH_ID\", \"GENERIC_ID\", \"UNIQUE_ID\", \"SOMETIMES_BAD_ID\", \"_UPDATED_AT\", \"V_PK_LIST\", \"V_HOUSE_KEEPING_COLUMN\", \"V_ALL_COLUMN_LIST\", \"V_UPDATE_COLUMN_LIST\", \"BIW_MD5_KEY\" ]\n        ,post_hook=\"{{ v_sql_update_macro(11) }}\"\n        )\n}}\n\n-- depends_on: {{ ref('seed__sample_data_status') }}\n\n-- sql\nwith\n\nsample_data as (\n    select * from {{ ref('int_onsemi') }}\n)\n\nselect\n    *,\n    '{{ v_all_column_list }}' as v_all_column_list_incremental,\n    {{ v_update_column_list }} as v_update_column_list_incremental,\n    {{ v_md5_column_list }} as v_md5_column_list_incremental\nfrom sample_data\n\n    {% if is_incremental() %}\n        -- this filter will only be applied on an incremental run\n        where _updated_at > (select max(_updated_at) from {{ this }}) \n    {% endif %}", "language": "sql", "refs": [{"name": "int_onsemi", "package": null, "version": null}, {"name": "int_onsemi", "package": null, "version": null}, {"name": "int_onsemi", "package": null, "version": null}, {"name": "seed__sample_data_status", "package": null, "version": null}, {"name": "int_onsemi", "package": null, "version": null}, {"name": "seed__sample_data_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.secret.edw_get_column_list_new", "macro.secret.edw_get_quoted_column_list_new", "macro.secret.edw_get_md5_column_list_new", "macro.dbt.is_incremental", "macro.secret.v_sql_update_macro"], "nodes": ["model.secret.int_onsemi", "model.secret.int_onsemi", "model.secret.int_onsemi", "seed.secret.seed__sample_data_status", "model.secret.int_onsemi", "seed.secret.seed__sample_data_status"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.stg_onsemi": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "stg_onsemi", "resource_type": "model", "package_name": "secret", "path": "onsemi/stg_onsemi.sql", "original_file_path": "models/onsemi/stg_onsemi.sql", "unique_id": "model.secret.stg_onsemi", "fqn": ["secret", "onsemi", "stg_onsemi"], "alias": "stg_onsemi", "checksum": {"name": "sha256", "checksum": "1a3323903706a04adeb4930618181f292a3760b4fc56a7f8b7139b1bae501a71"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.3430398, "relation_name": "DEVELOPMENT.dbt_pkearns.stg_onsemi", "raw_code": "with\n\nsample_data as (\n    select\n        1 as CORPORATION_CODE,\n        1 as BIW_INS_DTTM,\n        1 as BIW_UPD_DTTM,\n        1 as BIW_BATCH_ID,\n        11 as generic_id,\n        11 as unique_id,\n        'Pass' as sometimes_bad_id,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        2 as CORPORATION_CODE,\n        2 as BIW_INS_DTTM,\n        2 as BIW_UPD_DTTM,\n        2 as BIW_BATCH_ID,\n        22 as generic_id,\n        22 as unique_id,\n        'Pass' as sometimes_bad_id,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        3 as CORPORATION_CODE,\n        3 as BIW_INS_DTTM,\n        3 as BIW_UPD_DTTM,\n        3 as BIW_BATCH_ID,\n        33 as generic_id,\n        33 as unique_id,\n        'Fail' as sometimes_bad_id,\n        current_timestamp as _updated_at\n)\n\nselect\n    *\nfrom sample_data", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.product": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "product", "resource_type": "model", "package_name": "secret", "path": "onsemi/product.sql", "original_file_path": "models/onsemi/product.sql", "unique_id": "model.secret.product", "fqn": ["secret", "onsemi", "product"], "alias": "product", "checksum": {"name": "sha256", "checksum": "c3adde0b24e81acca59e1ae8fa59a8b119cd37f77c9729bf4c3d3595de9cbac6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "PRODUCT_KEY", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "meta": {"some_key": "some_value"}, "unique_key": "PRODUCT_KEY"}, "created_at": 1691482188.348561, "relation_name": "DEVELOPMENT.dbt_pkearns.product", "raw_code": "-- incremental model to bring in:\n    -- one time load data\n    -- -1 for pk \n    -- stg data \n\n{{\n    config(\n        materialized='incremental',\n        unique_key=\"PRODUCT_KEY\"\n        )\n}}\n\nwith\n\n-- one time load with an added -1 for product key\none_time_load as (\n    {{ dbt_utils.union_relations(\n    relations=[\n        ref('seed__product__one_time_load'),\n        ref('seed__negative_key'),\n        ],\n    ) }}\n\n),\n\n-- daily updated data\nstg_data as (\n    select * from {{ ref('seed__product__stg_data') }}\n    {%- if is_incremental() %}\n    where BIW_UPD_DTTM >= (select max(BIW_UPD_DTTM) from {{ this }})\n    {%- endif %}\n)\n\nselect\n    -- using this to only select columns from the one_time_load_table\n    {{ dbt_utils.star(from=ref('seed__product__one_time_load')) }}\nfrom one_time_load\n    -- after the initial load, we will not need to run this again\n    {%- if is_incremental() %}\n    where BIW_UPD_DTTM >= (select max(BIW_UPD_DTTM) from {{ this }}) or BIW_UPD_DTTM is null\n    {%- endif %}\n\nunion all\n\nselect * from stg_data", "language": "sql", "refs": [{"name": "seed__product__one_time_load", "package": null, "version": null}, {"name": "seed__negative_key", "package": null, "version": null}, {"name": "seed__product__stg_data", "package": null, "version": null}, {"name": "seed__product__one_time_load", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.is_incremental", "macro.dbt_utils.star"], "nodes": ["seed.secret.seed__product__one_time_load", "seed.secret.seed__negative_key", "seed.secret.seed__product__stg_data", "seed.secret.seed__product__one_time_load"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.show_this_variable": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "show_this_variable", "resource_type": "model", "package_name": "secret", "path": "demos/this/show_this_variable.sql", "original_file_path": "models/demos/this/show_this_variable.sql", "unique_id": "model.secret.show_this_variable", "fqn": ["secret", "demos", "this", "show_this_variable"], "alias": "an_aliased_table", "checksum": {"name": "sha256", "checksum": "3ceb63ba425bedb2ae80aabd24c1d1aa2f8fc93fc0c2fafeed83b7738bd6bd53"}, "config": {"enabled": true, "alias": "an_aliased_table", "schema": null, "database": null, "tags": ["some_tag"], "meta": {"some_key": "some_value"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["some_tag"], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"some_key": "some_value"}, "alias": "an_aliased_table", "tags": ["some_tag"]}, "created_at": 1691482188.3620493, "relation_name": "DEVELOPMENT.dbt_pkearns.an_aliased_table", "raw_code": "{{\n    config(\n        alias='an_aliased_table',\n        materialized='table',\n        tags=[\"some_tag\"]\n    )\n}}\n\nselect \n\n    'hello, world!' as test_col,\n    -- get columns from another table\n    {{ dbt_utils.get_filtered_columns_in_relation(from=ref('my_first_model')) }} as utils_get_filtered_columns,\n    -- get name of this table\n    '{{ this }}' as this,\n    -- with alias it will provide alias\n    '{{ this.name }}' as this_name,\n    -- config info\n    '{{ model.config.alias }}' as model_alias,\n    {{ model.config.tags }} as model_tags,\n    '{{ model.config.materialized }}' as model_materialization,\n    -- model info\n    '{{ model.alias }}' as model_alias_v2,\n    '{{ model.name }}' as model_name,\n    '{{ model.database }}' as model_database,\n    '{{ model.schema }}' as model_schema,\n    {{ model.fqn }} as model_fully_qualified_name,\n    '{{ model.unique_id }}' as model_unique_id,\n    '{{ model.path }}' as model_path", "language": "sql", "refs": [{"name": "my_first_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation"], "nodes": ["model.secret.my_first_model"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.pack_json_demo": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "pack_json_demo", "resource_type": "model", "package_name": "secret", "path": "demos/pack_json/pack_json_demo.sql", "original_file_path": "models/demos/pack_json/pack_json_demo.sql", "unique_id": "model.secret.pack_json_demo", "fqn": ["secret", "demos", "pack_json", "pack_json_demo"], "alias": "pack_json_demo", "checksum": {"name": "sha256", "checksum": "7b97ec98e5753ec10e052e6ed04caca25c9a6fda5c4735d9174bbf43970877d7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.375182, "relation_name": "DEVELOPMENT.dbt_pkearns.pack_json_demo", "raw_code": "select \n    warehouse_name, \n    warehouse_id,\n    {{pack_json(ref('stg_warehouse_metering_history'), except=['json'])}} as json\n    \nfrom {{ref('stg_warehouse_metering_history')}}\n\n-- {{this}}", "language": "sql", "refs": [{"name": "stg_warehouse_metering_history", "package": null, "version": null}, {"name": "stg_warehouse_metering_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.secret.pack_json"], "nodes": ["model.secret.stg_warehouse_metering_history", "model.secret.stg_warehouse_metering_history"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.raw_json": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "raw_json", "resource_type": "model", "package_name": "secret", "path": "demos/dynamic_variant_unpacking/raw_json.sql", "original_file_path": "models/demos/dynamic_variant_unpacking/raw_json.sql", "unique_id": "model.secret.raw_json", "fqn": ["secret", "demos", "dynamic_variant_unpacking", "raw_json"], "alias": "raw_json", "checksum": {"name": "sha256", "checksum": "90d1f9877d116d221af7d9a28728b38d152c9d3d08048c838c09b595fe4b14e1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.4019225, "relation_name": "DEVELOPMENT.dbt_pkearns.raw_json", "raw_code": "select parse_json('{a:1, b:2, c:\"randy is super cool\"}') as json", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.dynamic_unpack": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "dynamic_unpack", "resource_type": "model", "package_name": "secret", "path": "demos/dynamic_variant_unpacking/dynamic_unpack.sql", "original_file_path": "models/demos/dynamic_variant_unpacking/dynamic_unpack.sql", "unique_id": "model.secret.dynamic_unpack", "fqn": ["secret", "demos", "dynamic_variant_unpacking", "dynamic_unpack"], "alias": "dynamic_unpack", "checksum": {"name": "sha256", "checksum": "058b5eff1deb2c673c2a561035e7428c10a18995f8a4cee1d11359e29cd4491f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.407377, "relation_name": "DEVELOPMENT.dbt_pkearns.dynamic_unpack", "raw_code": "select \n    *, \n    {{unpack_json(ref('raw_json'), 'json')}} \n    \nfrom {{ref('raw_json')}}", "language": "sql", "refs": [{"name": "raw_json", "package": null, "version": null}, {"name": "raw_json", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.secret.unpack_json"], "nodes": ["model.secret.raw_json", "model.secret.raw_json"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.change_roles": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "change_roles", "resource_type": "model", "package_name": "secret", "path": "demos/change_roles/change_roles.sql", "original_file_path": "models/demos/change_roles/change_roles.sql", "unique_id": "model.secret.change_roles", "fqn": ["secret", "demos", "change_roles", "change_roles"], "alias": "change_roles", "checksum": {"name": "sha256", "checksum": "b1386c249b80ded086dcda5bedd9057f8cb4fb6908024bf7e431bbaa4b920d61"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [{"sql": "use role TRANSFORMER", "transaction": true, "index": null}], "pre-hook": [{"sql": "use role TRANSFORMER", "transaction": true, "index": null}]}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}, "pre-hook": ["use role TRANSFORMER"], "post-hook": ["use role TRANSFORMER"]}, "created_at": 1691482188.422844, "relation_name": "DEVELOPMENT.dbt_pkearns.change_roles", "raw_code": "{{ \n    config(\n        pre_hook='use role ' ~ target.role , \n        post_hook='use role ' ~ target.role \n    ) \n}}\n\nselect 1 as my_column", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.execute_query": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "execute_query", "resource_type": "model", "package_name": "secret", "path": "demos/execute_query/execute_query.sql", "original_file_path": "models/demos/execute_query/execute_query.sql", "unique_id": "model.secret.execute_query", "fqn": ["secret", "demos", "execute_query", "execute_query"], "alias": "execute_query", "checksum": {"name": "sha256", "checksum": "4ede5a3490ed2e7c9e2d3bfc8c1612f3313a095516cbeac55325e59425de0fad"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.4330115, "relation_name": "DEVELOPMENT.dbt_pkearns.execute_query", "raw_code": "{% set your_query %}\n-- this should return 100\nselect count(customer_id) from {{ ref('customers') }} where customer_id is not null\n{% endset %}\n\n{% set results = run_query(your_query) %}\n\n\n{% if execute %}\n{% set results_list = results.columns[0].values() %}\n{% else %}\n{% set results_list = [] %}\n{% endif %}\n\nselect\n{% for value in results_list %}\n'{{ value }}' as col,\n    {% if value == 100 %}\n        'is equal to 100'\n    {% else %}\n        'is NOT equal to 100'\n    {% endif %}\n    as some_context_col\n{% endfor %}", "language": "sql", "refs": [{"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.run_query"], "nodes": ["model.secret.customers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.warehouse_metering_history__incremental_snapshot": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "warehouse_metering_history__incremental_snapshot", "resource_type": "model", "package_name": "secret", "path": "demos/snapshot_hack/warehouse_metering_history__incremental_snapshot.sql", "original_file_path": "models/demos/snapshot_hack/warehouse_metering_history__incremental_snapshot.sql", "unique_id": "model.secret.warehouse_metering_history__incremental_snapshot", "fqn": ["secret", "demos", "snapshot_hack", "warehouse_metering_history__incremental_snapshot"], "alias": "warehouse_metering_history__incremental_snapshot", "checksum": {"name": "sha256", "checksum": "d9a7816755cbd9925c5a396e96f4916c197227182d2285377f4617b179818c70"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["snowflake_meta", "daily"], "meta": {"some_key": "some_value"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": true, "post-hook": [], "pre-hook": []}, "tags": ["snowflake_meta", "daily"], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "meta": {"some_key": "some_value"}, "tags": ["snowflake_meta", "daily"], "transient": true}, "created_at": 1691482188.4455473, "relation_name": "DEVELOPMENT.dbt_pkearns.warehouse_metering_history__incremental_snapshot", "raw_code": "{{ config(tags=[\"snowflake_meta\", \"daily\"], materialized='incremental', transient=true) }}\n\nSELECT \n    *,\n    CURRENT_TIMESTAMP AS SNAPSHOTTED_AT_TIME \n    \nFROM {{ref('stg_warehouse_metering_history')}}", "language": "sql", "refs": [{"name": "stg_warehouse_metering_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.stg_warehouse_metering_history"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.env_var_changes": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "env_var_changes", "resource_type": "model", "package_name": "secret", "path": "demos/env_vars/env_var_changes.sql", "original_file_path": "models/demos/env_vars/env_var_changes.sql", "unique_id": "model.secret.env_var_changes", "fqn": ["secret", "demos", "env_vars", "env_var_changes"], "alias": "env_var_changes", "checksum": {"name": "sha256", "checksum": "3507684c5258b095ad676f44126e953fcf00f995ec196f614382fb1d1057ff87"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.455567, "relation_name": "DEVELOPMENT.dbt_pkearns.env_var_changes", "raw_code": "select {{ env_var('DBT_ENV_VAR') }} as col", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.hard_deletes__augmented_snapshot_view": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "hard_deletes__augmented_snapshot_view", "resource_type": "model", "package_name": "secret", "path": "demos/hard_deletes/hard_deletes__augmented_snapshot_view.sql", "original_file_path": "models/demos/hard_deletes/hard_deletes__augmented_snapshot_view.sql", "unique_id": "model.secret.hard_deletes__augmented_snapshot_view", "fqn": ["secret", "demos", "hard_deletes", "hard_deletes__augmented_snapshot_view"], "alias": "hard_deletes__augmented_snapshot_view", "checksum": {"name": "sha256", "checksum": "8938a6fa0b6e493eba21435a3349e32bb2ece179ed8b88b3cbe2ab6eb34d2fc1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}, "enabled": true}, "created_at": 1691482188.4789937, "relation_name": "DEVELOPMENT.dbt_pkearns.hard_deletes__augmented_snapshot_view", "raw_code": "{{ create_augmented_snapshot(ref('hard_deletes__snapshot'), 'id') }}", "language": "sql", "refs": [{"name": "hard_deletes__snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.secret.create_augmented_snapshot"], "nodes": ["snapshot.secret.hard_deletes__snapshot"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.hard_deletes_source": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "hard_deletes_source", "resource_type": "model", "package_name": "secret", "path": "demos/hard_deletes/hard_deletes_source.sql", "original_file_path": "models/demos/hard_deletes/hard_deletes_source.sql", "unique_id": "model.secret.hard_deletes_source", "fqn": ["secret", "demos", "hard_deletes", "hard_deletes_source"], "alias": "hard_deletes_source", "checksum": {"name": "sha256", "checksum": "067129dc2d64a4de7ded9cd0765a7ee51e1b2f6664e897dfc7cff5b82bd77a6f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"some_key": "some_value"}, "enabled": true}, "created_at": 1691482188.4966316, "relation_name": "DEVELOPMENT.dbt_pkearns.hard_deletes_source", "raw_code": "{{ config(materialized='table') }}\n\nselect\n    1 as id,\n    'green' as color,\n    42 as the_answer,\n    current_timestamp() as insert_time\n\nunion all\n\nselect\n    3 as id,\n    'purple' as color,\n    42 as the_answer,\n    current_timestamp() as insert_time\n\nunion all\n\nselect\n    4 as id,\n    'green' as color,\n    42 as the_answer,\n    current_timestamp() as insert_time", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.hard_deletes__snapshot_passthrough": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "hard_deletes__snapshot_passthrough", "resource_type": "model", "package_name": "secret", "path": "demos/hard_deletes/hard_deletes__snapshot_passthrough.sql", "original_file_path": "models/demos/hard_deletes/hard_deletes__snapshot_passthrough.sql", "unique_id": "model.secret.hard_deletes__snapshot_passthrough", "fqn": ["secret", "demos", "hard_deletes", "hard_deletes__snapshot_passthrough"], "alias": "hard_deletes__snapshot_passthrough", "checksum": {"name": "sha256", "checksum": "c6a8f76562b211dbde112155dc8c76c2daee5d84359ba518e7c8a664946630fa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}, "enabled": true}, "created_at": 1691482188.5022845, "relation_name": "DEVELOPMENT.dbt_pkearns.hard_deletes__snapshot_passthrough", "raw_code": "select \n    *\n    \nfrom {{ ref('hard_deletes__snapshot')}}", "language": "sql", "refs": [{"name": "hard_deletes__snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["snapshot.secret.hard_deletes__snapshot"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.dedupe_incremental": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "dedupe_incremental", "resource_type": "model", "package_name": "secret", "path": "demos/dedupe_incremental/dedupe_incremental.sql", "original_file_path": "models/demos/dedupe_incremental/dedupe_incremental.sql", "unique_id": "model.secret.dedupe_incremental", "fqn": ["secret", "demos", "dedupe_incremental", "dedupe_incremental"], "alias": "dedupe_incremental", "checksum": {"name": "sha256", "checksum": "4fae7fcf6f62f0d4444f9449c5cedf089dc8a8f2a2316b05e8a8f821667fee21"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.5174932, "relation_name": "DEVELOPMENT.dbt_pkearns.dedupe_incremental", "raw_code": "{{ config(materialized='table') }}\n\nselect\n    1 as id,\n    'green' as color,\n    42 as the_answer,\n    current_timestamp() as insert_time\n\nunion all\n\nselect\n    2 as id,\n    'purple' as color,\n    42 as the_answer,\n    current_timestamp() as insert_time\n\nunion all\n\nselect\n    1 as id,\n    'green' as color,\n    42 as the_answer,\n    current_timestamp() as insert_time", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.find_dupes": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "find_dupes", "resource_type": "model", "package_name": "secret", "path": "demos/dedupe_incremental/find_dupes.sql", "original_file_path": "models/demos/dedupe_incremental/find_dupes.sql", "unique_id": "model.secret.find_dupes", "fqn": ["secret", "demos", "dedupe_incremental", "find_dupes"], "alias": "find_dupes", "checksum": {"name": "sha256", "checksum": "06815fc5d99a19fd89b52da7792ce0d3c247274e46b0baec8070d51d2c7f72f6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.5237217, "relation_name": "DEVELOPMENT.dbt_pkearns.find_dupes", "raw_code": "-- find dupes\nselect {{ dbt_utils.star(ref('dedupe_incremental')) }}\nfrom \n    (\n    select *, row_number() over (partition by id order by insert_time desc) as _row_number\n    from {{ ref('dedupe_incremental') }}\n    )\nwhere _row_number != 1", "language": "sql", "refs": [{"name": "dedupe_incremental", "package": null, "version": null}, {"name": "dedupe_incremental", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.secret.dedupe_incremental", "model.secret.dedupe_incremental"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.autogenerate_join_conditions": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "autogenerate_join_conditions", "resource_type": "model", "package_name": "secret", "path": "demos/autogenerate_join_conditions/autogenerate_join_conditions.sql", "original_file_path": "models/demos/autogenerate_join_conditions/autogenerate_join_conditions.sql", "unique_id": "model.secret.autogenerate_join_conditions", "fqn": ["secret", "demos", "autogenerate_join_conditions", "autogenerate_join_conditions"], "alias": "autogenerate_join_conditions", "checksum": {"name": "sha256", "checksum": "c43df29cddb6e00e689e6c4aa0c6f3a9af3ad90bc11ce331f49fb82c5aff541a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.5346088, "relation_name": "DEVELOPMENT.dbt_pkearns.autogenerate_join_conditions", "raw_code": "{%- set qualified_fields=['orders.order_id', 'orders.customer_id'] -%}\n{%- set joins=['orders', 'stg_customers'] -%}\n\nwith\ncustomers as (select * from {{ ref('customers') }}),\norders as (select * from {{ ref('orders') }}),\nstg_customers as (select * from {{ ref('stg_customers') }})\n\nselect\n    customers.lifetime_value,\n\n    {%- for qualified_field in qualified_fields %}\n        {%- set field=qualified_field.split('.')[1] %}\n        coalesce( {{qualified_field}} , -1) as {{ field }},\n    {%- endfor %}\n\n    customers.number_of_orders\nfrom customers\n    {%- for join in joins %}\n        left outer join {{ join }}\n        on customers.customer_id = {{ join }}.customer_id\n    {%- endfor %}", "language": "sql", "refs": [{"name": "customers", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.customers", "model.secret.orders", "model.secret.stg_customers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.namespacing": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "namespacing", "resource_type": "model", "package_name": "secret", "path": "demos/variables/global_variables/namespacing.sql", "original_file_path": "models/demos/variables/global_variables/namespacing.sql", "unique_id": "model.secret.namespacing", "fqn": ["secret", "demos", "variables", "global_variables", "namespacing"], "alias": "namespacing", "checksum": {"name": "sha256", "checksum": "a5248b975eaa6e899ff63874670bb985713507316d956e764d24dc395d01929a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.5472379, "relation_name": "DEVELOPMENT.dbt_pkearns.namespacing", "raw_code": "{% set ns = namespace(foo='bar') %}\n{% set foo = 'baz' %}\n\nselect \n'{{ ns.foo }}' as namespaced_var,\n'{{ foo }}' as regular_var", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.disable_list_create": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "disable_list_create", "resource_type": "model", "package_name": "secret", "path": "demos/variables/global_variables/disable_list_create.sql", "original_file_path": "models/demos/variables/global_variables/disable_list_create.sql", "unique_id": "model.secret.disable_list_create", "fqn": ["secret", "demos", "variables", "global_variables", "disable_list_create"], "alias": "disable_list_create", "checksum": {"name": "sha256", "checksum": "1736b13dde72ecc1c939dc0ea0aa87602a510727c00bb31f4558ae55bd9a22d2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.5574872, "relation_name": "DEVELOPMENT.dbt_pkearns.disable_list_create", "raw_code": "{{\n    config(\n        materialized='table'\n    )\n}}\n\n-- # Example of what your query should output, materialized as a table\nselect\n'model1' as disable_models\n\nunion all\n\nselect\n'model2' as disable_models", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.skip_this_incremental": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "skip_this_incremental", "resource_type": "model", "package_name": "secret", "path": "demos/variables/global_variables/skip_this_incremental.sql", "original_file_path": "models/demos/variables/global_variables/skip_this_incremental.sql", "unique_id": "model.secret.skip_this_incremental", "fqn": ["secret", "demos", "variables", "global_variables", "skip_this_incremental"], "alias": "skip_this_incremental", "checksum": {"name": "sha256", "checksum": "b8a93545b2152bad3d02ba8533f46b01420d59d4b482a3cf580b3be6e304b759"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "meta": {"some_key": "some_value"}, "unique_key": "id"}, "created_at": 1691482188.5629797, "relation_name": "DEVELOPMENT.dbt_pkearns.skip_this_incremental", "raw_code": "-- # your incremental block\n{{\n    config(\n        materialized='incremental',\n        unique_key='id'\n    )\n}}\n\n-- # if block at the top to see if this model should be run, pulls from your query\n-- # this.name checks the name of this model and compares to the values returned for the the models that should be run\n{%- if this.name in dbt_utils.get_column_values(ref('disable_list_create'), 'disable_models') and is_incremental() %}\n\n    -- # skip this model\n    select * from {{ this }} limit 0\n    \n{%- else %}\n    \n    -- # run this model\n    -- TODO: replace this with your usual incremental SQL code here\n    select\n        1 as id,\n        'example data' as some_col\n\n{%- endif %}", "language": "sql", "refs": [{"name": "disable_list_create", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_column_values"], "nodes": ["model.secret.disable_list_create"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.variable_usage": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "variable_usage", "resource_type": "model", "package_name": "secret", "path": "demos/variables/global_variables/variable_usage.sql", "original_file_path": "models/demos/variables/global_variables/variable_usage.sql", "unique_id": "model.secret.variable_usage", "fqn": ["secret", "demos", "variables", "global_variables", "variable_usage"], "alias": "variable_usage", "checksum": {"name": "sha256", "checksum": "4f3532652d9c5af0c5060aae2e12c101157af42390df9586a20471df2f1fffa0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": [{"sql": "{{ variable_update() }}", "transaction": true, "index": null}]}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"some_key": "some_value"}, "pre-hook": ["{{ variable_update() }}"]}, "created_at": 1691482188.5883584, "relation_name": "DEVELOPMENT.dbt_pkearns.variable_usage", "raw_code": "{{\n    config(\n        materialized='table',\n        pre_hook=\"{{ variable_update() }}\"\n    )\n}}\n\n{% set local_var=\"'my_quoted_var'\" %}\n\nselect \n    '{{ var('my_cool_var') }}'::date as col_a,\n    {{ local_var }} as col_b,\n    {{ var('disable_models') }} as var_disable_models,\n    '{{ disable_models }}' as disable_models,\n    \n    {%- if \"some_model_name\" in var('disable_models') %}\n        true \n        {%- else %}\n        false\n    {%- endif %} \n    as some_flag,\n    '{{ this.name }}' as this__name,\n    {%- if this.name in dbt_utils.get_column_values(ref('disable_list_create'), 'disable_models') %} \n        true \n        {%- else %}\n        false\n    {%- endif %} \n    as some_other_flag,\n\n{% set disable_models=\"['some_other_model_name']\" %}\n\n    {{ disable_models }} as disable_models_updated,\n\n    -- non existent variable (variable not defined)\n    '{{ var(\"non_existent_variable\", \"default_value\") }}' as non_existent_variable,\n    -- variable defined in dbt_project.yml as '2016-01-01'\n    '{{ var(\"my_cool_var\", \"default_value\") }}' as existent_variable,\n    -- define non existent variable (variable defined in sql)\n    {% set my_cool_var='2021-01-01' %} \n    '{{ my_cool_var }}' as now_existent_variable,\n    -- global var not the same as variable defined in sql\n    '{{ var(\"my_cool_var\") }}' as var_variable,\n    -- switch from var to set variable\n    {% set my_cool_var_mirror=var(\"my_cool_var\") %}\n    '{{ my_cool_var_mirror }}' as mirror_variable,\n    -- now you can alter the value\n    {% set my_cool_var_mirror=\"2022-01-01\" %}\n    '{{ my_cool_var_mirror }}' as changed_variable,\n\n    -- non existent variable (variable not defined) overwritten by env_var\n    '{{ var(\"non_existent_variable\", env_var(\"DBT_WAREHOUSE\")) }}' as overwrite_in_command", "language": "sql", "refs": [{"name": "disable_list_create", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.secret.variable_update"], "nodes": ["model.secret.disable_list_create"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.in_and_out": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "in_and_out", "resource_type": "model", "package_name": "secret", "path": "demos/variables/global_variables/in_and_out.sql", "original_file_path": "models/demos/variables/global_variables/in_and_out.sql", "unique_id": "model.secret.in_and_out", "fqn": ["secret", "demos", "variables", "global_variables", "in_and_out"], "alias": "in_and_out", "checksum": {"name": "sha256", "checksum": "4d1c078c2140b50d3ae3c84a83a2ebac2ca8f0442a6a05fa63a92ff7143cdf2a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.6073637, "relation_name": "DEVELOPMENT.dbt_pkearns.in_and_out", "raw_code": "-- aka namespaces\n-- https://stackoverflow.com/questions/9486393/jinja2-change-the-value-of-a-variable-inside-a-loop\n\n\n{% set ns = namespace(catalog_name='') %}      \n{%- set intermediate_keywords=['int', 'staging', 'fixtures', 'flatfiles', 'dbt'] %}\n\n    {%- if target.name == 'dev' %}\n        -- {{ ns.catalog_name }} \n        {%- for word in intermediate_keywords %}\n            --# is '{{ word }}' in '{{this.schema}}'\n            {%- if word in this.schema %}\n                --# yes\n                {%- set ns.catalog_name = 'intermediate' %}\n                -- {{ ns.catalog_name }}                                  # within if block\n                {%- else %}\n                --# no\n                -- {{ ns.catalog_name }}                                  # within if block\n            {%- endif %}\n        --- {{ ns.catalog_name }}                                         # within for loop\n        {%- endfor %}\n    {%- else %}\n        -- else\n    {%- endif %}\n    --- {{ ns.catalog_name }} \n\nselect '{{ ns.catalog_name }}' as example_col                              \n-- # I would expect this to return 'intermediate'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.local_variables": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "local_variables", "resource_type": "model", "package_name": "secret", "path": "demos/variables/local_variables/local_variables.sql", "original_file_path": "models/demos/variables/local_variables/local_variables.sql", "unique_id": "model.secret.local_variables", "fqn": ["secret", "demos", "variables", "local_variables", "local_variables"], "alias": "local_variables", "checksum": {"name": "sha256", "checksum": "895f9aa1e8110ea20aa4b61fd77597ea165a89e759fdcd6f91a37946e81f33e0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.6206603, "relation_name": "DEVELOPMENT.dbt_pkearns.local_variables", "raw_code": "{% set list_of_status = ['success', 'pass', 'fail', 'unknown'] %}\n{% set successful_statuses = ['success', 'pass', 'yes', 'successful'] %}\n\n\n{% for status in list_of_status %}\n\nselect\n   '{{ status }}' as status,\n    {%- if status in successful_statuses %}\n      -- is '{{ status }}' a successful status? yes :)\n      true\n    {%- else %}\n      -- is '{{ status }}' a successful status? no :(\n      false\n    {%- endif %}\n    as is_successful\n   \n   {% if not loop.last %} \n   union all\n   {% endif %}\n{% endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.model_with_schema_tests": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "model_with_schema_tests", "resource_type": "model", "package_name": "secret", "path": "demos/skippable_schema_tests/model_with_schema_tests.sql", "original_file_path": "models/demos/skippable_schema_tests/model_with_schema_tests.sql", "unique_id": "model.secret.model_with_schema_tests", "fqn": ["secret", "demos", "skippable_schema_tests", "model_with_schema_tests"], "alias": "model_with_schema_tests", "checksum": {"name": "sha256", "checksum": "3ea0f972fa1b56aa2dc2f56ee784b6a5796312f9a813d59ae70fd8855f10d16d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": ["skippable_schema_test"]}}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "secret://models/demos/skippable_schema_tests/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482189.71964, "relation_name": "DEVELOPMENT.dbt_pkearns.model_with_schema_tests", "raw_code": "select 1 as id", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.landing": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "landing", "resource_type": "model", "package_name": "secret", "path": "demos/landing_materialization_demo/landing.sql", "original_file_path": "models/demos/landing_materialization_demo/landing.sql", "unique_id": "model.secret.landing", "fqn": ["secret", "demos", "landing_materialization_demo", "landing"], "alias": "landing", "checksum": {"name": "sha256", "checksum": "1ebea40d4ef2e1bc93af1316eb5bb185d05d88e6f2bd2d7caf6e9d62e307fb53"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "landing", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "landing", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.637672, "relation_name": "DEVELOPMENT.dbt_pkearns.landing", "raw_code": "{{config(materialized='landing')}}\n\nCREATE OR REPLACE TABLE {{this.database}}.{{this.schema}}.{{this.identifier}}\n\n(\n\tRECORD_ID          INT     NOT NULL     COMMENT 'Unique ID of the record',\n\t\"DATE\"             DATE    NULL         COMMENT 'Date of record',\n    RECORD_DESCRIPTION VARCHAR NULL         COMMENT 'Description of the record'\n);", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.custom_schema": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__custom_schema", "name": "custom_schema", "resource_type": "model", "package_name": "secret", "path": "demos/custom_schema/custom_schema.sql", "original_file_path": "models/demos/custom_schema/custom_schema.sql", "unique_id": "model.secret.custom_schema", "fqn": ["secret", "demos", "custom_schema", "custom_schema"], "alias": "custom_schema", "checksum": {"name": "sha256", "checksum": "30a2cf9a3ab272cb113d0cf4ecc4e7eba0c0be22641e17f0b5b411202bee191e"}, "config": {"enabled": true, "alias": null, "schema": "custom_schema", "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"some_key": "some_value"}, "schema": "custom_schema"}, "created_at": 1691482188.647906, "relation_name": "DEVELOPMENT.dbt_pkearns__custom_schema.custom_schema", "raw_code": "-- When you reference this in another model, notice how the schema location is changed from the project default.\n\nselect 'Hello, world!' as my_column", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.get_dynamic_sql_value_usage": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "get_dynamic_sql_value_usage", "resource_type": "model", "package_name": "secret", "path": "demos/dynamic_sql_value/get_dynamic_sql_value_usage.sql", "original_file_path": "models/demos/dynamic_sql_value/get_dynamic_sql_value_usage.sql", "unique_id": "model.secret.get_dynamic_sql_value_usage", "fqn": ["secret", "demos", "dynamic_sql_value", "get_dynamic_sql_value_usage"], "alias": "get_dynamic_sql_value_usage", "checksum": {"name": "sha256", "checksum": "8bd98226dda4f847e0388a208449e6988305dd516809294c99608d72f2047595"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.6832597, "relation_name": "DEVELOPMENT.dbt_pkearns.get_dynamic_sql_value_usage", "raw_code": "select \n    {{get_dynamic_sql_value()}} as dynamic_value", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.secret.get_dynamic_sql_value"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.rows_affected__table": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "rows_affected__table", "resource_type": "model", "package_name": "secret", "path": "rows_affected/rows_affected__table.sql", "original_file_path": "models/rows_affected/rows_affected__table.sql", "unique_id": "model.secret.rows_affected__table", "fqn": ["secret", "rows_affected", "rows_affected__table"], "alias": "rows_affected__table", "checksum": {"name": "sha256", "checksum": "f4827acf2aa266a7619abdd3cc6e77e909e83b691d7bd410ea15197d1bb8ec91"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.695567, "relation_name": "DEVELOPMENT.dbt_pkearns.rows_affected__table", "raw_code": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nselect\n    1 as id\nunion all\nselect\n    2 as id\nunion all\nselect\n    3 as id\nunion all\nselect\n    4 as id\nunion all\nselect\n    5 as id\nunion all\nselect\n    6 as id\nunion all\nselect\n    7 as id", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.rows_affected__incremental": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "rows_affected__incremental", "resource_type": "model", "package_name": "secret", "path": "rows_affected/rows_affected__incremental.sql", "original_file_path": "models/rows_affected/rows_affected__incremental.sql", "unique_id": "model.secret.rows_affected__incremental", "fqn": ["secret", "rows_affected", "rows_affected__incremental"], "alias": "rows_affected__incremental", "checksum": {"name": "sha256", "checksum": "35aa4b830181b78786d9a7cfae9838888bcb1d9667941f65a4e4f37a7e2f2212"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "meta": {"some_key": "some_value"}, "unique_key": "id"}, "created_at": 1691482188.700991, "relation_name": "DEVELOPMENT.dbt_pkearns.rows_affected__incremental", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='id'\n    )\n}}\n\nselect\n    1 as id\nunion all\nselect\n    2 as id\nunion all\nselect\n    3 as id\nunion all\nselect\n    4 as id\nunion all\nselect\n    5 as id\nunion all\nselect\n    6 as id\nunion all\nselect\n    7 as id\n\n{% if is_incremental() %}\nunion all\nselect\n    8 as id\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.rows_affected__view": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "rows_affected__view", "resource_type": "model", "package_name": "secret", "path": "rows_affected/rows_affected__view.sql", "original_file_path": "models/rows_affected/rows_affected__view.sql", "unique_id": "model.secret.rows_affected__view", "fqn": ["secret", "rows_affected", "rows_affected__view"], "alias": "rows_affected__view", "checksum": {"name": "sha256", "checksum": "60ef5733b2b6a19b79a29de9c83f241baefd2bb47fadd5f27b50da9fffeba2c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.7109303, "relation_name": "DEVELOPMENT.dbt_pkearns.rows_affected__view", "raw_code": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nselect\n    1 as id\nunion all\nselect\n    2 as id\nunion all\nselect\n    3 as id\nunion all\nselect\n    4 as id\nunion all\nselect\n    5 as id\nunion all\nselect\n    6 as id\nunion all\nselect\n    7 as id", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.payments__pivoted": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "payments__pivoted", "resource_type": "model", "package_name": "secret", "path": "marts/core/payments__pivoted.sql", "original_file_path": "models/marts/core/payments__pivoted.sql", "unique_id": "model.secret.payments__pivoted", "fqn": ["secret", "marts", "core", "payments__pivoted"], "alias": "payments__pivoted", "checksum": {"name": "sha256", "checksum": "f0032b61d8e864f87adf3f6bd644ed35d7304db465458c948c181a3f606abc88"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.7164361, "relation_name": "DEVELOPMENT.dbt_pkearns.payments__pivoted", "raw_code": "{% set payment_methods = dbt_utils.get_column_values(table=ref('stg_payments'), column='payment_method') -%}\n\nwith payments as (\n    select * from {{ ref('stg_payments') }}\n),\n\npivoted as (\n    select\n        order_id,\n\n        {%- for payment_method in payment_methods -%}\n\n        sum(case when payment_method = '{{ payment_method }}' then amount else 0 end) as {{ payment_method }}_amount\n        \n        {%- if not loop.last -%}\n        ,\n        {% endif -%}\n        \n        {%- endfor %}\n    \n    from payments\n    group by 1\n)\n\nselect * from pivoted", "language": "sql", "refs": [{"name": "stg_payments", "package": null, "version": null}, {"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_column_values"], "nodes": ["model.secret.stg_payments", "model.secret.stg_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.customers_plus_two": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "customers_plus_two", "resource_type": "model", "package_name": "secret", "path": "marts/core/customers_plus_two.sql", "original_file_path": "models/marts/core/customers_plus_two.sql", "unique_id": "model.secret.customers_plus_two", "fqn": ["secret", "marts", "core", "customers_plus_two"], "alias": "customers_plus_two", "checksum": {"name": "sha256", "checksum": "f91fbb85c5f3b1e38525ee18e8a1be4f6850d6e55233f7217f941f802e99c8a3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.7276995, "relation_name": "DEVELOPMENT.dbt_pkearns.customers_plus_two", "raw_code": "select * from {{ ref('customers_plus_one') }}", "language": "sql", "refs": [{"name": "customers_plus_one", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.customers_plus_one"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.customers_plus_one": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "customers_plus_one", "resource_type": "model", "package_name": "secret", "path": "marts/core/customers_plus_one.sql", "original_file_path": "models/marts/core/customers_plus_one.sql", "unique_id": "model.secret.customers_plus_one", "fqn": ["secret", "marts", "core", "customers_plus_one"], "alias": "customers_plus_one", "checksum": {"name": "sha256", "checksum": "47b1ed605bfdb200d478e131a35e773353fae8e80acecfae39f68550d5a22bad"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.7330756, "relation_name": "DEVELOPMENT.dbt_pkearns.customers_plus_one", "raw_code": "select * from {{ ref('customers')}}", "language": "sql", "refs": [{"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.customers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.customers": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "customers", "resource_type": "model", "package_name": "secret", "path": "marts/core/customers.sql", "original_file_path": "models/marts/core/customers.sql", "unique_id": "model.secret.customers", "fqn": ["secret", "marts", "core", "customers"], "alias": "customers", "checksum": {"name": "sha256", "checksum": "8397e7bacb0cb4d71bdc2b0b85fb732b0a6a173de770a0b86c89918306e24367"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "One record per customer", "columns": {"customer_id": {"name": "customer_id", "description": "Primary key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_order_date": {"name": "first_order_date", "description": "NULL when a customer has not yet placed an order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "secret://models/marts/core/core.yml", "build_path": "target/run/secret/models/marts/core/customers.sql", "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"some_key": "some_value"}}, "created_at": 1691482189.7486062, "relation_name": "DEVELOPMENT.dbt_pkearns.customers", "raw_code": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith customers as (\n    select * from {{ ref('stg_customers')}}\n),\norders as (\n    select * from {{ ref('orders')}}\n),\ncustomer_orders as (\n    select\n        customer_id,\n        min(order_date) as first_order_date,\n        max(order_date) as most_recent_order_date,\n        count(order_id) as number_of_orders,\n        sum(amount) as lifetime_value\n    from orders\n    group by 1\n),\nfinal as (\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order_date,\n        customer_orders.most_recent_order_date,\n        coalesce(customer_orders.number_of_orders, 0) as number_of_orders,\n        customer_orders.lifetime_value\n    from customers\n    left join customer_orders using (customer_id)\n)\nselect * from final", "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.stg_customers", "model.secret.orders"]}, "compiled_path": "target/compiled/secret/models/marts/core/customers.sql", "compiled": true, "compiled_code": "\n\nwith customers as (\n    select * from DEVELOPMENT.dbt_pkearns.stg_customers\n),\norders as (\n    select * from DEVELOPMENT.dbt_pkearns.orders\n),\ncustomer_orders as (\n    select\n        customer_id,\n        min(order_date) as first_order_date,\n        max(order_date) as most_recent_order_date,\n        count(order_id) as number_of_orders,\n        sum(amount) as lifetime_value\n    from orders\n    group by 1\n),\nfinal as (\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order_date,\n        customer_orders.most_recent_order_date,\n        coalesce(customer_orders.number_of_orders, 0) as number_of_orders,\n        customer_orders.lifetime_value\n    from customers\n    left join customer_orders using (customer_id)\n)\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.customer_orders_dummy_join": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "customer_orders_dummy_join", "resource_type": "model", "package_name": "secret", "path": "marts/core/customer_orders_dummy_join.sql", "original_file_path": "models/marts/core/customer_orders_dummy_join.sql", "unique_id": "model.secret.customer_orders_dummy_join", "fqn": ["secret", "marts", "core", "customer_orders_dummy_join"], "alias": "customer_orders_dummy_join", "checksum": {"name": "sha256", "checksum": "2881db3d34edd2e38c2540d5d0edd6ba6d9ab0a33ff1311f1f1ead16c4cb8fbf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "sql_header": "CALL SYSTEM$WAIT(60);", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/marts/core/customer_orders_dummy_join.sql", "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"some_key": "some_value"}, "sql_header": "CALL SYSTEM$WAIT(60);"}, "created_at": 1691482188.7442045, "relation_name": "DEVELOPMENT.dbt_pkearns.customer_orders_dummy_join", "raw_code": "{{\n    config(\n        materialized='table',\n        sql_header=\"CALL SYSTEM$WAIT(60);\",\n    )\n}}\n\nwith\ndummy_datas as (\n    select * from \n    {{ ref('customers') }}\n    JOIN {{ ref('orders') }}\n        USING (customer_id)\n)\n\nselect\n    row_number() over (\n        partition by first_name\n        order by first_order_date asc\n    ) as _order,\n    *\nfrom dummy_datas", "language": "sql", "refs": [{"name": "customers", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.customers", "model.secret.orders"]}, "compiled_path": "target/compiled/secret/models/marts/core/customer_orders_dummy_join.sql", "compiled": true, "compiled_code": "\n\nwith\ndummy_datas as (\n    select * from \n    DEVELOPMENT.dbt_pkearns.customers\n    JOIN DEVELOPMENT.dbt_pkearns.orders\n        USING (customer_id)\n)\n\nselect\n    row_number() over (\n        partition by first_name\n        order by first_order_date asc\n    ) as _order,\n    *\nfrom dummy_datas", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.orders": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "orders", "resource_type": "model", "package_name": "secret", "path": "marts/core/orders.sql", "original_file_path": "models/marts/core/orders.sql", "unique_id": "model.secret.orders", "fqn": ["secret", "marts", "core", "orders"], "alias": "orders", "checksum": {"name": "sha256", "checksum": "65112f247f72b87b4d8002d1f37972b165ee1b979e5a4323c8464b2736f0ac82"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Complete orders model including the amount associated with each order.", "columns": {"order_id": {"name": "order_id", "description": "Primary key for orders", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "secret://models/marts/core/core.yml", "build_path": "target/run/secret/models/marts/core/orders.sql", "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}}, "created_at": 1691482189.7499068, "relation_name": "DEVELOPMENT.dbt_pkearns.orders", "raw_code": "with orders as  (\n\n    select * from {{ ref('stg_orders' )}}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n    \n),\n\norder_payments as (\n\n    select\n\n        order_id,\n        sum(case when status = 'success' then amount end) as amount_usd\n\n    from payments\n    group by 1\n),\n\nfinal as (\n\n    select\n    \n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        coalesce(order_payments.amount_usd, 0) as amount\n    from orders\n    left join order_payments using (order_id)\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}, {"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.stg_orders", "model.secret.stg_payments"]}, "compiled_path": "target/compiled/secret/models/marts/core/orders.sql", "compiled": true, "compiled_code": "with orders as  (\n\n    select * from DEVELOPMENT.dbt_pkearns.stg_orders\n\n),\n\npayments as (\n\n    select * from DEVELOPMENT.dbt_pkearns.stg_payments\n    \n),\n\norder_payments as (\n\n    select\n\n        order_id,\n        sum(case when status = 'success' then amount end) as amount_usd\n\n    from payments\n    group by 1\n),\n\nfinal as (\n\n    select\n    \n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        coalesce(order_payments.amount_usd, 0) as amount\n    from orders\n    left join order_payments using (order_id)\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.stg_warehouse_metering_history": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__snowflake_meta", "name": "stg_warehouse_metering_history", "resource_type": "model", "package_name": "secret", "path": "snowflake_meta/staging/stg_warehouse_metering_history.sql", "original_file_path": "models/snowflake_meta/staging/stg_warehouse_metering_history.sql", "unique_id": "model.secret.stg_warehouse_metering_history", "fqn": ["secret", "snowflake_meta", "staging", "stg_warehouse_metering_history"], "alias": "stg_warehouse_metering_history", "checksum": {"name": "sha256", "checksum": "5d6fbfb45abe5b9157138103cc8128455cd87d448138822c9b803f81ecffe34f"}, "config": {"enabled": true, "alias": null, "schema": "snowflake_meta", "database": null, "tags": ["snowflake_meta", "snowflake_meta", "daily"], "meta": {"some_key": "some_value"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": true, "post-hook": [], "pre-hook": []}, "tags": ["snowflake_meta", "daily"], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "meta": {"some_key": "some_value"}, "schema": "snowflake_meta", "tags": ["snowflake_meta", "daily"], "transient": true}, "created_at": 1691482188.7577958, "relation_name": "DEVELOPMENT.dbt_pkearns__snowflake_meta.stg_warehouse_metering_history", "raw_code": "{{ config(tags=[\"snowflake_meta\", \"daily\"], materialized='incremental', transient=true) }}\n\nWITH HISTORY AS (\n  SELECT \n    {{ standardize_timestamp('START_TIME') }} AS START_TIME_CENTRAL_TIME,\n    {{ standardize_timestamp('END_TIME') }}   AS END_TIME_CENTRAL_TIME,\n\n\t{{ \n      dbt_utils.star(\n        from=source('snowflake_meta', 'warehouse_metering_history'),\n        except=[\n          \"START_TIME\",\n          \"END_TIME\",\n          \"INGESTION_TIME\"\n        ]\n      ) \n    }}, \n\n    END_TIME AS WATERMARK\n\n  FROM \n    {{ source('snowflake_meta', 'warehouse_metering_history') }}\n\n  {% if is_incremental() %}\n    -- this filter will only be applied on an incremental run\n    WHERE \n      WATERMARK > (SELECT MAX(THIS.WATERMARK) FROM {{ this }} THIS)\n  {% endif %}\n)\n\nSELECT * FROM HISTORY", "language": "sql", "refs": [], "sources": [["snowflake_meta", "warehouse_metering_history"], ["snowflake_meta", "warehouse_metering_history"]], "metrics": [], "depends_on": {"macros": ["macro.secret.standardize_timestamp", "macro.dbt_utils.star", "macro.dbt.is_incremental"], "nodes": ["source.secret.snowflake_meta.warehouse_metering_history", "source.secret.snowflake_meta.warehouse_metering_history"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.use_variables__customers_limit_10": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "use_variables__customers_limit_10", "resource_type": "model", "package_name": "secret", "path": "python/use_variables__customers_limit_10.py", "original_file_path": "models/python/use_variables__customers_limit_10.py", "unique_id": "model.secret.use_variables__customers_limit_10", "fqn": ["secret", "python", "use_variables__customers_limit_10"], "alias": "use_variables__customers_limit_10", "checksum": {"name": "sha256", "checksum": "72b4527d71fd213a2cb3ed33dc9ad4bc8725058cdad77456f6047b4f7411339e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "config_keys_used": ["target_name"], "config_keys_defaults": [null], "target_name": "default", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "secret://models/python/_config.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"some_key": "some_value"}, "target_name": "default", "config_keys_used": ["target_name"], "config_keys_defaults": [null]}, "created_at": 1691482189.8248801, "relation_name": "DEVELOPMENT.dbt_pkearns.use_variables__customers_limit_10", "raw_code": "def model(dbt, session):\n    target_name = dbt.config.get(\"target_name\")\n\n    # bring in reference model as dataframe\n    customers_df = dbt.ref(\"customers\")\n\n    # limit data in dev\n    if target_name == \"dev\":\n        customers_df = customers_df.limit(10)\n\n    # return dataframe\n    return customers_df", "language": "python", "refs": [{"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.customers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.import_pypi_package__holiday": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "import_pypi_package__holiday", "resource_type": "model", "package_name": "secret", "path": "python/import_pypi_package__holiday.py", "original_file_path": "models/python/import_pypi_package__holiday.py", "unique_id": "model.secret.import_pypi_package__holiday", "fqn": ["secret", "python", "import_pypi_package__holiday"], "alias": "import_pypi_package__holiday", "checksum": {"name": "sha256", "checksum": "44ab943054e8ee6167b4da21dad8fd64296a3e58138c4d0c4d995e2273a2c502"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": ["holidays"], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"some_key": "some_value"}, "packages": ["holidays"]}, "created_at": 1691482188.7779737, "relation_name": "DEVELOPMENT.dbt_pkearns.import_pypi_package__holiday", "raw_code": "import holidays\n\ndef is_holiday(date_col):\n    usa_holidays = holidays.US()\n    is_holiday = (date_col in usa_holidays)\n    return is_holiday\n\ndef model(dbt, session):\n    dbt.config(\n        materialized = \"table\",\n        packages = [\"holidays\"]\n    )\n\n    orders_df = dbt.ref(\"orders\")\n\n    df = orders_df.to_pandas()\n\n    # apply our function\n    # (columns need to be in uppercase on Snowpark)\n    df[\"IS_HOLIDAY\"] = df[\"ORDER_DATE\"].apply(is_holiday)\n\n    # return final dataset (Pandas DataFrame)\n    return df", "language": "python", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.add_udf_function__payment_glitch": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "add_udf_function__payment_glitch", "resource_type": "model", "package_name": "secret", "path": "python/add_udf_function__payment_glitch.py", "original_file_path": "models/python/add_udf_function__payment_glitch.py", "unique_id": "model.secret.add_udf_function__payment_glitch", "fqn": ["secret", "python", "add_udf_function__payment_glitch"], "alias": "add_udf_function__payment_glitch", "checksum": {"name": "sha256", "checksum": "483f0e952e6ac5a625e090935c2b51aae240e4f1e9b8a8e45a404dce5bfa462f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": ["numpy"], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"some_key": "some_value"}, "packages": ["numpy"]}, "created_at": 1691482188.7865388, "relation_name": "DEVELOPMENT.dbt_pkearns.add_udf_function__payment_glitch", "raw_code": "\"\"\"\nUDFs\n    You can use the @udf decorator or udf function to define an \"anonymous\" function\n    and call it within your model function's DataFrame transformation. \n\"\"\"\n\nimport snowflake.snowpark.types as T\nimport snowflake.snowpark.functions as F\nimport numpy\n\ndef register_udf_add_random():\n    add_random = F.udf(\n        # use 'lambda' syntax, for simple functional behavior\n        lambda x: x + numpy.random.randint(1,99),\n        return_type=T.FloatType(),\n        input_types=[T.FloatType()]\n    )\n    return add_random\n\ndef model(dbt, session):\n\n    dbt.config(\n        materialized = \"table\",\n        packages = [\"numpy\"]\n    )\n\n    payments_glitch = dbt.ref(\"define_function__payment_glitch\")\n\n    add_random = register_udf_add_random()\n\n    # add money, who knows by how much\n    df = payments_glitch.withColumn(\"amount_plus_random\", add_random(\"amount\"))\n\n    return df", "language": "python", "refs": [{"name": "define_function__payment_glitch", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.define_function__payment_glitch"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.python_builtins__describe": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "python_builtins__describe", "resource_type": "model", "package_name": "secret", "path": "python/python_builtins__describe.py", "original_file_path": "models/python/python_builtins__describe.py", "unique_id": "model.secret.python_builtins__describe", "fqn": ["secret", "python", "python_builtins__describe"], "alias": "python_builtins__describe", "checksum": {"name": "sha256", "checksum": "4dc33ccc9c87a6c5cbe9a1a31bb9f15a14c5c8418fa527a753cc2beb61defd11"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["python"], "meta": {"some_key": "some_value"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["python"], "description": "My transformation written in Python", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "secret://models/python/_config.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"some_key": "some_value"}, "tags": ["python"]}, "created_at": 1691482189.8202236, "relation_name": "DEVELOPMENT.dbt_pkearns.python_builtins__describe", "raw_code": "def model(dbt, session):\n\n    # bring in reference model as dataframe\n    customers_df = dbt.ref(\"customers\")\n\n    # do transformation - apply \"describe\" function\n    described_df = customers_df.describe()\n\n    # return dataframe\n    return described_df", "language": "python", "refs": [{"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.customers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.secret.define_function__payment_glitch": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "define_function__payment_glitch", "resource_type": "model", "package_name": "secret", "path": "python/define_function__payment_glitch.py", "original_file_path": "models/python/define_function__payment_glitch.py", "unique_id": "model.secret.define_function__payment_glitch", "fqn": ["secret", "python", "define_function__payment_glitch"], "alias": "define_function__payment_glitch", "checksum": {"name": "sha256", "checksum": "25d460fdeb8a5814c671dbd2fb952033f4ecba40171e9f9bfdde2c482611a119"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"some_key": "some_value"}}, "created_at": 1691482188.800786, "relation_name": "DEVELOPMENT.dbt_pkearns.define_function__payment_glitch", "raw_code": "def times_two(x):\n    return x * 2\n\ndef model(dbt, session):\n    dbt.config(materialized=\"table\")\n\n    # bring in reference model as dataframe\n    payments_glitch = dbt.ref(\"stg_payments\")\n\n    # apply infinite money glitch\n    df = payments_glitch.withColumn(\"amount__glitch\", times_two(payments_glitch[\"amount\"]))\n    return df", "language": "python", "refs": [{"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.stg_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "snapshot.secret.snapshot_update": {"database": "development", "schema": "snapshots", "name": "snapshot_update", "resource_type": "snapshot", "package_name": "secret", "path": "snapshot_update.sql", "original_file_path": "snapshots/snapshot_update.sql", "unique_id": "snapshot.secret.snapshot_update", "fqn": ["secret", "snapshot_update", "snapshot_update"], "alias": "snapshot_update", "checksum": {"name": "sha256", "checksum": "d905fbf269409ceb09f7dfa2f91e38fa84b7688cd68d496efd55f3da2f42fc07"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": "development", "updated_at": "updated_at", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "development", "target_schema": "snapshots", "unique_key": "id", "strategy": "timestamp", "updated_at": "updated_at"}, "created_at": 1691482188.8434484, "relation_name": "development.snapshots.snapshot_update", "raw_code": "\n\n{{\n    config(\n      target_database='development',\n      target_schema='snapshots',\n      unique_key='id',\n      strategy='timestamp',\n      updated_at='updated_at'\n    )\n}}\n\n-- sample data\nselect\n 1 as id,\n '2023-01-02' as updated_at,\n 'x' as new_col\n\n union all\n \n select\n 2 as id,\n '2023-01-03' as updated_at,\n 'x' as new_col\n\n union all\n \n select\n 3 as id,\n '2023-01-03' as updated_at,\n 'x' as new_col\n\n", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "snapshot.secret.snapshot_test_late_data": {"database": "development", "schema": "snapshots", "name": "snapshot_test_late_data", "resource_type": "snapshot", "package_name": "secret", "path": "snapshot_test_late_data.sql", "original_file_path": "snapshots/snapshot_test_late_data.sql", "unique_id": "snapshot.secret.snapshot_test_late_data", "fqn": ["secret", "snapshot_test_late_data", "snapshot_test_late_data"], "alias": "snapshot_test_late_data", "checksum": {"name": "sha256", "checksum": "d23e786d8e3fc11c76aa10bb34c59ef41199609343949f430aaf9cec97ed6071"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": "development", "updated_at": "updated_at", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "development", "target_schema": "snapshots", "unique_key": "id", "strategy": "timestamp", "updated_at": "updated_at"}, "created_at": 1691482188.8608212, "relation_name": "development.snapshots.snapshot_test_late_data", "raw_code": "\n\n{{\n    config(\n      target_database='development',\n      target_schema='snapshots',\n      unique_key='id',\n\n      strategy='timestamp',\n      updated_at='updated_at',\n    )\n}}\n\n-- sample data\nselect\n 1 as id,\n 3 as some_value,\n TIMEADD(minute, -4, current_timestamp) as updated_at\n\nunion all\n\nselect\n 2 as id,\n 3 as some_value,\n TIMEADD(minute, -4, current_timestamp) as updated_at\n\n", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "snapshot.secret.test_hard_deletes": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "test_hard_deletes", "resource_type": "snapshot", "package_name": "secret", "path": "test_hard_deletes.sql", "original_file_path": "snapshots/test_hard_deletes.sql", "unique_id": "snapshot.secret.test_hard_deletes", "fqn": ["secret", "test_hard_deletes", "test_hard_deletes"], "alias": "test_hard_deletes", "checksum": {"name": "sha256", "checksum": "1e79ee61b318be36bc87241c4ed259a371718b93fa9428e5258a5f2a2366eabb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "strategy": "check", "target_schema": "dbt_pkearns", "target_database": "DEVELOPMENT", "updated_at": null, "check_cols": "all", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "DEVELOPMENT", "target_schema": "dbt_pkearns", "unique_key": "id", "strategy": "check", "check_cols": "all"}, "created_at": 1691482188.8785882, "relation_name": "DEVELOPMENT.dbt_pkearns.test_hard_deletes", "raw_code": "\n\n{{\n    config(\n      target_database=target.database,\n      target_schema=target.schema,\n      unique_key='id',\n      strategy='check',\n      check_cols='all'\n    )\n}}\n\nselect 1 as id\nunion all\nselect 2 as id\n-- union all\n-- select 4 as id\n\n", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "snapshot.secret.hard_deletes__snapshot": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "hard_deletes__snapshot", "resource_type": "snapshot", "package_name": "secret", "path": "hard_deletes/hard_deletes__snapshot.sql", "original_file_path": "snapshots/hard_deletes/hard_deletes__snapshot.sql", "unique_id": "snapshot.secret.hard_deletes__snapshot", "fqn": ["secret", "hard_deletes", "hard_deletes__snapshot", "hard_deletes__snapshot"], "alias": "hard_deletes__snapshot", "checksum": {"name": "sha256", "checksum": "53574ca371dbe30d1e97f8604494772bc8e067d0e500745f9d5af77098633c59"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "strategy": "check", "target_schema": "dbt_pkearns", "target_database": "DEVELOPMENT", "updated_at": null, "check_cols": ["color"], "invalidate_hard_deletes": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "target_database": "DEVELOPMENT", "target_schema": "dbt_pkearns", "unique_key": "id", "check_cols": ["color"], "strategy": "check", "invalidate_hard_deletes": true}, "created_at": 1691482188.8874216, "relation_name": "DEVELOPMENT.dbt_pkearns.hard_deletes__snapshot", "raw_code": "\n\n{{\n    config(\n      target_database=target.database,\n      target_schema=target.schema,\n      unique_key='id',\n      check_cols=['color'],\n      strategy='check',\n      invalidate_hard_deletes=True,\n    )\n}}\n\nselect * from {{ ref('hard_deletes_source') }}\n\n", "language": "sql", "refs": [{"name": "hard_deletes_source", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.secret.hard_deletes_source"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "test.secret.assert_my_second_model_has_one_record": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "assert_my_second_model_has_one_record", "resource_type": "test", "package_name": "secret", "path": "assert_my_second_model_has_one_record.sql", "original_file_path": "tests/assert_my_second_model_has_one_record.sql", "unique_id": "test.secret.assert_my_second_model_has_one_record", "fqn": ["secret", "assert_my_second_model_has_one_record"], "alias": "assert_my_second_model_has_one_record", "checksum": {"name": "sha256", "checksum": "85cf976ec5385d52f769e6d510cb8847bcdf866c16261acfa6dd7a73497658ee"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1691482188.9372292, "relation_name": null, "raw_code": "{{ log_something() }}\n\nselect 'error!' as error\nwhere (select count(*) from {{ref('my_second_model')}}) != 1", "language": "sql", "refs": [{"name": "my_second_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.secret.log_something"], "nodes": ["model.secret.my_second_model"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "seed.secret.sample_json_and_array_fields": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "sample_json_and_array_fields", "resource_type": "seed", "package_name": "secret", "path": "sample_json_and_array_fields.csv", "original_file_path": "seeds/sample_json_and_array_fields.csv", "unique_id": "seed.secret.sample_json_and_array_fields", "fqn": ["secret", "sample_json_and_array_fields"], "alias": "sample_json_and_array_fields", "checksum": {"name": "sha256", "checksum": "b76c71b136a8dfeee8c76f288cde5a074e75ba8d4d02ada2454511f30eab0172"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1691482188.9802845, "relation_name": "DEVELOPMENT.dbt_pkearns.sample_json_and_array_fields", "raw_code": "", "root_path": "/tmp/jobs/180032098/target/dbt_snowflake", "depends_on": {"macros": []}}, "seed.secret.seed__corporation__one_time_load": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "seed__corporation__one_time_load", "resource_type": "seed", "package_name": "secret", "path": "onsemi/seed__corporation__one_time_load.csv", "original_file_path": "seeds/onsemi/seed__corporation__one_time_load.csv", "unique_id": "seed.secret.seed__corporation__one_time_load", "fqn": ["secret", "onsemi", "seed__corporation__one_time_load"], "alias": "seed__corporation__one_time_load", "checksum": {"name": "sha256", "checksum": "fd7527ae56db96a8e38bbd40acdeb7914da3a4ecd829aaf449e3df9c31c5692c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1691482188.9850593, "relation_name": "DEVELOPMENT.dbt_pkearns.seed__corporation__one_time_load", "raw_code": "", "root_path": "/tmp/jobs/180032098/target/dbt_snowflake", "depends_on": {"macros": []}}, "seed.secret.seed__product__stg_data": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "seed__product__stg_data", "resource_type": "seed", "package_name": "secret", "path": "onsemi/seed__product__stg_data.csv", "original_file_path": "seeds/onsemi/seed__product__stg_data.csv", "unique_id": "seed.secret.seed__product__stg_data", "fqn": ["secret", "onsemi", "seed__product__stg_data"], "alias": "seed__product__stg_data", "checksum": {"name": "sha256", "checksum": "f6ed759c2dd8098f59f457f067cebc53279e733a9efde1714e59b34398dc29e9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1691482188.9896176, "relation_name": "DEVELOPMENT.dbt_pkearns.seed__product__stg_data", "raw_code": "", "root_path": "/tmp/jobs/180032098/target/dbt_snowflake", "depends_on": {"macros": []}}, "seed.secret.seed__edw_process_batch_ctl": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "seed__edw_process_batch_ctl", "resource_type": "seed", "package_name": "secret", "path": "onsemi/seed__edw_process_batch_ctl.csv", "original_file_path": "seeds/onsemi/seed__edw_process_batch_ctl.csv", "unique_id": "seed.secret.seed__edw_process_batch_ctl", "fqn": ["secret", "onsemi", "seed__edw_process_batch_ctl"], "alias": "seed__edw_process_batch_ctl", "checksum": {"name": "sha256", "checksum": "e498010dd9c93abfc9e6f2068f4869eb683e2ca0a440c3670d182bb8d03892df"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1691482188.9941413, "relation_name": "DEVELOPMENT.dbt_pkearns.seed__edw_process_batch_ctl", "raw_code": "", "root_path": "/tmp/jobs/180032098/target/dbt_snowflake", "depends_on": {"macros": []}}, "seed.secret.seed__product__one_time_load": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "seed__product__one_time_load", "resource_type": "seed", "package_name": "secret", "path": "onsemi/seed__product__one_time_load.csv", "original_file_path": "seeds/onsemi/seed__product__one_time_load.csv", "unique_id": "seed.secret.seed__product__one_time_load", "fqn": ["secret", "onsemi", "seed__product__one_time_load"], "alias": "seed__product__one_time_load", "checksum": {"name": "sha256", "checksum": "5c1e3e501ad2da4c11d2b67258f54ba4efa5441109b5206e86334ee87bb684d2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1691482188.998848, "relation_name": "DEVELOPMENT.dbt_pkearns.seed__product__one_time_load", "raw_code": "", "root_path": "/tmp/jobs/180032098/target/dbt_snowflake", "depends_on": {"macros": []}}, "seed.secret.seed__negative_key": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "seed__negative_key", "resource_type": "seed", "package_name": "secret", "path": "onsemi/seed__negative_key.csv", "original_file_path": "seeds/onsemi/seed__negative_key.csv", "unique_id": "seed.secret.seed__negative_key", "fqn": ["secret", "onsemi", "seed__negative_key"], "alias": "seed__negative_key", "checksum": {"name": "sha256", "checksum": "e255eeb6a682e602a7eccb7b2f989790458d0923d7a7aae33b3e92b4e5b80a3b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1691482189.0032985, "relation_name": "DEVELOPMENT.dbt_pkearns.seed__negative_key", "raw_code": "", "root_path": "/tmp/jobs/180032098/target/dbt_snowflake", "depends_on": {"macros": []}}, "seed.secret.seed__sample_data_status": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "seed__sample_data_status", "resource_type": "seed", "package_name": "secret", "path": "onsemi/seed__sample_data_status.csv", "original_file_path": "seeds/onsemi/seed__sample_data_status.csv", "unique_id": "seed.secret.seed__sample_data_status", "fqn": ["secret", "onsemi", "seed__sample_data_status"], "alias": "seed__sample_data_status", "checksum": {"name": "sha256", "checksum": "9dffbefe43422fea9676874a814eb84a3205c70b33f612e7ad4bec6e7c8936f1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1691482189.0077574, "relation_name": "DEVELOPMENT.dbt_pkearns.seed__sample_data_status", "raw_code": "", "root_path": "/tmp/jobs/180032098/target/dbt_snowflake", "depends_on": {"macros": []}}, "seed.secret.seed__corporation__stg_data": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "seed__corporation__stg_data", "resource_type": "seed", "package_name": "secret", "path": "onsemi/seed__corporation__stg_data.csv", "original_file_path": "seeds/onsemi/seed__corporation__stg_data.csv", "unique_id": "seed.secret.seed__corporation__stg_data", "fqn": ["secret", "onsemi", "seed__corporation__stg_data"], "alias": "seed__corporation__stg_data", "checksum": {"name": "sha256", "checksum": "9d0340fd1774393bfe17c08b87e5b1b3fef12a44139ddb24ec95a8436b26a8f4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1691482189.0122466, "relation_name": "DEVELOPMENT.dbt_pkearns.seed__corporation__stg_data", "raw_code": "", "root_path": "/tmp/jobs/180032098/target/dbt_snowflake", "depends_on": {"macros": []}}, "seed.secret.seed__sample_data": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "seed__sample_data", "resource_type": "seed", "package_name": "secret", "path": "onsemi/seed__sample_data.csv", "original_file_path": "seeds/onsemi/seed__sample_data.csv", "unique_id": "seed.secret.seed__sample_data", "fqn": ["secret", "onsemi", "seed__sample_data"], "alias": "seed__sample_data", "checksum": {"name": "sha256", "checksum": "05ec16b890a5876aebf64dea55907f6efb438564831d10bb9180aac84df7aa69"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1691482189.0167546, "relation_name": "DEVELOPMENT.dbt_pkearns.seed__sample_data", "raw_code": "", "root_path": "/tmp/jobs/180032098/target/dbt_snowflake", "depends_on": {"macros": []}}, "seed.secret.seed__edw_process_info": {"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "seed__edw_process_info", "resource_type": "seed", "package_name": "secret", "path": "onsemi/seed__edw_process_info.csv", "original_file_path": "seeds/onsemi/seed__edw_process_info.csv", "unique_id": "seed.secret.seed__edw_process_info", "fqn": ["secret", "onsemi", "seed__edw_process_info"], "alias": "seed__edw_process_info", "checksum": {"name": "sha256", "checksum": "dcfe78ef658393bcb7e54a71c241013c63ce7c0aa250ceeeec0979ce3d6e2210"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1691482189.0212662, "relation_name": "DEVELOPMENT.dbt_pkearns.seed__edw_process_info", "raw_code": "", "root_path": "/tmp/jobs/180032098/target/dbt_snowflake", "depends_on": {"macros": []}}, "model.dbt_artifacts.dim_dbt__exposures": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "dim_dbt__exposures", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__exposures.sql", "original_file_path": "models/dim_dbt__exposures.sql", "unique_id": "model.dbt_artifacts.dim_dbt__exposures", "fqn": ["dbt_artifacts", "dim_dbt__exposures"], "alias": "dim_dbt__exposures", "checksum": {"name": "sha256", "checksum": "4e6b5285050f6cdd809b3a1c0f072e75114e595aa9f53a6c9b9cfba4adad4487"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about exposures.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Node description.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exposure_execution_id": {"name": "exposure_execution_id", "description": "Execution ID of the exposure node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner": {"name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__exposures.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.8397334, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.dim_dbt__exposures", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__exposures') }}\n\n),\n\nexposures as (\n\n    select\n        exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes,\n        tags\n    from base\n\n)\n\nselect * from exposures", "language": "sql", "refs": [{"name": "stg_dbt__exposures", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__exposures"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.fct_dbt__model_executions": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "fct_dbt__model_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__model_executions.sql", "original_file_path": "models/fct_dbt__model_executions.sql", "unique_id": "model.dbt_artifacts.fct_dbt__model_executions", "fqn": ["dbt_artifacts", "fct_dbt__model_executions"], "alias": "fct_dbt__model_executions", "checksum": {"name": "sha256", "checksum": "95cfbd8c023b5c9e920c6bb694ffa5c7f59596b49b9f8a811c7d2a6fdb7cfabe"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Fact model that contains data about model executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bytes_affected": {"name": "bytes_affected", "description": "Number of bytes processed by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__model_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.9230778, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.fct_dbt__model_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__model_executions') }}\n\n),\n\nmodel_executions as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        {% if target.type == 'bigquery' %}\n            bytes_processed,\n        {% endif %}\n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message\n    from base\n\n)\n\nselect * from model_executions", "language": "sql", "refs": [{"name": "stg_dbt__model_executions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__model_executions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.fct_dbt__invocations": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "fct_dbt__invocations", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__invocations.sql", "original_file_path": "models/fct_dbt__invocations.sql", "unique_id": "model.dbt_artifacts.fct_dbt__invocations", "fqn": ["dbt_artifacts", "fct_dbt__invocations"], "alias": "fct_dbt__invocations", "checksum": {"name": "sha256", "checksum": "c58651a8fb885f0b0bdcea8a7000c8413b8d611f7ed0bf82fcd49e5000619c32"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Fact model that contains data about invocations.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_command": {"name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "full_refresh_flag": {"name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_profile_name": {"name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_name": {"name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_schema": {"name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_threads": {"name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "env_vars": {"name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_vars": {"name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invocation_args": {"name": "invocation_args", "description": "Key-value pairs of args passed to invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_custom_envs": {"name": "dbt_custom_envs", "description": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__invocations.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.8621833, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.fct_dbt__invocations", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__invocations') }}\n\n),\n\ninvocations as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars,\n        invocation_args,\n        dbt_custom_envs\n    from base\n\n)\n\nselect * from invocations", "language": "sql", "refs": [{"name": "stg_dbt__invocations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__invocations"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.fct_dbt__test_executions": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "fct_dbt__test_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__test_executions.sql", "original_file_path": "models/fct_dbt__test_executions.sql", "unique_id": "model.dbt_artifacts.fct_dbt__test_executions", "fqn": ["dbt_artifacts", "fct_dbt__test_executions"], "alias": "fct_dbt__test_executions", "checksum": {"name": "sha256", "checksum": "38ab767416a2b1bfdc5d471dc4c7bb9d2a44b7482c6d96f8fe55d4d0f1f3aff3"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Fact model that contains data about test executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__test_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.90869, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.fct_dbt__test_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__test_executions') }}\n\n),\n\ntest_executions as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures,\n        message\n    from base\n\n)\n\nselect * from test_executions", "language": "sql", "refs": [{"name": "stg_dbt__test_executions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__test_executions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.dim_dbt__tests": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "dim_dbt__tests", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__tests.sql", "original_file_path": "models/dim_dbt__tests.sql", "unique_id": "model.dbt_artifacts.dim_dbt__tests", "fqn": ["dbt_artifacts", "dim_dbt__tests"], "alias": "dim_dbt__tests", "checksum": {"name": "sha256", "checksum": "aa301ae84a25357e3eb01bb41238f7d5126cbc576348fb769246a8b5737c0065"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about tests.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_path": {"name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__tests.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.8525143, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.dim_dbt__tests", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__tests') }}\n\n),\n\ntests as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from tests", "language": "sql", "refs": [{"name": "stg_dbt__tests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__tests"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.dim_dbt__sources": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "dim_dbt__sources", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__sources.sql", "original_file_path": "models/dim_dbt__sources.sql", "unique_id": "model.dbt_artifacts.dim_dbt__sources", "fqn": ["dbt_artifacts", "dim_dbt__sources"], "alias": "dim_dbt__sources", "checksum": {"name": "sha256", "checksum": "7c05773e6974d042eba9c13f7cc7d4d922c6c255855e6a3b4043fa7bf8e2bac0"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about sources.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "freshness": {"name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loader": {"name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_execution_id": {"name": "source_execution_id", "description": "Execution ID of the source node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__sources.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.8795948, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.dim_dbt__sources", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__sources') }}\n\n),\n\nsources as (\n\n    select\n        source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from sources", "language": "sql", "refs": [{"name": "stg_dbt__sources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__sources"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.fct_dbt__snapshot_executions": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "fct_dbt__snapshot_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__snapshot_executions.sql", "original_file_path": "models/fct_dbt__snapshot_executions.sql", "unique_id": "model.dbt_artifacts.fct_dbt__snapshot_executions", "fqn": ["dbt_artifacts", "fct_dbt__snapshot_executions"], "alias": "fct_dbt__snapshot_executions", "checksum": {"name": "sha256", "checksum": "fae9bb5c2160bdb4c937f9d5971b896e47f78a08cd423722efd4a1f03854c012"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Fact model that contains data about snapshot executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__snapshot_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.8475592, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.fct_dbt__snapshot_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__snapshot_executions') }}\n\n),\n\nsnapshot_executions as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name,\n        alias,\n        message\n    from base\n\n)\n\nselect * from snapshot_executions", "language": "sql", "refs": [{"name": "stg_dbt__snapshot_executions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__snapshot_executions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.dim_dbt__models": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "dim_dbt__models", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__models.sql", "original_file_path": "models/dim_dbt__models.sql", "unique_id": "model.dbt_artifacts.dim_dbt__models", "fqn": ["dbt_artifacts", "dim_dbt__models"], "alias": "dim_dbt__models", "checksum": {"name": "sha256", "checksum": "d983205b0257086d4182d80e8f99313234b70dd0f54c63ae4aaed1e3326a142b"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about models.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.9021528, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.dim_dbt__models", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__models') }}\n\n),\n\nmodels as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization,\n        tags,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from models", "language": "sql", "refs": [{"name": "stg_dbt__models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__models"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.dim_dbt__current_models": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "dim_dbt__current_models", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__current_models.sql", "original_file_path": "models/dim_dbt__current_models.sql", "unique_id": "model.dbt_artifacts.dim_dbt__current_models", "fqn": ["dbt_artifacts", "dim_dbt__current_models"], "alias": "dim_dbt__current_models", "checksum": {"name": "sha256", "checksum": "aae9dd3f29753a5f11a8a344616a458730cfbafba6bedd3ea59f511c31e26bf0"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about models' most recent successful runs", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_full_refresh_run_completed_at": {"name": "last_full_refresh_run_completed_at", "description": "Timestamp when the node's SQL query completed on the last full (non-incremental) run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_full_refresh_run_rows_affected": {"name": "last_full_refresh_run_rows_affected", "description": "Number of rows affected by the node's last full (non-incremental) run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_full_refresh_run_bytes_processed": {"name": "last_full_refresh_run_bytes_processed", "description": "Number of bytes processed by the node's last full (non-incremental) run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_full_refresh_run_total_runtime": {"name": "last_full_refresh_run_total_runtime", "description": "Total time spent executing the node's last full (non-incremental) run (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_run_completed_at": {"name": "last_run_completed_at", "description": "Timestamp when the node's SQL query completed on the last run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_run_rows_affected": {"name": "last_run_rows_affected", "description": "Number of rows affected by the node's last run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_run_bytes_processed": {"name": "last_run_bytes_processed", "description": "Number of bytes processed by the node's last run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_run_total_runtime": {"name": "last_run_total_runtime", "description": "Total time spent executing the node's last run (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__current_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.873088, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.dim_dbt__current_models", "raw_code": "with base as (\n    select *\n    from {{ ref('stg_dbt__models') }}\n),\n\nmodel_executions as (\n    select *\n    from {{ ref('stg_dbt__model_executions') }}\n),\n\nlatest_models as (\n    /* Retrieves the models present in the most recent run */\n    select *\n    from base\n    where run_started_at = (select max(run_started_at) from base)\n),\n\nlatest_models_runs as (\n    /* Retreives all successful run information for the models present in the most\n    recent run and ranks them based on query completion time */\n    select\n        model_executions.node_id\n        , model_executions.was_full_refresh\n        , model_executions.query_completed_at\n        , model_executions.total_node_runtime\n        , model_executions.rows_affected\n        {% if target.type == 'bigquery' %}\n        , model_executions.bytes_processed\n        {% endif %}\n        , row_number() over (\n            partition by latest_models.node_id, model_executions.was_full_refresh\n            order by model_executions.query_completed_at desc /* most recent ranked first */\n        ) as run_idx\n    from model_executions\n    inner join latest_models on model_executions.node_id = latest_models.node_id\n    where model_executions.status = 'success'\n),\n\nlatest_model_stats as (\n    select\n        node_id\n        , max(case when was_full_refresh then query_completed_at end) as last_full_refresh_run_completed_at\n        , max(case when was_full_refresh then total_node_runtime end) as last_full_refresh_run_total_runtime\n        , max(case when was_full_refresh then rows_affected end) as last_full_refresh_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , max(case when was_full_refresh then bytes_processed end) as last_full_refresh_run_bytes_processed\n        {% endif %}\n        , max(query_completed_at) as last_run_completed_at\n        , max(total_node_runtime) as last_run_total_runtime\n        , max(rows_affected) as last_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , max(bytes_processed) as last_run_bytes_processed\n        {% endif %}\n    from latest_models_runs\n    where run_idx = 1\n    group by 1\n),\n\nfinal as (\n    select\n        latest_models.*\n        , latest_model_stats.last_full_refresh_run_completed_at\n        , latest_model_stats.last_full_refresh_run_total_runtime\n        , latest_model_stats.last_full_refresh_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , latest_model_stats.last_full_refresh_run_bytes_processed\n        {% endif %}\n        , latest_model_stats.last_run_completed_at\n        , latest_model_stats.last_run_total_runtime\n        , latest_model_stats.last_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , latest_model_stats.last_run_bytes_processed\n        {% endif %}\n    from latest_models\n    left join latest_model_stats\n        on latest_models.node_id = latest_model_stats.node_id\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_dbt__models", "package": null, "version": null}, {"name": "stg_dbt__model_executions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__models", "model.dbt_artifacts.stg_dbt__model_executions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.fct_dbt__seed_executions": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "fct_dbt__seed_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__seed_executions.sql", "original_file_path": "models/fct_dbt__seed_executions.sql", "unique_id": "model.dbt_artifacts.fct_dbt__seed_executions", "fqn": ["dbt_artifacts", "fct_dbt__seed_executions"], "alias": "fct_dbt__seed_executions", "checksum": {"name": "sha256", "checksum": "6ee5abff9a8147d1e7e55895dc4e0fda41867069ef06cb00c0cfbec7f1551590"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Fact model that contains data about seed executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__seed_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.8944237, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.fct_dbt__seed_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__seed_executions') }}\n\n),\n\nseed_executions as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name,\n        alias,\n        message\n    from base\n\n)\n\nselect * from seed_executions", "language": "sql", "refs": [{"name": "stg_dbt__seed_executions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__seed_executions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.dim_dbt__snapshots": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "dim_dbt__snapshots", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__snapshots.sql", "original_file_path": "models/dim_dbt__snapshots.sql", "unique_id": "model.dbt_artifacts.dim_dbt__snapshots", "fqn": ["dbt_artifacts", "dim_dbt__snapshots"], "alias": "dim_dbt__snapshots", "checksum": {"name": "sha256", "checksum": "8a2ef7f0b0892c9197611911c1c0700e86a301e27825da25a7f66cfd2bab409c"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about snapshots.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "strategy": {"name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__snapshots.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.886584, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.dim_dbt__snapshots", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__snapshots') }}\n\n),\n\nsnapshots as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from snapshots", "language": "sql", "refs": [{"name": "stg_dbt__snapshots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__snapshots"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.dim_dbt__seeds": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "dim_dbt__seeds", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__seeds.sql", "original_file_path": "models/dim_dbt__seeds.sql", "unique_id": "model.dbt_artifacts.dim_dbt__seeds", "fqn": ["dbt_artifacts", "dim_dbt__seeds"], "alias": "dim_dbt__seeds", "checksum": {"name": "sha256", "checksum": "350b4d88c96d239c69da34d8b875d2002a2d74a8330a1f39b73fdb71850082d0"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about seeds.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.914727, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.dim_dbt__seeds", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__seeds') }}\n\n),\n\nseeds as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from seeds", "language": "sql", "refs": [{"name": "stg_dbt__seeds", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__seeds"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.exposures": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "exposures", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/exposures.sql", "original_file_path": "models/sources/exposures.sql", "unique_id": "model.dbt_artifacts.exposures", "fqn": ["dbt_artifacts", "sources", "exposures"], "alias": "exposures", "checksum": {"name": "sha256", "checksum": "6e722dd3b66bc19547705c0d0e95151b9676c07c9c7af257128258a28b76dc89"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for data about exposure exections. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner": {"name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Node description.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "all_results": {"name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/exposures.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}, "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.974243, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.exposures", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as type,\n    cast(null as {{ type_json() }}) as owner,\n    cast(null as {{ type_string() }}) as maturity,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as description,\n    cast(null as {{ type_string() }}) as url,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_array() }}) as depends_on_nodes,\n    cast(null as {{ type_array() }}) as tags,\n    cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_json", "macro.dbt_artifacts.type_array"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.model_executions": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "model_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/model_executions.sql", "original_file_path": "models/sources/model_executions.sql", "unique_id": "model.dbt_artifacts.model_executions", "fqn": ["dbt_artifacts", "sources", "model_executions"], "alias": "model_executions", "checksum": {"name": "sha256", "checksum": "00aae46c1cbea3c8af251b4a237357156d86e22cebcbbe4b939fb7319036ebba"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for data about model executions. One row per model execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/model_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}, "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.9558125, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.model_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    {% if target.type == 'bigquery' %}\n        cast(null as {{ type_int() }}) as bytes_processed,\n    {% endif %}\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as alias,\n    cast(null as {{ type_string() }}) as message,\n    cast(null as {{ type_json() }}) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.snapshots": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "snapshots", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/snapshots.sql", "original_file_path": "models/sources/snapshots.sql", "unique_id": "model.dbt_artifacts.snapshots", "fqn": ["dbt_artifacts", "sources", "snapshots"], "alias": "snapshots", "checksum": {"name": "sha256", "checksum": "7105778c0a8dbf7396ed63f19ec8c56bfd6133605ad351bb924ecc68055eb92a"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for metadata about seed executions. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "strategy": {"name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "all_results": {"name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/snapshots.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}, "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482190.0049717, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.snapshots", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_array() }}) as depends_on_nodes,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as checksum,\n    cast(null as {{ type_string() }}) as strategy,\n    cast(null as {{ type_json() }}) as meta,\n    cast(null as {{ type_string() }}) as alias,\n    cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.seeds": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "seeds", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/seeds.sql", "original_file_path": "models/sources/seeds.sql", "unique_id": "model.dbt_artifacts.seeds", "fqn": ["dbt_artifacts", "sources", "seeds"], "alias": "seeds", "checksum": {"name": "sha256", "checksum": "55e82a7ace6b25fd550da716c0414cbc730fc733bdab74d12cc688ee52f44469"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for metadata about seed executions. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "all_results": {"name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}, "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.9977756, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.seeds", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as checksum,\n    cast(null as {{ type_json() }}) as meta,\n    cast(null as {{ type_string() }}) as alias,\n    cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.models": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "models", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/models.sql", "original_file_path": "models/sources/models.sql", "unique_id": "model.dbt_artifacts.models", "fqn": ["dbt_artifacts", "sources", "models"], "alias": "models", "checksum": {"name": "sha256", "checksum": "5dc9021a99345640990cec2146093b91bb211ee5b97d165d468768df1d437daf"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains metadata about model executions. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "all_results": {"name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}, "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.9407077, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.models", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_array() }}) as depends_on_nodes,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as checksum,\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_array() }}) as tags,\n    cast(null as {{ type_json() }}) as meta,\n    cast(null as {{ type_string() }}) as alias,\n    cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.snapshot_executions": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "snapshot_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/snapshot_executions.sql", "original_file_path": "models/sources/snapshot_executions.sql", "unique_id": "model.dbt_artifacts.snapshot_executions", "fqn": ["dbt_artifacts", "sources", "snapshot_executions"], "alias": "snapshot_executions", "checksum": {"name": "sha256", "checksum": "c1f20c827ffb1ef7cddf70afef424ccc92ad257d26f35c6e133a3cc42d66562b"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for data about snapshot executions. One row per snapshot execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/snapshot_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}, "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.9912636, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.snapshot_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as alias,\n    cast(null as {{ type_string() }}) as message,\n    cast(null as {{ type_json() }}) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.seed_executions": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "seed_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/seed_executions.sql", "original_file_path": "models/sources/seed_executions.sql", "unique_id": "model.dbt_artifacts.seed_executions", "fqn": ["dbt_artifacts", "sources", "seed_executions"], "alias": "seed_executions", "checksum": {"name": "sha256", "checksum": "c1f20c827ffb1ef7cddf70afef424ccc92ad257d26f35c6e133a3cc42d66562b"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for data about seed executions. One row per seed execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/seed_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}, "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.9827821, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.seed_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as alias,\n    cast(null as {{ type_string() }}) as message,\n    cast(null as {{ type_json() }}) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.tests": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "tests", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/tests.sql", "original_file_path": "models/sources/tests.sql", "unique_id": "model.dbt_artifacts.tests", "fqn": ["dbt_artifacts", "sources", "tests"], "alias": "tests", "checksum": {"name": "sha256", "checksum": "4c01738a844f61998ee400d5488ffc6ec4f26f5cab407c1e381d68b372b13a85"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for metadata about test executions. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_path": {"name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "all_results": {"name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/tests.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}, "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.967261, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.tests", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_array() }}) as depends_on_nodes,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as test_path,\n    cast(null as {{ type_array() }}) as tags,\n    cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.invocations": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "invocations", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/invocations.sql", "original_file_path": "models/sources/invocations.sql", "unique_id": "model.dbt_artifacts.invocations", "fqn": ["dbt_artifacts", "sources", "invocations"], "alias": "invocations", "checksum": {"name": "sha256", "checksum": "6a4815b5120da5634e36f6e798de58df84e90a99217f492f326fccbc04d1ffba"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for data about the invocations of dbt. One row per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_command": {"name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "full_refresh_flag": {"name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_profile_name": {"name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_name": {"name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_schema": {"name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_threads": {"name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "env_vars": {"name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_vars": {"name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invocation_args": {"name": "invocation_args", "description": "Key-value pairs of args passed to invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_custom_envs": {"name": "dbt_custom_envs", "description": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/invocations.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}, "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.9328673, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.invocations", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as dbt_version,\n    cast(null as {{ type_string() }}) as project_name,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as dbt_command,\n    cast(null as {{ type_boolean() }}) as full_refresh_flag,\n    cast(null as {{ type_string() }}) as target_profile_name,\n    cast(null as {{ type_string() }}) as target_name,\n    cast(null as {{ type_string() }}) as target_schema,\n    cast(null as {{ type_int() }}) as target_threads,\n    cast(null as {{ type_string() }}) as dbt_cloud_project_id,\n    cast(null as {{ type_string() }}) as dbt_cloud_job_id,\n    cast(null as {{ type_string() }}) as dbt_cloud_run_id,\n    cast(null as {{ type_string() }}) as dbt_cloud_run_reason_category,\n    cast(null as {{ type_string() }}) as dbt_cloud_run_reason,\n    cast(null as {{ type_json() }}) as env_vars,\n    cast(null as {{ type_json() }}) as dbt_vars,\n    cast(null as {{ type_json() }}) as invocation_args,\n    cast(null as {{ type_json() }}) as dbt_custom_envs\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_int", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.sources": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "sources", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/sources.sql", "original_file_path": "models/sources/sources.sql", "unique_id": "model.dbt_artifacts.sources", "fqn": ["dbt_artifacts", "sources", "sources"], "alias": "sources", "checksum": {"name": "sha256", "checksum": "cdb2b6f673a0c33ee6f4b4df2061af8e3f377b2270c807abc6e2652b6eef91d9"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for data about sources. One row per node per execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loader": {"name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "freshness": {"name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "all_results": {"name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/sources.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}, "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.9623353, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.sources", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as source_name,\n    cast(null as {{ type_string() }}) as loader,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as identifier,\n    cast(null as {{ type_string() }}) as loaded_at_field,\n    {% if target.type == 'snowflake' %}\n        cast(null as {{ type_array() }}) as freshness,\n    {% else %}\n        cast(null as {{ type_json() }}) as freshness,\n    {% endif %}\n    cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.test_executions": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added", "name": "test_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/test_executions.sql", "original_file_path": "models/sources/test_executions.sql", "unique_id": "model.dbt_artifacts.test_executions", "fqn": ["dbt_artifacts", "sources", "test_executions"], "alias": "test_executions", "checksum": {"name": "sha256", "checksum": "99cdc23c924ffccb41d4f04f1c01d77b68882db3d20103ade59566e54f795e5a"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for metadata about test executions. One row per test execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/test_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}, "schema": "dbt_artifacts_kearns_added"}, "created_at": 1691482189.9474845, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added.test_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    cast(null as {{ type_int() }}) as failures,\n    cast(null as {{ type_string() }}) as message,\n    cast(null as {{ type_json() }}) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.stg_dbt__seed_executions": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added__staging", "name": "stg_dbt__seed_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__seed_executions.sql", "original_file_path": "models/staging/stg_dbt__seed_executions.sql", "unique_id": "model.dbt_artifacts.stg_dbt__seed_executions", "fqn": ["dbt_artifacts", "staging", "stg_dbt__seed_executions"], "alias": "stg_dbt__seed_executions", "checksum": {"name": "sha256", "checksum": "a1d73976c499d79936a129f1fa7a536f66e97812829b27bbf2b84fef747b3ac0"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains data about seed executions. One row per seed execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__seed_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1691482190.049724, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added__staging.stg_dbt__seed_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('seed_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message,\n        adapter_response\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "seed_executions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.seed_executions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.stg_dbt__exposures": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added__staging", "name": "stg_dbt__exposures", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__exposures.sql", "original_file_path": "models/staging/stg_dbt__exposures.sql", "unique_id": "model.dbt_artifacts.stg_dbt__exposures", "fqn": ["dbt_artifacts", "staging", "stg_dbt__exposures"], "alias": "stg_dbt__exposures", "checksum": {"name": "sha256", "checksum": "ed5659a51982675abe6dd58ae003be71a3681da997e6f3edf219dfc800fb6f38"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains data about exposure exections. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Node description.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exposure_execution_id": {"name": "exposure_execution_id", "description": "Execution ID of the exposure node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner": {"name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__exposures.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1691482190.0730007, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added__staging.stg_dbt__exposures", "raw_code": "with base as (\n\n    select *\n    from {{ ref('exposures') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes,\n        tags\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "exposures", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key"], "nodes": ["model.dbt_artifacts.exposures"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.stg_dbt__model_executions": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added__staging", "name": "stg_dbt__model_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__model_executions.sql", "original_file_path": "models/staging/stg_dbt__model_executions.sql", "unique_id": "model.dbt_artifacts.stg_dbt__model_executions", "fqn": ["dbt_artifacts", "staging", "stg_dbt__model_executions"], "alias": "stg_dbt__model_executions", "checksum": {"name": "sha256", "checksum": "838f0f4d3e7fc7e36bb8d3f183bb86bc24cdabc0a00474298175c3f8b829cb60"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains data about model executions. One row per model execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bytes_processed": {"name": "bytes_processed", "description": "Number of bytes processed by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__model_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1691482190.0413957, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added__staging.stg_dbt__model_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('model_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        {% if target.type == 'bigquery' %}\n            bytes_processed,\n        {% endif %}\n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message,\n        adapter_response\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "model_executions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.model_executions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.stg_dbt__snapshots": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added__staging", "name": "stg_dbt__snapshots", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__snapshots.sql", "original_file_path": "models/staging/stg_dbt__snapshots.sql", "unique_id": "model.dbt_artifacts.stg_dbt__snapshots", "fqn": ["dbt_artifacts", "staging", "stg_dbt__snapshots"], "alias": "stg_dbt__snapshots", "checksum": {"name": "sha256", "checksum": "74411b1790f62e26679e3313efb3c5cc3a48fa5581659f859d7e6805872c9f47"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains metadata about seed executions. One row per node per run.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "strategy": {"name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__snapshots.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1691482190.056687, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added__staging.stg_dbt__snapshots", "raw_code": "with base as (\n\n    select *\n    from {{ ref('snapshots') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "snapshots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key"], "nodes": ["model.dbt_artifacts.snapshots"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.stg_dbt__seeds": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added__staging", "name": "stg_dbt__seeds", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__seeds.sql", "original_file_path": "models/staging/stg_dbt__seeds.sql", "unique_id": "model.dbt_artifacts.stg_dbt__seeds", "fqn": ["dbt_artifacts", "staging", "stg_dbt__seeds"], "alias": "stg_dbt__seeds", "checksum": {"name": "sha256", "checksum": "e13641fa3693779fe9c7457f4705deff6149ae1cff14de40944a0d2d2baf7fbe"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Stageing model that contains metadata about seed executions. One row per node per run.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1691482190.025852, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added__staging.stg_dbt__seeds", "raw_code": "with base as (\n\n    select *\n    from {{ ref('seeds') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "seeds", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key"], "nodes": ["model.dbt_artifacts.seeds"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.stg_dbt__test_executions": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added__staging", "name": "stg_dbt__test_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__test_executions.sql", "original_file_path": "models/staging/stg_dbt__test_executions.sql", "unique_id": "model.dbt_artifacts.stg_dbt__test_executions", "fqn": ["dbt_artifacts", "staging", "stg_dbt__test_executions"], "alias": "stg_dbt__test_executions", "checksum": {"name": "sha256", "checksum": "7b853f126d1c8a0f661ad02777eed4aff54326d0e2b8d5e63fc9728e9df7b2a2"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains metadata about test executions. One row per test execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__test_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1691482190.019818, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added__staging.stg_dbt__test_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('test_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures,\n        message\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "test_executions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.test_executions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.stg_dbt__sources": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added__staging", "name": "stg_dbt__sources", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__sources.sql", "original_file_path": "models/staging/stg_dbt__sources.sql", "unique_id": "model.dbt_artifacts.stg_dbt__sources", "fqn": ["dbt_artifacts", "staging", "stg_dbt__sources"], "alias": "stg_dbt__sources", "checksum": {"name": "sha256", "checksum": "fc17534ee4f5f3307a8ae0a3e40a26195bbb631e77a005b7bc09d87dd6ffd791"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains data about sources. One row per node per execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "freshness": {"name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loader": {"name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_execution_id": {"name": "source_execution_id", "description": "Execution ID of the source node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__sources.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1691482190.0321825, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added__staging.stg_dbt__sources", "raw_code": "with base as (\n\n    select *\n    from {{ ref('sources') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "sources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key"], "nodes": ["model.dbt_artifacts.sources"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.stg_dbt__invocations": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added__staging", "name": "stg_dbt__invocations", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__invocations.sql", "original_file_path": "models/staging/stg_dbt__invocations.sql", "unique_id": "model.dbt_artifacts.stg_dbt__invocations", "fqn": ["dbt_artifacts", "staging", "stg_dbt__invocations"], "alias": "stg_dbt__invocations", "checksum": {"name": "sha256", "checksum": "3c6ec7ff1be73763b9215b9cdb5713dbef4e09473f9179b8aae86f44591db65d"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains data about the invocations of dbt. One row per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_command": {"name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "full_refresh_flag": {"name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_profile_name": {"name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_name": {"name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_schema": {"name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_threads": {"name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "env_vars": {"name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_vars": {"name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invocation_args": {"name": "invocation_args", "description": "Key-value pairs of args passed to invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_custom_envs": {"name": "dbt_custom_envs", "description": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__invocations.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1691482190.0876184, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added__staging.stg_dbt__invocations", "raw_code": "with base as (\n\n    select *\n    from {{ ref('invocations') }}\n\n),\n\nenhanced as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars,\n        invocation_args,\n        dbt_custom_envs\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "invocations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.invocations"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.stg_dbt__snapshot_executions": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added__staging", "name": "stg_dbt__snapshot_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__snapshot_executions.sql", "original_file_path": "models/staging/stg_dbt__snapshot_executions.sql", "unique_id": "model.dbt_artifacts.stg_dbt__snapshot_executions", "fqn": ["dbt_artifacts", "staging", "stg_dbt__snapshot_executions"], "alias": "stg_dbt__snapshot_executions", "checksum": {"name": "sha256", "checksum": "92e77fda2ce7ffd3e6edd41579564ad719fc1f1212d6dc41e4701c1bda7f3841"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains data about snapshot executions. One row per snapshot execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__snapshot_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1691482190.065605, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added__staging.stg_dbt__snapshot_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('snapshot_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message,\n        adapter_response\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "snapshot_executions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.snapshot_executions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.stg_dbt__models": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added__staging", "name": "stg_dbt__models", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__models.sql", "original_file_path": "models/staging/stg_dbt__models.sql", "unique_id": "model.dbt_artifacts.stg_dbt__models", "fqn": ["dbt_artifacts", "staging", "stg_dbt__models"], "alias": "stg_dbt__models", "checksum": {"name": "sha256", "checksum": "0a664afe03945dbaae372463eae188b78b521749277ba76892822589903836b9"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains metadata about model executions. One row per node per run.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1691482190.012859, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added__staging.stg_dbt__models", "raw_code": "with base as (\n\n    select *\n    from {{ ref('models') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization,\n        tags,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key"], "nodes": ["model.dbt_artifacts.models"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.dbt_artifacts.stg_dbt__tests": {"database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_artifacts_kearns_added__staging", "name": "stg_dbt__tests", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__tests.sql", "original_file_path": "models/staging/stg_dbt__tests.sql", "unique_id": "model.dbt_artifacts.stg_dbt__tests", "fqn": ["dbt_artifacts", "staging", "stg_dbt__tests"], "alias": "stg_dbt__tests", "checksum": {"name": "sha256", "checksum": "7b637a0590b30d0bef21fcb5c57af5a0fbeceb33e5e01819fbd4755dbfdd5c74"}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts_kearns_added__staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains metadata about test executions. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_path": {"name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__tests.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta", "schema": "dbt_artifacts_kearns_added__staging"}, "created_at": 1691482190.077943, "relation_name": "DEVELOPMENT.dbt_pkearns__dbt_artifacts_kearns_added__staging.stg_dbt__tests", "raw_code": "with base as (\n\n    select *\n    from {{ ref('tests') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "tests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key"], "nodes": ["model.dbt_artifacts.tests"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.secret.unique_my_first_model_col.344040e6f9": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "col", "model": "{{ get_where_subquery(ref('my_first_model')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "unique_my_first_model_col", "resource_type": "test", "package_name": "secret", "path": "unique_my_first_model_col.sql", "original_file_path": "models/_core.yml", "unique_id": "test.secret.unique_my_first_model_col.344040e6f9", "fqn": ["secret", "unique_my_first_model_col"], "alias": "unique_my_first_model_col", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1691482189.643202, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "my_first_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.secret.my_first_model"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "col", "file_key_name": "models.my_first_model", "attached_node": "model.secret.my_first_model"}, "test.secret.not_null_my_first_model_col.9dde753ebf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "col", "model": "{{ get_where_subquery(ref('my_first_model')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "not_null_my_first_model_col", "resource_type": "test", "package_name": "secret", "path": "not_null_my_first_model_col.sql", "original_file_path": "models/_core.yml", "unique_id": "test.secret.not_null_my_first_model_col.9dde753ebf", "fqn": ["secret", "not_null_my_first_model_col"], "alias": "not_null_my_first_model_col", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1691482189.6472497, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "my_first_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.secret.my_first_model"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "col", "file_key_name": "models.my_first_model", "attached_node": "model.secret.my_first_model"}, "test.secret.unique_stg_customers_customer_id.c7614daada": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "unique_stg_customers_customer_id", "resource_type": "test", "package_name": "secret", "path": "unique_stg_customers_customer_id.sql", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop.yml", "unique_id": "test.secret.unique_stg_customers_customer_id.c7614daada", "fqn": ["secret", "staging", "jaffle_shop", "unique_stg_customers_customer_id"], "alias": "unique_stg_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/unique_stg_customers_customer_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1691482189.6814241, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.stg_customers"]}, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/unique_stg_customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPMENT.dbt_pkearns.stg_customers\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_customers", "attached_node": "model.secret.stg_customers"}, "test.secret.not_null_stg_customers_customer_id.e2cfb1f9aa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "not_null_stg_customers_customer_id", "resource_type": "test", "package_name": "secret", "path": "not_null_stg_customers_customer_id.sql", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop.yml", "unique_id": "test.secret.not_null_stg_customers_customer_id.e2cfb1f9aa", "fqn": ["secret", "staging", "jaffle_shop", "not_null_stg_customers_customer_id"], "alias": "not_null_stg_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/not_null_stg_customers_customer_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1691482189.6855164, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.stg_customers"]}, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/not_null_stg_customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom DEVELOPMENT.dbt_pkearns.stg_customers\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_customers", "attached_node": "model.secret.stg_customers"}, "test.secret.unique_stg_orders_order_id.e3b841c71a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "unique_stg_orders_order_id", "resource_type": "test", "package_name": "secret", "path": "unique_stg_orders_order_id.sql", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop.yml", "unique_id": "test.secret.unique_stg_orders_order_id.e3b841c71a", "fqn": ["secret", "staging", "jaffle_shop", "unique_stg_orders_order_id"], "alias": "unique_stg_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/unique_stg_orders_order_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1691482189.6894016, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.stg_orders"]}, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/unique_stg_orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPMENT.dbt_pkearns.stg_orders\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "order_id", "file_key_name": "models.stg_orders", "attached_node": "model.secret.stg_orders"}, "test.secret.not_null_stg_orders_order_id.81cfe2fe64": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "not_null_stg_orders_order_id", "resource_type": "test", "package_name": "secret", "path": "not_null_stg_orders_order_id.sql", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop.yml", "unique_id": "test.secret.not_null_stg_orders_order_id.81cfe2fe64", "fqn": ["secret", "staging", "jaffle_shop", "not_null_stg_orders_order_id"], "alias": "not_null_stg_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/not_null_stg_orders_order_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1691482189.6932075, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.stg_orders"]}, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/not_null_stg_orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom DEVELOPMENT.dbt_pkearns.stg_orders\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "order_id", "file_key_name": "models.stg_orders", "attached_node": "model.secret.stg_orders"}, "test.secret.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned", "resource_type": "test", "package_name": "secret", "path": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop.yml", "unique_id": "test.secret.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad", "fqn": ["secret", "staging", "jaffle_shop", "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned"], "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql", "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58"}, "created_at": 1691482189.6970322, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58\") }}", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.stg_orders"]}, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/stg_jaffle_shop.yml/accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from DEVELOPMENT.dbt_pkearns.stg_orders\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "status", "file_key_name": "models.stg_orders", "attached_node": "model.secret.stg_orders"}, "test.secret.unique_model_with_schema_tests_id.c8cceb01b0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('model_with_schema_tests')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "unique_model_with_schema_tests_id", "resource_type": "test", "package_name": "secret", "path": "unique_model_with_schema_tests_id.sql", "original_file_path": "models/demos/skippable_schema_tests/schema.yml", "unique_id": "test.secret.unique_model_with_schema_tests_id.c8cceb01b0", "fqn": ["secret", "demos", "skippable_schema_tests", "unique_model_with_schema_tests_id"], "alias": "unique_model_with_schema_tests_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["skippable_schema_test"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1691482189.7210908, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "model_with_schema_tests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.secret.model_with_schema_tests"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "models.model_with_schema_tests", "attached_node": "model.secret.model_with_schema_tests"}, "test.secret.not_null_model_with_schema_tests_id.2aa929087e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('model_with_schema_tests')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "not_null_model_with_schema_tests_id", "resource_type": "test", "package_name": "secret", "path": "not_null_model_with_schema_tests_id.sql", "original_file_path": "models/demos/skippable_schema_tests/schema.yml", "unique_id": "test.secret.not_null_model_with_schema_tests_id.2aa929087e", "fqn": ["secret", "demos", "skippable_schema_tests", "not_null_model_with_schema_tests_id"], "alias": "not_null_model_with_schema_tests_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["skippable_schema_test"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1691482189.7249308, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "model_with_schema_tests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.secret.model_with_schema_tests"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "models.model_with_schema_tests", "attached_node": "model.secret.model_with_schema_tests"}, "test.secret.unique_customers_customer_id.c5af1ff4b1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customers')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "unique_customers_customer_id", "resource_type": "test", "package_name": "secret", "path": "unique_customers_customer_id.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.secret.unique_customers_customer_id.c5af1ff4b1", "fqn": ["secret", "marts", "core", "unique_customers_customer_id"], "alias": "unique_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/marts/core/core.yml/unique_customers_customer_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1691482189.7513258, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.customers"]}, "compiled_path": "target/compiled/secret/models/marts/core/core.yml/unique_customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPMENT.dbt_pkearns.customers\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.customers", "attached_node": "model.secret.customers"}, "test.secret.not_null_customers_customer_id.5c9bf9911d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customers')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "not_null_customers_customer_id", "resource_type": "test", "package_name": "secret", "path": "not_null_customers_customer_id.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.secret.not_null_customers_customer_id.5c9bf9911d", "fqn": ["secret", "marts", "core", "not_null_customers_customer_id"], "alias": "not_null_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/marts/core/core.yml/not_null_customers_customer_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1691482189.7552638, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.customers"]}, "compiled_path": "target/compiled/secret/models/marts/core/core.yml/not_null_customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom DEVELOPMENT.dbt_pkearns.customers\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.customers", "attached_node": "model.secret.customers"}, "test.secret.dbt_utils_unique_combination_of_columns_customers_customer_id__first_name__last_name__first_order_date__most_recent_order_date__number_of_orders__lifetime_value.63d701a4e3": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["customer_id", "first_name", "last_name", "first_order_date", "most_recent_order_date", "number_of_orders", "lifetime_value"], "model": "{{ get_where_subquery(ref('customers')) }}"}, "namespace": "dbt_utils"}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_customers_customer_id__first_name__last_name__first_order_date__most_recent_order_date__number_of_orders__lifetime_value", "resource_type": "test", "package_name": "secret", "path": "dbt_utils_unique_combination_o_71a1fd62c7d2883ce32dbda9aaaf9f28.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.secret.dbt_utils_unique_combination_of_columns_customers_customer_id__first_name__last_name__first_order_date__most_recent_order_date__number_of_orders__lifetime_value.63d701a4e3", "fqn": ["secret", "marts", "core", "dbt_utils_unique_combination_of_columns_customers_customer_id__first_name__last_name__first_order_date__most_recent_order_date__number_of_orders__lifetime_value"], "alias": "dbt_utils_unique_combination_o_71a1fd62c7d2883ce32dbda9aaaf9f28", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_71a1fd62c7d2883ce32dbda9aaaf9f28", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/marts/core/core.yml/dbt_utils_unique_combination_o_71a1fd62c7d2883ce32dbda9aaaf9f28.sql", "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_71a1fd62c7d2883ce32dbda9aaaf9f28"}, "created_at": 1691482189.7593522, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_71a1fd62c7d2883ce32dbda9aaaf9f28\") }}", "language": "sql", "refs": [{"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.customers"]}, "compiled_path": "target/compiled/secret/models/marts/core/core.yml/dbt_utils_unique_combination_o_71a1fd62c7d2883ce32dbda9aaaf9f28.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, first_name, last_name, first_order_date, most_recent_order_date, number_of_orders, lifetime_value\n    from DEVELOPMENT.dbt_pkearns.customers\n    group by customer_id, first_name, last_name, first_order_date, most_recent_order_date, number_of_orders, lifetime_value\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.customers", "attached_node": "model.secret.customers"}, "test.secret.unique_orders_order_id.fed79b3a6e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "unique_orders_order_id", "resource_type": "test", "package_name": "secret", "path": "unique_orders_order_id.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.secret.unique_orders_order_id.fed79b3a6e", "fqn": ["secret", "marts", "core", "unique_orders_order_id"], "alias": "unique_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/marts/core/core.yml/unique_orders_order_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1691482189.7756, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.orders"]}, "compiled_path": "target/compiled/secret/models/marts/core/core.yml/unique_orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPMENT.dbt_pkearns.orders\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "order_id", "file_key_name": "models.orders", "attached_node": "model.secret.orders"}, "test.secret.not_null_orders_order_id.cf6c17daed": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "not_null_orders_order_id", "resource_type": "test", "package_name": "secret", "path": "not_null_orders_order_id.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.secret.not_null_orders_order_id.cf6c17daed", "fqn": ["secret", "marts", "core", "not_null_orders_order_id"], "alias": "not_null_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/marts/core/core.yml/not_null_orders_order_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1691482189.779442, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.orders"]}, "compiled_path": "target/compiled/secret/models/marts/core/core.yml/not_null_orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom DEVELOPMENT.dbt_pkearns.orders\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "order_id", "file_key_name": "models.orders", "attached_node": "model.secret.orders"}, "test.secret.dbt_utils_expression_is_true_orders_amount_0.23e56bc9d2": {"test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "amount >= 0", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": "dbt_utils"}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "dbt_utils_expression_is_true_orders_amount_0", "resource_type": "test", "package_name": "secret", "path": "dbt_utils_expression_is_true_orders_amount_0.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.secret.dbt_utils_expression_is_true_orders_amount_0.23e56bc9d2", "fqn": ["secret", "marts", "core", "dbt_utils_expression_is_true_orders_amount_0"], "alias": "dbt_utils_expression_is_true_orders_amount_0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/marts/core/core.yml/dbt_utils_expression_is_true_orders_amount_0.sql", "deferred": false, "unrendered_config": {}, "created_at": 1691482189.7832623, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.secret.orders"]}, "compiled_path": "target/compiled/secret/models/marts/core/core.yml/dbt_utils_expression_is_true_orders_amount_0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom DEVELOPMENT.dbt_pkearns.orders\n\nwhere not(amount >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.orders", "attached_node": "model.secret.orders"}, "test.secret.source_not_null_jaffle_shop_customers_id.50aa22178f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('jaffle_shop', 'customers')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "source_not_null_jaffle_shop_customers_id", "resource_type": "test", "package_name": "secret", "path": "source_not_null_jaffle_shop_customers_id.sql", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "unique_id": "test.secret.source_not_null_jaffle_shop_customers_id.50aa22178f", "fqn": ["secret", "staging", "jaffle_shop", "source_not_null_jaffle_shop_customers_id"], "alias": "source_not_null_jaffle_shop_customers_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_not_null_jaffle_shop_customers_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1691482190.0991511, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["jaffle_shop", "customers"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["source.secret.jaffle_shop.customers"]}, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_not_null_jaffle_shop_customers_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom raw.jaffle_shop.customers\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.jaffle_shop", "attached_node": null}, "test.secret.source_unique_jaffle_shop_customers_id.2777a7933e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('jaffle_shop', 'customers')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "source_unique_jaffle_shop_customers_id", "resource_type": "test", "package_name": "secret", "path": "source_unique_jaffle_shop_customers_id.sql", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "unique_id": "test.secret.source_unique_jaffle_shop_customers_id.2777a7933e", "fqn": ["secret", "staging", "jaffle_shop", "source_unique_jaffle_shop_customers_id"], "alias": "source_unique_jaffle_shop_customers_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_unique_jaffle_shop_customers_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1691482190.103376, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["jaffle_shop", "customers"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["source.secret.jaffle_shop.customers"]}, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_unique_jaffle_shop_customers_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom raw.jaffle_shop.customers\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.jaffle_shop", "attached_node": null}, "test.secret.source_not_null_jaffle_shop_customers_2_id.5acaf12d10": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('jaffle_shop', 'customers_2')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "source_not_null_jaffle_shop_customers_2_id", "resource_type": "test", "package_name": "secret", "path": "source_not_null_jaffle_shop_customers_2_id.sql", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "unique_id": "test.secret.source_not_null_jaffle_shop_customers_2_id.5acaf12d10", "fqn": ["secret", "staging", "jaffle_shop", "source_not_null_jaffle_shop_customers_2_id"], "alias": "source_not_null_jaffle_shop_customers_2_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1691482190.1081057, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["jaffle_shop", "customers_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.secret.jaffle_shop.customers_2"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.jaffle_shop", "attached_node": null}, "test.secret.source_unique_jaffle_shop_customers_2_id.4e2a28ae57": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('jaffle_shop', 'customers_2')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "source_unique_jaffle_shop_customers_2_id", "resource_type": "test", "package_name": "secret", "path": "source_unique_jaffle_shop_customers_2_id.sql", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "unique_id": "test.secret.source_unique_jaffle_shop_customers_2_id.4e2a28ae57", "fqn": ["secret", "staging", "jaffle_shop", "source_unique_jaffle_shop_customers_2_id"], "alias": "source_unique_jaffle_shop_customers_2_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1691482190.1121616, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["jaffle_shop", "customers_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.secret.jaffle_shop.customers_2"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.jaffle_shop", "attached_node": null}, "test.secret.source_unique_jaffle_shop_orders_id.8a425b2fba": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('jaffle_shop', 'orders')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "source_unique_jaffle_shop_orders_id", "resource_type": "test", "package_name": "secret", "path": "source_unique_jaffle_shop_orders_id.sql", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "unique_id": "test.secret.source_unique_jaffle_shop_orders_id.8a425b2fba", "fqn": ["secret", "staging", "jaffle_shop", "source_unique_jaffle_shop_orders_id"], "alias": "source_unique_jaffle_shop_orders_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_unique_jaffle_shop_orders_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1691482190.1162875, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["jaffle_shop", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["source.secret.jaffle_shop.orders"]}, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_unique_jaffle_shop_orders_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom raw.jaffle_shop.orders\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.jaffle_shop", "attached_node": null}, "test.secret.source_not_null_jaffle_shop_orders_id.f924998b13": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('jaffle_shop', 'orders')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "source_not_null_jaffle_shop_orders_id", "resource_type": "test", "package_name": "secret", "path": "source_not_null_jaffle_shop_orders_id.sql", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "unique_id": "test.secret.source_not_null_jaffle_shop_orders_id.f924998b13", "fqn": ["secret", "staging", "jaffle_shop", "source_not_null_jaffle_shop_orders_id"], "alias": "source_not_null_jaffle_shop_orders_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_not_null_jaffle_shop_orders_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1691482190.120116, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["jaffle_shop", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["source.secret.jaffle_shop.orders"]}, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_not_null_jaffle_shop_orders_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom raw.jaffle_shop.orders\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.jaffle_shop", "attached_node": null}, "test.secret.source_accepted_values_jaffle_shop_orders_status__placed__shipped__completed__return_pending__returned.67e1753cce": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ get_where_subquery(source('jaffle_shop', 'orders')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "source_accepted_values_jaffle_shop_orders_status__placed__shipped__completed__return_pending__returned", "resource_type": "test", "package_name": "secret", "path": "source_accepted_values_jaffle__1cebfa84ea3e5f498396b6dee5cf6984.sql", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "unique_id": "test.secret.source_accepted_values_jaffle_shop_orders_status__placed__shipped__completed__return_pending__returned.67e1753cce", "fqn": ["secret", "staging", "jaffle_shop", "source_accepted_values_jaffle_shop_orders_status__placed__shipped__completed__return_pending__returned"], "alias": "source_accepted_values_jaffle__1cebfa84ea3e5f498396b6dee5cf6984", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_jaffle__1cebfa84ea3e5f498396b6dee5cf6984", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_accepted_values_jaffle__1cebfa84ea3e5f498396b6dee5cf6984.sql", "deferred": false, "unrendered_config": {"alias": "source_accepted_values_jaffle__1cebfa84ea3e5f498396b6dee5cf6984"}, "created_at": 1691482190.1239574, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_jaffle__1cebfa84ea3e5f498396b6dee5cf6984\") }}", "language": "sql", "refs": [], "sources": [["jaffle_shop", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["source.secret.jaffle_shop.orders"]}, "compiled_path": "target/compiled/secret/models/staging/jaffle_shop/src_jaffle_shop.yml/source_accepted_values_jaffle__1cebfa84ea3e5f498396b6dee5cf6984.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from raw.jaffle_shop.orders\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "status", "file_key_name": "sources.jaffle_shop", "attached_node": null}, "test.secret.source_not_null_stripe_payment_id.f33f317f6c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('stripe', 'payment')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "source_not_null_stripe_payment_id", "resource_type": "test", "package_name": "secret", "path": "source_not_null_stripe_payment_id.sql", "original_file_path": "models/staging/stripe/src_stripe.yml", "unique_id": "test.secret.source_not_null_stripe_payment_id.f33f317f6c", "fqn": ["secret", "staging", "stripe", "source_not_null_stripe_payment_id"], "alias": "source_not_null_stripe_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/staging/stripe/src_stripe.yml/source_not_null_stripe_payment_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1691482190.1339753, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["stripe", "payment"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["source.secret.stripe.payment"]}, "compiled_path": "target/compiled/secret/models/staging/stripe/src_stripe.yml/source_not_null_stripe_payment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom raw.stripe.payment\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.stripe", "attached_node": null}, "test.secret.source_unique_stripe_payment_id.3b7989ce64": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('stripe', 'payment')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "source_unique_stripe_payment_id", "resource_type": "test", "package_name": "secret", "path": "source_unique_stripe_payment_id.sql", "original_file_path": "models/staging/stripe/src_stripe.yml", "unique_id": "test.secret.source_unique_stripe_payment_id.3b7989ce64", "fqn": ["secret", "staging", "stripe", "source_unique_stripe_payment_id"], "alias": "source_unique_stripe_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/staging/stripe/src_stripe.yml/source_unique_stripe_payment_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1691482190.1378007, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["stripe", "payment"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["source.secret.stripe.payment"]}, "compiled_path": "target/compiled/secret/models/staging/stripe/src_stripe.yml/source_unique_stripe_payment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom raw.stripe.payment\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.stripe", "attached_node": null}, "test.secret.source_accepted_values_stripe_payment_paymentmethod__credit_card__bank_transfer__gift_card__coupon.f91677821a": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["credit_card", "bank_transfer", "gift_card", "coupon"], "column_name": "paymentmethod", "model": "{{ get_where_subquery(source('stripe', 'payment')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "source_accepted_values_stripe_payment_paymentmethod__credit_card__bank_transfer__gift_card__coupon", "resource_type": "test", "package_name": "secret", "path": "source_accepted_values_stripe__9e89253b125bfb08b95319d66e5edadc.sql", "original_file_path": "models/staging/stripe/src_stripe.yml", "unique_id": "test.secret.source_accepted_values_stripe_payment_paymentmethod__credit_card__bank_transfer__gift_card__coupon.f91677821a", "fqn": ["secret", "staging", "stripe", "source_accepted_values_stripe_payment_paymentmethod__credit_card__bank_transfer__gift_card__coupon"], "alias": "source_accepted_values_stripe__9e89253b125bfb08b95319d66e5edadc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_stripe__9e89253b125bfb08b95319d66e5edadc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/staging/stripe/src_stripe.yml/source_accepted_values_stripe__9e89253b125bfb08b95319d66e5edadc.sql", "deferred": false, "unrendered_config": {"alias": "source_accepted_values_stripe__9e89253b125bfb08b95319d66e5edadc"}, "created_at": 1691482190.1417031, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_stripe__9e89253b125bfb08b95319d66e5edadc\") }}", "language": "sql", "refs": [], "sources": [["stripe", "payment"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["source.secret.stripe.payment"]}, "compiled_path": "target/compiled/secret/models/staging/stripe/src_stripe.yml/source_accepted_values_stripe__9e89253b125bfb08b95319d66e5edadc.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        paymentmethod as value_field,\n        count(*) as n_records\n\n    from raw.stripe.payment\n    group by paymentmethod\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'credit_card','bank_transfer','gift_card','coupon'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "paymentmethod", "file_key_name": "sources.stripe", "attached_node": null}, "test.secret.source_accepted_values_stripe_payment_status__success__fail.911ca0ff27": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["success", "fail"], "column_name": "status", "model": "{{ get_where_subquery(source('stripe', 'payment')) }}"}, "namespace": null}, "database": "DEVELOPMENT", "schema": "dbt_pkearns__dbt_test__audit", "name": "source_accepted_values_stripe_payment_status__success__fail", "resource_type": "test", "package_name": "secret", "path": "source_accepted_values_stripe_payment_status__success__fail.sql", "original_file_path": "models/staging/stripe/src_stripe.yml", "unique_id": "test.secret.source_accepted_values_stripe_payment_status__success__fail.911ca0ff27", "fqn": ["secret", "staging", "stripe", "source_accepted_values_stripe_payment_status__success__fail"], "alias": "source_accepted_values_stripe_payment_status__success__fail", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/secret/models/staging/stripe/src_stripe.yml/source_accepted_values_stripe_payment_status__success__fail.sql", "deferred": false, "unrendered_config": {}, "created_at": 1691482190.151562, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["stripe", "payment"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.secret.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["source.secret.stripe.payment"]}, "compiled_path": "target/compiled/secret/models/staging/stripe/src_stripe.yml/source_accepted_values_stripe_payment_status__success__fail.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from raw.stripe.payment\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'success','fail'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "status", "file_key_name": "sources.stripe", "attached_node": null}}, "sources": {"source.secret.jaffle_shop.customers": {"database": "raw", "schema": "jaffle_shop", "name": "customers", "resource_type": "source", "package_name": "secret", "path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "unique_id": "source.secret.jaffle_shop.customers", "fqn": ["secret", "staging", "jaffle_shop", "jaffle_shop", "customers"], "source_name": "jaffle_shop", "source_description": "A replica of the postgres database", "loader": "", "identifier": "customers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.jaffle_shop.customers", "created_at": 1691482190.1065996}, "source.secret.jaffle_shop.customers_2": {"database": "raw", "schema": "jaffle_shop", "name": "customers_2", "resource_type": "source", "package_name": "secret", "path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "unique_id": "source.secret.jaffle_shop.customers_2", "fqn": ["secret", "staging", "jaffle_shop", "jaffle_shop", "customers_2"], "source_name": "jaffle_shop", "source_description": "A replica of the postgres database", "loader": "", "identifier": "customers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.jaffle_shop.customers", "created_at": 1691482190.1148028}, "source.secret.jaffle_shop.orders": {"database": "raw", "schema": "jaffle_shop", "name": "orders", "resource_type": "source", "package_name": "secret", "path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "unique_id": "source.secret.jaffle_shop.orders", "fqn": ["secret", "staging", "jaffle_shop", "jaffle_shop", "orders"], "source_name": "jaffle_shop", "source_description": "A replica of the postgres database", "loader": "", "identifier": "orders", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_etl_loaded_at", "freshness": {"warn_after": {"count": 300, "period": "day"}, "error_after": {"count": 500, "period": "day"}, "filter": null}, "external": null, "description": "One record per order", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "One of the following values:\n\n| status         | definition                                                 |\n|----------------|------------------------------------------------------------|\n| placed         | Order placed but not yet shipped                           |\n| shipped        | Order has been shipped but hasn't yet been delivered       |\n| completed      | Order has been received by customers                       |\n| return_pending | Customer has indicated they would like to return this item |\n| returned       | Item has been returned                                     |", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.jaffle_shop.orders", "created_at": 1691482190.1325107}, "source.secret.stripe.payment": {"database": "raw", "schema": "stripe", "name": "payment", "resource_type": "source", "package_name": "secret", "path": "models/staging/stripe/src_stripe.yml", "original_file_path": "models/staging/stripe/src_stripe.yml", "unique_id": "source.secret.stripe.payment", "fqn": ["secret", "staging", "stripe", "stripe", "payment"], "source_name": "stripe", "source_description": "Incoming stripe payment data.", "loader": "", "identifier": "payment", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paymentmethod": {"name": "paymentmethod", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.payment", "created_at": 1691482190.1581252}, "source.secret.snowflake_meta.query_history": {"database": "snowflake", "schema": "account_usage", "name": "query_history", "resource_type": "source", "package_name": "secret", "path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "original_file_path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "unique_id": "source.secret.snowflake_meta.query_history", "fqn": ["secret", "snowflake_meta", "staging", "snowflake_meta", "query_history"], "source_name": "snowflake_meta", "source_description": "", "loader": "snowflake", "identifier": "query_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["snowflake_meta"], "config": {"enabled": true, "tags": ["snowflake_meta"]}, "patch_path": null, "unrendered_config": {"tags": ["snowflake_meta"]}, "relation_name": "snowflake.account_usage.query_history", "created_at": 1691482190.158426}, "source.secret.snowflake_meta.warehouse_load_history": {"database": "snowflake", "schema": "account_usage", "name": "warehouse_load_history", "resource_type": "source", "package_name": "secret", "path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "original_file_path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "unique_id": "source.secret.snowflake_meta.warehouse_load_history", "fqn": ["secret", "snowflake_meta", "staging", "snowflake_meta", "warehouse_load_history"], "source_name": "snowflake_meta", "source_description": "", "loader": "snowflake", "identifier": "warehouse_load_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["snowflake_meta"], "config": {"enabled": true, "tags": ["snowflake_meta"]}, "patch_path": null, "unrendered_config": {"tags": ["snowflake_meta"]}, "relation_name": "snowflake.account_usage.warehouse_load_history", "created_at": 1691482190.1586852}, "source.secret.snowflake_meta.warehouse_metering_history": {"database": "snowflake", "schema": "account_usage", "name": "warehouse_metering_history", "resource_type": "source", "package_name": "secret", "path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "original_file_path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "unique_id": "source.secret.snowflake_meta.warehouse_metering_history", "fqn": ["secret", "snowflake_meta", "staging", "snowflake_meta", "warehouse_metering_history"], "source_name": "snowflake_meta", "source_description": "", "loader": "snowflake", "identifier": "warehouse_metering_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["snowflake_meta"], "config": {"enabled": true, "tags": ["snowflake_meta"]}, "patch_path": null, "unrendered_config": {"tags": ["snowflake_meta"]}, "relation_name": "snowflake.account_usage.warehouse_metering_history", "created_at": 1691482190.1589398}, "source.secret.snowflake_meta.metering_history": {"database": "snowflake", "schema": "account_usage", "name": "metering_history", "resource_type": "source", "package_name": "secret", "path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "original_file_path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "unique_id": "source.secret.snowflake_meta.metering_history", "fqn": ["secret", "snowflake_meta", "staging", "snowflake_meta", "metering_history"], "source_name": "snowflake_meta", "source_description": "", "loader": "snowflake", "identifier": "metering_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["snowflake_meta"], "config": {"enabled": true, "tags": ["snowflake_meta"]}, "patch_path": null, "unrendered_config": {"tags": ["snowflake_meta"]}, "relation_name": "snowflake.account_usage.metering_history", "created_at": 1691482190.159225}, "source.secret.snowflake_meta.users": {"database": "snowflake", "schema": "account_usage", "name": "users", "resource_type": "source", "package_name": "secret", "path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "original_file_path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "unique_id": "source.secret.snowflake_meta.users", "fqn": ["secret", "snowflake_meta", "staging", "snowflake_meta", "users"], "source_name": "snowflake_meta", "source_description": "", "loader": "snowflake", "identifier": "users", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["snowflake_meta"], "config": {"enabled": true, "tags": ["snowflake_meta"]}, "patch_path": null, "unrendered_config": {"tags": ["snowflake_meta"]}, "relation_name": "snowflake.account_usage.users", "created_at": 1691482190.15955}, "source.secret.snowflake_meta_qa.query_history": {"database": "snowflake", "schema": "account_usage", "name": "query_history", "resource_type": "source", "package_name": "secret", "path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "original_file_path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "unique_id": "source.secret.snowflake_meta_qa.query_history", "fqn": ["secret", "snowflake_meta", "staging", "snowflake_meta_qa", "query_history"], "source_name": "snowflake_meta_qa", "source_description": "", "loader": "snowflake", "identifier": "query_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["qa", "snowflake_meta"], "config": {"enabled": true, "tags": ["snowflake_meta"]}, "patch_path": null, "unrendered_config": {"tags": ["snowflake_meta"]}, "relation_name": "snowflake.account_usage.query_history", "created_at": 1691482190.1598692}, "source.secret.snowflake_meta_dev.query_history": {"database": "snowflake", "schema": "account_usage", "name": "query_history", "resource_type": "source", "package_name": "secret", "path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "original_file_path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "unique_id": "source.secret.snowflake_meta_dev.query_history", "fqn": ["secret", "snowflake_meta", "staging", "snowflake_meta_dev", "query_history"], "source_name": "snowflake_meta_dev", "source_description": "", "loader": "snowflake", "identifier": "query_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["dev", "snowflake_meta"], "config": {"enabled": true, "tags": ["snowflake_meta"]}, "patch_path": null, "unrendered_config": {"tags": ["snowflake_meta"]}, "relation_name": "snowflake.account_usage.query_history", "created_at": 1691482190.1601596}, "source.secret.snowflake_meta_dynamic.query_history": {"database": "snowflake", "schema": "account_usage", "name": "query_history", "resource_type": "source", "package_name": "secret", "path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "original_file_path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "unique_id": "source.secret.snowflake_meta_dynamic.query_history", "fqn": ["secret", "snowflake_meta", "staging", "snowflake_meta_dynamic", "query_history"], "source_name": "snowflake_meta_dynamic", "source_description": "", "loader": "snowflake", "identifier": "query_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["dynamic", "snowflake_meta"], "config": {"enabled": true, "tags": ["snowflake_meta"]}, "patch_path": null, "unrendered_config": {"tags": ["snowflake_meta"]}, "relation_name": "snowflake.account_usage.query_history", "created_at": 1691482190.1604185}, "source.secret.snowflake_meta_global_variable.query_history": {"database": "snowflake", "schema": "account_usage", "name": "query_history", "resource_type": "source", "package_name": "secret", "path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "original_file_path": "models/snowflake_meta/staging/snowflake_meta_src.yml", "unique_id": "source.secret.snowflake_meta_global_variable.query_history", "fqn": ["secret", "snowflake_meta", "staging", "snowflake_meta_global_variable", "query_history"], "source_name": "snowflake_meta_global_variable", "source_description": "", "loader": "snowflake", "identifier": "query_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["snowflake_meta"], "config": {"enabled": true, "tags": ["snowflake_meta"]}, "patch_path": null, "unrendered_config": {"tags": ["snowflake_meta"]}, "relation_name": "snowflake.account_usage.query_history", "created_at": 1691482190.160671}}, "macros": {"macro.secret.parent_macro": {"name": "parent_macro", "resource_type": "macro", "package_name": "secret", "path": "macros/nested_macros.sql", "original_file_path": "macros/nested_macros.sql", "unique_id": "macro.secret.parent_macro", "macro_sql": "{% macro parent_macro() %}\n  {{ child_macro() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.secret.child_macro"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8140044, "supported_languages": null}, "macro.secret.child_macro": {"name": "child_macro", "resource_type": "macro", "package_name": "secret", "path": "macros/nested_macros.sql", "original_file_path": "macros/nested_macros.sql", "unique_id": "macro.secret.child_macro", "macro_sql": "{% macro child_macro(should_fail=true) %}\n    {% if should_fail == true %}\n        {{ exceptions.raise_compiler_error(\"Error! Beep beep boop!\") }}\n    {% else %}\n        select 'test' as some_column\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8146777, "supported_languages": null}, "macro.secret.store_test_results": {"name": "store_test_results", "resource_type": "macro", "package_name": "secret", "path": "macros/store_test_results.sql", "original_file_path": "macros/store_test_results.sql", "unique_id": "macro.secret.store_test_results", "macro_sql": "{% macro store_test_results(results) %}\n  {%- set test_results = [] -%}\n\n  {%- for result in results if result.node.resource_type == 'test' -%}\n    {%- set test_results = test_results.append(result) -%}\n  {%- endfor -%}\n\n  {% if test_results|length == 0 -%}\n    {{ log(\"store_test_results found no test results to process.\") if execute }}\n    {{ return('') }}\n  {% endif -%}\n\n  {%- set central_tbl -%} {{ target.schema }}.test_results_central {%- endset -%}\n  {%- set history_tbl -%} {{ target.schema }}.test_results_history {%- endset -%}\n  \n  {{ log(\"Centralizing \" ~ test_results|length ~ \" test results in \" + central_tbl, info = true) if execute }}\n\n  create or replace table {{ central_tbl }} as (\n    \n    \n  {%- for result in test_results %}\n\n    {%- set test_name = '' -%}\n    {%- set test_type = '' -%}\n    {%- set column_name = '' -%}\n\n    {%- if result.node.test_metadata is defined -%}\n      {%- set test_name = result.node.test_metadata.name -%}\n      {%- set test_type = 'generic' -%}\n      \n      {%- if test_name == 'relationships' -%}\n        {%- set column_name = result.node.test_metadata.kwargs.field ~ ',' ~ result.node.test_metadata.kwargs.column_name -%}\n      {%- else -%}\n        {%- set column_name = result.node.test_metadata.kwargs.column_name -%}\n      {%- endif -%}\n    {%- elif result.node.name is defined -%}\n      {%- set test_name = result.node.name -%}\n      {%- set test_type = 'singular' -%}\n    {%- endif %}\n    \n    select\n      '{{ test_name }}'::text as test_name,\n      '{{ result.node.config.severity }}'::text as test_severity_config,\n      '{{ result.status }}'::text as test_result,\n      '{{ process_refs(result.node.refs) }}'::text as model_refs,\n      '{{ process_refs(result.node.sources, is_src=true) }}'::text as source_refs,\n      '{{ column_name|escape }}'::text as column_names,\n      '{{ result.node.name }}'::text as test_name_long,\n      '{{ test_type }}'::text as test_type,\n      '{{ result.execution_time }}'::text as execution_time_seconds,\n      '{{ result.node.original_file_path }}'::text as file_test_defined,\n      '{{ var(\"pipeline_name\", \"variable_not_set\") }}'::text as pipeline_name,\n      '{{ var(\"pipeline_type\", \"variable_not_set\") }}'::text as pipeline_type,\n      '{{ target.name }}'::text as dbt_cloud_target_name,\n      '{{ env_var(\"DBT_CLOUD_PROJECT_ID\", \"manual\") }}'::text as _audit_project_id,\n      '{{ env_var(\"DBT_CLOUD_JOB_ID\", \"manual\") }}'::text as _audit_job_id,\n      '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}'::text as _audit_run_id,\n      '{{ env_var(\"DBT_CLOUD_URL\", \"https://cloud.getdbt.com/#/accounts/account_id/projects/\") }}'||_audit_project_id||'/runs/'||_audit_run_id::text as _audit_run_url,\n      current_timestamp as _timestamp\n    {{ \"union all\" if not loop.last }}\n  \n  {%- endfor %}\n  \n  );\n\n  {% if target.name != 'default' %}\n    {{ log(\"Centralizing \" ~ test_results|length ~ \" test results in \" + history_tbl, info = true) if execute }}\n      create table if not exists {{ history_tbl }} as (\n        select \n          {{ dbt_utils.surrogate_key([\"test_name\", \"test_result\", \"_timestamp\"]) }} as sk_id, \n          * \n        from {{ central_tbl }}\n        where false\n      );\n\n    insert into {{ history_tbl }} \n      select \n       {{ dbt_utils.surrogate_key([\"test_name\", \"test_result\", \"_timestamp\"]) }} as sk_id, \n       * \n      from {{ central_tbl }}\n    ;\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.secret.process_refs", "macro.dbt_utils.surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8301947, "supported_languages": null}, "macro.secret.process_refs": {"name": "process_refs", "resource_type": "macro", "package_name": "secret", "path": "macros/store_test_results.sql", "original_file_path": "macros/store_test_results.sql", "unique_id": "macro.secret.process_refs", "macro_sql": "{% macro process_refs( ref_list, is_src=false ) %}\n  {% set refs = [] %}\n\n  {% if ref_list is defined and ref_list|length > 0 %}\n      {% for ref in ref_list %}\n        {% if is_src %}\n          {{ refs.append(ref|join('.')) }}\n        {% else %}\n          {{ refs.append(ref[0]) }}\n        {% endif %} \n      {% endfor %}\n\n      {{ return(refs|join(',')) }}\n  {% else %}\n      {{ return('') }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.832019, "supported_languages": null}, "macro.secret.get_models": {"name": "get_models", "resource_type": "macro", "package_name": "secret", "path": "macros/get_models.sql", "original_file_path": "macros/get_models.sql", "unique_id": "macro.secret.get_models", "macro_sql": "{% macro get_models(directory=None, prefix=None) %}\n    {% set model_names=[] %}\n    {% set models = graph.nodes.values() | selectattr('resource_type', \"equalto\", 'model') %}\n    {% if directory and prefix %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory and model.name.startswith(prefix) %}\n                {% do model_names.append(model.name) %}\n            {% endif %} \n        {% endfor %}\n    {% elif directory %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory %}\n                {% do model_names.append(model.name) %}\n            {% endif %}\n        {% endfor %}\n    {% elif prefix %}\n        {% for model in models if model.name.startswith(prefix) %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% else %}\n        {% for model in models %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% endif %}\n    {{ return(model_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8370652, "supported_languages": null}, "macro.secret.run_query_verbose": {"name": "run_query_verbose", "resource_type": "macro", "package_name": "secret", "path": "macros/run_query_log.sql", "original_file_path": "macros/run_query_log.sql", "unique_id": "macro.secret.run_query_verbose", "macro_sql": "{% macro run_query_verbose(sql) %}\n    {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n        {{ sql }}\n    {% endcall %}\n\n{% if execute %}\n    {% set results = load_result(\"run_query_statement\").table %}\n    {% do log('DEBUG===============START=================DEBUG', info=True) %}\n    {% do log('DEBUG===============RUN_QUERY(SQL): ' ~ sql, info=True) %}\n\n    {% set ns = namespace(column_chars=0, row_chars=0, total_chars=0) -%}\n    {% for column in results.column_names -%}\n    {%- set ns.column_chars = ns.column_chars + (column | length) -%}\n    {% endfor %}\n    {% do log('columns = ' ~ results.columns | length, info=True) %}\n    {% do log('column_chars = ' ~ ns.column_chars, info=True) %}\n\n    {% for item in range(results.columns | length) -%}\n        {% for word in results.columns[item].values() | list -%}\n                {%- set ns.row_chars = ns.row_chars + (word | string | length) -%}\n        {% endfor -%}\n    {% endfor %}\n    {% do log('rows = ' ~ results.rows | length, info=True) %}\n    {% do log('row_chars = ' ~ ns.row_chars, info=True) %}\n    {% do log('total_chars = ' ~ (ns.column_chars + ns.row_chars), info=True) %}\n\n    {% do log('DEBUG===============END=================DEBUG', info=True) %}\n{% endif %}\n    {% do return(results) %}\n  \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8424032, "supported_languages": null}, "macro.secret.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "secret", "path": "macros/set_query_tag.sql", "original_file_path": "macros/set_query_tag.sql", "unique_id": "macro.secret.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n\n{% set original_query_tag = get_current_query_tag() %}\n{% set new_query_tag = config.get('query_tag') %}\n\n  {% if new_query_tag %}\n    {# If they set a query tag in yml or config block #}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  \n  {% else %}\n    {# else add this meta information by default #}\n    {% set new_query_tag = '{{ \"query_tag_type\" : \"DBT_MODEL\", \"database\" : \"{}\", \"model_name\" : \"{}\", \"package\" : \"{}\", \"schema\" : \"{}\" , \"target\" : \"{}\",\"role\" : \"{}\",\"dbt_inovacation_id\" : \"{}\",\"run_started_at\" : \"{}\"}}'.format(\n        model.database,\n        model.name,\n        model.package_name,\n        model.schema,\n        target.name,\n        target.role,\n        invocation_id,\n        run_started_at.astimezone(modules.pytz.timezone(\"America/New_York\"))\n    ) %}\n\n    {{ log(\"Setting query_tag to \" + new_query_tag) }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8453863, "supported_languages": null}, "macro.secret.list_depends_on": {"name": "list_depends_on", "resource_type": "macro", "package_name": "secret", "path": "macros/node_metadata_depends_on.sql", "original_file_path": "macros/node_metadata_depends_on.sql", "unique_id": "macro.secret.list_depends_on", "macro_sql": "{% macro list_depends_on(graph=graph, this=this) %}\n    {% if execute %}\n        {%- if this.name == 'request' -%}\n            ['this does not work with Preview button']\n        {%- else -%}\n            {% for node in graph.nodes.values() -%}\n                {%- if node.name == this.name -%}\n                    {{ node.depends_on.nodes}}\n                {%- endif -%}\n            {%- endfor %}\n        {%- endif -%}\n    {%- else -%}\n        [that]\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8468947, "supported_languages": null}, "macro.secret.create_snapshot_manually": {"name": "create_snapshot_manually", "resource_type": "macro", "package_name": "secret", "path": "macros/create_snapshot_manually.sql", "original_file_path": "macros/create_snapshot_manually.sql", "unique_id": "macro.secret.create_snapshot_manually", "macro_sql": "{% macro create_snapshot_manually(relation_to_snapshot) %}\n\n    {% set snapshot_target = target.database ~ '.' ~ target.schema ~ '.' ~ relation_to_snapshot.split('.')[-1] ~ '__SNAPSHOT' %}\n\n    {% set create_snapshot_query %}\n        CREATE TABLE IF NOT EXISTS {{snapshot_target}} AS (\n            SELECT \n                *,\n                CURRENT_TIMESTAMP AS SNAPSHOTTED_AT_TIME\n            FROM {{relation_to_snapshot}}\n            LIMIT 0\n        )\n    {% endset %}\n\n\n    {% set insert_snapshot_query %}\n        INSERT INTO {{snapshot_target}} (\n            SELECT \n                *,\n                CURRENT_TIMESTAMP AS SNAPSHOTTED_AT_TIME\n            FROM {{relation_to_snapshot}}\n        )\n    {% endset %}\n\n    {% do log('Creating snapshot target table --> ' ~ snapshot_target, True) %}\n    {% do run_query(create_snapshot_query) %}\n\n    {% do log('Inserting full snapshot into target table from relation to snapshot --> ' ~ relation_to_snapshot, True) %}\n    {% do run_query(insert_snapshot_query) %}\n\n    {% do run_query('COMMIT') %}\n  \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "This macro manually creates a snapshot table if one does not exist and inserts a full table snapshot into the new snapshot table (whew!). This is a **bad idea**, but it's a good demo of how to use run-operations with macros.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "secret://macros/macros.yml", "arguments": [{"name": "relation_to_snapshot", "type": null, "description": "String containing the fully-qualified name of the view or table to snapshot. For example, `MY_DB.MY_SCHEMA.TABLE_TO_SNAPSHOT`."}], "created_at": 1691482189.601254, "supported_languages": null}, "macro.secret.standardize_timestamp": {"name": "standardize_timestamp", "resource_type": "macro", "package_name": "secret", "path": "macros/standardize_timestamp.sql", "original_file_path": "macros/standardize_timestamp.sql", "unique_id": "macro.secret.standardize_timestamp", "macro_sql": "{% macro standardize_timestamp(timestamp_column) %}\n  CONVERT_TIMEZONE('America/Chicago', {{ timestamp_column }})::TIMESTAMP_NTZ\n{% endmacro %}", "depends_on": {"macros": []}, "description": "This macro converts all timestamps into Snowflake `TIMESTAMP_NTZ` column types and converts them to `America/Chicago` time.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "secret://macros/macros.yml", "arguments": [], "created_at": 1691482189.6019158, "supported_languages": null}, "macro.secret.get_columns_from_models": {"name": "get_columns_from_models", "resource_type": "macro", "package_name": "secret", "path": "macros/get_columns_from_models.sql", "original_file_path": "macros/get_columns_from_models.sql", "unique_id": "macro.secret.get_columns_from_models", "macro_sql": "{% macro get_columns_from_models(model_names) %}\n{# Get Column Names #}\n{% set model_names=get_model_names() %}\nmodels:\n    {%- for model in model_names %}\n            {%- set relation=ref(model) %}\n            {%- set columns = adapter.get_columns_in_relation(relation) %}\n                {%- set column_names = [] %}\n                {%- for column in columns %}\n                    {%- do column_names.append(column.name) %}\n                {%- endfor %}\n  - name: {{ model }}\n    tests:\n      - dbt_expectations.expect_table_columns_to_match_ordered_list:\n          column_list: {{ column_names }}\n    {%- endfor %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.secret.get_model_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.851786, "supported_languages": null}, "macro.secret.get_model_names": {"name": "get_model_names", "resource_type": "macro", "package_name": "secret", "path": "macros/get_columns_from_models.sql", "original_file_path": "macros/get_columns_from_models.sql", "unique_id": "macro.secret.get_model_names", "macro_sql": "{% macro get_model_names() %}    \n\n{# Get model names #}\n\n{%- set model_list = [] %}\n  {%- for node in graph.nodes.values() if node.resource_type == \"model\" %}\n    {%- do model_list.append(node.name) %}\n  {%- endfor %}\n{% do return(model_list) %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8527274, "supported_languages": null}, "macro.secret.cents_to_dollars": {"name": "cents_to_dollars", "resource_type": "macro", "package_name": "secret", "path": "macros/cents_to_dollars.sql", "original_file_path": "macros/cents_to_dollars.sql", "unique_id": "macro.secret.cents_to_dollars", "macro_sql": "{%- macro cents_to_dollars(column_name, scale=2) -%}\n\n    ({{ column_name }} / 100)::numeric(16, {{ scale }})\n    \n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.853237, "supported_languages": null}, "macro.secret.get_dynamic_sql_value": {"name": "get_dynamic_sql_value", "resource_type": "macro", "package_name": "secret", "path": "macros/get_dynamic_sql_value.sql", "original_file_path": "macros/get_dynamic_sql_value.sql", "unique_id": "macro.secret.get_dynamic_sql_value", "macro_sql": "{% macro get_dynamic_sql_value() %}\n\n  {% set query = 'select 123' %}\n\n  {% if execute %}\n    {% set result = run_query(query).columns[0].values()[0] %}\n    {{ return(result) }}\n  {% else %}\n    {{ return('NULL')}}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8544621, "supported_languages": null}, "macro.secret.variable_update": {"name": "variable_update", "resource_type": "macro", "package_name": "secret", "path": "macros/variable_update.sql", "original_file_path": "macros/variable_update.sql", "unique_id": "macro.secret.variable_update", "macro_sql": "{% macro variable_update() %}\n    {% set disable_models=\"['some_macro_name']\" %}\n    {% do log(\"Updating disable_models: \" ~ disable_models, info=true) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8551342, "supported_languages": null}, "macro.secret.log_something": {"name": "log_something", "resource_type": "macro", "package_name": "secret", "path": "macros/log_something.sql", "original_file_path": "macros/log_something.sql", "unique_id": "macro.secret.log_something", "macro_sql": "{% macro log_something() %}\n    {% if model.resource_type != 'test' %}\n        --$-- This is not a test! --$--\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8556533, "supported_languages": null}, "macro.secret.dev_limit": {"name": "dev_limit", "resource_type": "macro", "package_name": "secret", "path": "macros/dev_limit.sql", "original_file_path": "macros/dev_limit.sql", "unique_id": "macro.secret.dev_limit", "macro_sql": "{% macro dev_limit(limit=1000) %}\n\n{#-\n    This macro is used to add a row limit in CI checks so that they run much faster\n    In Cloud we set the env_var DBT_ENVIRONMENT_NAME equal to 'prod' for all job runs and development, \n        except for the Slim CI job, which overrides it to 'ci'. which will trigger this `if` block\n    In code, we default the env_var to 'dev', (which does not trigger the `if` block), but will be useful\n        to avoid compilation errors when the environment variable is not available, for example, in CLI\n    We default limit the amount of rows returned to 1000, but you can override this with an argument\n\n    usage: \n        ```sql\n            select * from dim_orders\n            {{ dev_limit() }}\n        ```\n    usage:  \n        ```sql\n            select * from dim_orders\n            {{ dev_limit(99) }}\n        ```\n-#}\n\n  {% if env_var('DBT_ENVIRONMENT_NAME', 'dev') == 'ci' -%}\n\n    limit {{ limit }}\n  \n  {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8565083, "supported_languages": null}, "macro.secret.get_sources": {"name": "get_sources", "resource_type": "macro", "package_name": "secret", "path": "macros/onsemi/_get_sources.sql", "original_file_path": "macros/onsemi/_get_sources.sql", "unique_id": "macro.secret.get_sources", "macro_sql": "{% macro get_sources(database_name=target.database) %}\n\n  {#\n    Get all sources in your dbt project that are from `database_name`\n\n    Example input:\n    ---------------------------------------------------------------\n    {{ get_sources('raw') }}\n\n    Example output\n    ---------------------------------------------------------------\n    ['raw.jaffle_shop.customers', 'raw.jaffle_shop.orders', 'raw.stripe.payment']\n  #}\n  \n  {% set sources = [] -%}\n  {% if execute %}\n    {% for node in graph.sources.values() -%}\n      {%- if node.database == database_name -%}\n            {# \n          {%- do sources.append(node.relation_name) -%}\n            -- \"relation_name\":\"snowflake.account_usage.warehouse_load_history\",\n            -- \"database\":\"snowflake\",\n            -- \"schema\":\"account_usage\",\n            -- \"name\":\"warehouse_load_history\",\n            -- \"source_name\":\"snowflake_meta\",\n            #}\n          {%- do sources.append(node.schema ~ '.' ~ node.identifier) -%}\n      {%- endif -%}\n    {%- endfor %}\n  {% endif %}\n    {{ return(sources) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8581066, "supported_languages": null}, "macro.secret.edw_get_md5_column_list_new": {"name": "edw_get_md5_column_list_new", "resource_type": "macro", "package_name": "secret", "path": "macros/onsemi/edw_get_md5_column_list_new.sql", "original_file_path": "macros/onsemi/edw_get_md5_column_list_new.sql", "unique_id": "macro.secret.edw_get_md5_column_list_new", "macro_sql": "{% macro edw_get_md5_column_list_new(param_object_name,param_exclude_column=[]) -%}\n    {%- set column_list_quoted = edw_get_quoted_column_list_new(param_object_name,param_exclude_column) -%}\n    {%- set md5_list = [] -%}\n\n    {% for v_column_name  in column_list_quoted %}\n        {%- set v_col_name_add = \"'col\"+ loop.index|string+\"',\" -%}\n        {% do md5_list.append(v_col_name_add + v_column_name) %}\n    {% endfor %}\n\n        {%- set dest_cols_list = md5_list | join(', ') -%}\n        {%- set md5_column = 'md5(object_construct ('+dest_cols_list +')::string )' -%}\n\n    {{ return(md5_column) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.secret.edw_get_quoted_column_list_new"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8599665, "supported_languages": null}, "macro.secret.edw_get_column_list_new": {"name": "edw_get_column_list_new", "resource_type": "macro", "package_name": "secret", "path": "macros/onsemi/edw_get_column_list_new.sql", "original_file_path": "macros/onsemi/edw_get_column_list_new.sql", "unique_id": "macro.secret.edw_get_column_list_new", "macro_sql": "{%- macro edw_get_column_list_new(param_object_name,param_exclude_column=[]) -%}\n    {%- set column_list_quoted = edw_get_quoted_column_list_new(param_object_name,param_exclude_column) -%}\n    {%- set dest_cols_list = column_list_quoted | join(', ') -%}\n    {{ return(dest_cols_list) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.secret.edw_get_quoted_column_list_new"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8608766, "supported_languages": null}, "macro.secret.edw_get_quoted_column_list_new": {"name": "edw_get_quoted_column_list_new", "resource_type": "macro", "package_name": "secret", "path": "macros/onsemi/edw_get_quoted_column_list_new.sql", "original_file_path": "macros/onsemi/edw_get_quoted_column_list_new.sql", "unique_id": "macro.secret.edw_get_quoted_column_list_new", "macro_sql": "{%- macro edw_get_quoted_column_list_new(param_object_name,param_exclude_column=[]) -%}\n    \n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(param_object_name) -%}\n    {%- set param_exclude_column = param_exclude_column | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in param_exclude_column -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8628545, "supported_languages": null}, "macro.secret.check_against_information_schema": {"name": "check_against_information_schema", "resource_type": "macro", "package_name": "secret", "path": "macros/onsemi/check_against_information_schema.sql", "original_file_path": "macros/onsemi/check_against_information_schema.sql", "unique_id": "macro.secret.check_against_information_schema", "macro_sql": "{% macro check_against_information_schema(target_sources='raw', target_database='raw') %}\n    {% set sources=get_sources(target_sources) %}\n\n    {%- set information_schema_query %}\n        with\n        information_schema_relations as (\n            select\n                concat_ws('.', table_schema, table_name) as relation_name\n            from {{ target_database }}.information_schema.tables \n            {# -- where table_schema ilike '{{ target_schema }}%' #}\n        )\n\n        {# get count of sources in target database #}\n        select count(*) from information_schema_relations\n        where\n        relation_name in\n            (\n                {%- for source in sources -%}\n                    '{{ source.upper() }}'\n                    {%- if not loop.last -%},{% endif %}\n                {%- endfor -%}\n            )\n    {% endset %}\n\n    {%- set results = run_query(information_schema_query) %}\n\n    {% if execute %}\n        {% set information_schema_count = results.columns[0].values()[0] %}\n    {% else %}\n        {% set information_schema_count = [] %}\n    {% endif %}\n\n{# If the count of current sources matches count in target database, check passes #}\n    {% if sources|length == information_schema_count %}\n        {{ log(\"Test passed: Found \" ~ sources|length ~ \" sources from the `\" ~ target_sources ~ \"` database and \" ~ information_schema_count ~ \" matching sources in the `\" ~ target_database ~ \"` database\", info=True) }}\n\n    {% else %}\n{# If the count of sources does not match in both databases, check fails #}\n        {%- set find_missing_sources_query %}\n            with\n            information_schema_relations as (\n                select\n                    concat_ws('.', table_schema, table_name) as relation_name\n                from {{ target_database }}.information_schema.tables \n                {# -- where table_schema ilike '{{ target_schema }}%' #}\n            )\n            select relation_name from information_schema_relations\n            where\n            relation_name in\n                (\n                    {%- for source in sources -%}\n                        '{{ source.upper() }}'\n                        {%- if not loop.last -%},{% endif %}\n                    {%- endfor -%}\n                )\n        {% endset %}\n\n        {%- set results = run_query(find_missing_sources_query) %}\n\n        {% if execute %}\n            {% set found_sources = results.columns[0].values() %}\n\n        {# check if current sources are found within target sources, if not, list them #}\n        {% set missing_sources=[] %}\n        {%- for source in sources -%}\n            {% if source.upper() not in found_sources %}\n                {% do missing_sources.append(source) %}\n            {% endif %}\n        {%- endfor -%}\n\n        {{ log(\"Test FAILED: Missing sources in target environment: \" ~ missing_sources , info=True) }}\n        {{ missing_sources }}\n        \n        {{ exceptions.raise_compiler_error(\"Sources in `\" ~ target_sources ~ \"` database do not exist in the `\" ~ target_database ~ \"` database.\") if execute }}\n        {% else %}\n            {{ log(\"Test FAILED\", info=True) }}\n        {% endif %}\n\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.secret.get_sources", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8695188, "supported_languages": null}, "macro.secret.v_sql_update_macro": {"name": "v_sql_update_macro", "resource_type": "macro", "package_name": "secret", "path": "macros/onsemi/v_sql_update_macro.sql", "original_file_path": "macros/onsemi/v_sql_update_macro.sql", "unique_id": "macro.secret.v_sql_update_macro", "macro_sql": "{% macro v_sql_update_macro(var_value=4) %}\n    \n        update DEVELOPMENT.dbt_pkearns.seed__sample_data\n        set deleted={{ var_value }}\n        where id not in (\n            select id from {{ ref('seed__sample_data_status') }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8701627, "supported_languages": null}, "macro.secret.edw_get_quoted_column_list": {"name": "edw_get_quoted_column_list", "resource_type": "macro", "package_name": "secret", "path": "macros/onsemi/edw_get_quoted_column_list.sql", "original_file_path": "macros/onsemi/edw_get_quoted_column_list.sql", "unique_id": "macro.secret.edw_get_quoted_column_list", "macro_sql": "{% macro edw_get_quoted_column_list(param_object_name,param_exclude_column) -%}\n\n        {%- set column_list_quoted = [] -%}\n        {%- set table_desc =  get_columns_in_relation(param_object_name) -%}\n        \n        {% for column in table_desc %}\n                {{ column_list_quoted.append(column.name) }}\n        {% endfor %}\n\n        {% for col in param_exclude_column -%}\n                {%- if col in column_list_quoted -%}\n                        {{ column_list_quoted.remove(col) }}\n                {% endif %}\n        {% endfor %}\n\n    {{ return(column_list_quoted) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8719022, "supported_languages": null}, "macro.secret.one_time_load": {"name": "one_time_load", "resource_type": "macro", "package_name": "secret", "path": "macros/onsemi/one_time_load.sql", "original_file_path": "macros/onsemi/one_time_load.sql", "unique_id": "macro.secret.one_time_load", "macro_sql": "{% macro one_time_load(from) %}\n    \n    \n    {%- set union_relations = dbt_utils.union_relations(relations=[from,ref('seed__negative_key')]) -%}\n    {%- set star = dbt_utils.star(from) -%}    \n\n    -- one time load with an added -1 for product key\n    union_relations as ({{ union_relations }}),\n    one_time_load as (\n        select\n            -- using this to only select columns from the one_time_load_table, not the extras from other keys\n            {{ star }}\n        from union_relations\n    ),\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8730087, "supported_languages": null}, "macro.secret.edw_get_column_list": {"name": "edw_get_column_list", "resource_type": "macro", "package_name": "secret", "path": "macros/onsemi/edw_get_column_list.sql", "original_file_path": "macros/onsemi/edw_get_column_list.sql", "unique_id": "macro.secret.edw_get_column_list", "macro_sql": "{% macro edw_get_column_list(param_object_name,param_exclude_column) -%}\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n        {%- if param_object_name.name == 'request' -%}\n                {{ return([]) }}\n        {% else %}\n                {%- set column_list_quoted = [] -%}\n                {%- set table_desc =  get_columns_in_relation(param_object_name) -%}\n                \n                {% for column in table_desc %}\n                        {{ column_list_quoted.append(column.name) }}\n                {% endfor %}\n\n                {% for col in param_exclude_column -%}\n                        {%- if col in column_list_quoted -%}\n                                {{ column_list_quoted.remove(col) }}\n                        {% endif %}\n                {% endfor %}\n\n                {%- set dest_cols_list = column_list_quoted | join(', ') -%}\n\n        {{ return(dest_cols_list) }}\n        {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8760688, "supported_languages": null}, "macro.secret.edw_get_md5_column_list": {"name": "edw_get_md5_column_list", "resource_type": "macro", "package_name": "secret", "path": "macros/onsemi/edw_get_md5_column_list.sql", "original_file_path": "macros/onsemi/edw_get_md5_column_list.sql", "unique_id": "macro.secret.edw_get_md5_column_list", "macro_sql": "{% macro edw_get_md5_column_list(param_object_name,param_exclude_column) -%}\n        {%- set column_list_quoted = [] -%}\n        {%- set md5_list = [] -%}\n        {%- set table_desc =  get_columns_in_relation(param_object_name) -%}\n        \n        {% for column in table_desc %}\n                {{ column_list_quoted.append(column.name) }}\n        {% endfor %}\n\n        {% for col in param_exclude_column -%}\n                {%- if col in column_list_quoted -%}\n                        {{ column_list_quoted.remove(col) }}\n                {% endif %}\n        {% endfor %}\n\n        {% for v_column_name  in column_list_quoted %}\n            {%- set v_col_name_add = \"'col\"+ loop.index|string+\"',\" -%}\n            {{ md5_list.append(v_col_name_add + v_column_name) }}\n        {% endfor %}\n\n        {%- set dest_cols_list = md5_list | join(', ') -%}\n        {%- set md5_column = 'md5(object_construct ('+dest_cols_list +')::string ) as BIW_MD5_KEY' -%}\n    {{ return(md5_column) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.879145, "supported_languages": null}, "macro.secret.v_sql_get_batch": {"name": "v_sql_get_batch", "resource_type": "macro", "package_name": "secret", "path": "macros/onsemi/batch/v_sql_get_batch.sql", "original_file_path": "macros/onsemi/batch/v_sql_get_batch.sql", "unique_id": "macro.secret.v_sql_get_batch", "macro_sql": "{% macro v_sql_get_batch(v_dbt_job_name) -%}\n\n    {%- set query -%}\n        SELECT\n            NVL(MAX(BATCH_ID),-1001) as V_BIW_BATCH_ID\n        FROM\n            -- target db and schema to prevent pulling from prod if run in dev\n            {{ target.database }}.{{ target.schema }}.edw_process_batch_ctl as CTL\n            INNER JOIN\n            {{ target.database }}.{{ target.schema }}.edw_process_info as INFO\n            ON CTL.PROCESS_ID = INFO.PROCESS_ID     \n            AND INFO.PROCESS_NAME= '{{ v_dbt_job_name }}'\n            AND CTL.BATCH_STATUS='R' \n    {%- endset -%}\n\n    {# -- Prevent querying of db in parsing mode #}\n    {%- if execute -%}\n        {%- set results = run_query(query) -%}\n        {%- set output = results.columns[0].values()[0] -%}\n    {%- endif -%}\n\n    {{ output }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8808923, "supported_languages": null}, "macro.secret.v_sql_upd_failed": {"name": "v_sql_upd_failed", "resource_type": "macro", "package_name": "secret", "path": "macros/onsemi/batch/v_sql_upd_failed.sql", "original_file_path": "macros/onsemi/batch/v_sql_upd_failed.sql", "unique_id": "macro.secret.v_sql_upd_failed", "macro_sql": "{% macro v_sql_upd_failed(v_dbt_job_name) %}\n    \n  {% set query %}\n    CALL UTILITY.EDW_BATCH_FAILED_PROC('\"~{{ v_dbt_job_name }}~\"')\n  {% endset %}\n\n  {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8815913, "supported_languages": null}, "macro.secret.v_sql_get_watermark": {"name": "v_sql_get_watermark", "resource_type": "macro", "package_name": "secret", "path": "macros/onsemi/batch/v_sql_get_watermark.sql", "original_file_path": "macros/onsemi/batch/v_sql_get_watermark.sql", "unique_id": "macro.secret.v_sql_get_watermark", "macro_sql": "{% macro v_sql_get_watermark(V_BIW_BATCH_ID) -%}\n\n   {%- call statement('get_edw_watermark', fetch_result=true) %}\n\n        SELECT\n            LWM_DTTM,\n            HWM_DTTM,\n            START_DTTM\n        FROM\n            -- target db and schema to prevent pulling from prod if run in dev\n            {{ target.database }}.{{ target.schema }}.edw_process_batch_ctl as CTL\n        WHERE BATCH_ID = {{ V_BIW_BATCH_ID }}\n        \n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_edw_watermark') -%}\n    {%- set default = [] -%}\n\n    {%- if value_list and value_list['data'] -%}\n        -- TODO: could probably find a more elegant way to do this\n        {%- set V_LWM = value_list['data'][0][0] -%}\n        {%- set V_HWM = value_list['data'][0][1] -%}\n        {%- set V_START_DTTM = value_list['data'][0][2] -%}\n\n        {{ return([V_LWM, V_HWM, V_START_DTTM]) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8843195, "supported_languages": null}, "macro.secret.v_sql_upd_success": {"name": "v_sql_upd_success", "resource_type": "macro", "package_name": "secret", "path": "macros/onsemi/batch/v_sql_upd_success.sql", "original_file_path": "macros/onsemi/batch/v_sql_upd_success.sql", "unique_id": "macro.secret.v_sql_upd_success", "macro_sql": "{% macro v_sql_upd_success(v_dbt_job_name) %}\n    \n  {% set query %}\n    CALL UTILITY.EDW_BATCH_SUCCESS_PROC('\"~{{ v_dbt_job_name }}~\"')\n  {% endset %}\n\n  {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8850229, "supported_languages": null}, "macro.secret.log_run_end_results": {"name": "log_run_end_results", "resource_type": "macro", "package_name": "secret", "path": "macros/onsemi/batch/log_run_end_results.sql", "original_file_path": "macros/onsemi/batch/log_run_end_results.sql", "unique_id": "macro.secret.log_run_end_results", "macro_sql": "{% macro log_run_end_results(results) %}\n\n    {% if execute %}\n    \n        {% do log('Recording model run results in `dbt_meta__run_end_results`.', info=True) %}\n\n        {% for res in results %}\n        \n            {# \n            /*\n              Because results messages can contain single quotes in the error message, we\n              replace them with double quotes to avoid errors during the insert.\n              Note: to see all results returned, test run on 1 model with:\n              log(res, info=True)\n            */ \n            #}\n\n            {% if res.message %}\n                {% set tidy_message = res.message.replace(\"'\", '\"') %}\n            {% else %}\n                {% set tidy_message = '' %}\n            {% endif %}\n            \n            {% set query -%}\n                insert into {{ target.database }}.{{ target.schema }}.dbt_meta__run_end_results values (\n                    '{{ invocation_id }}',\n                    '{{ res.node.unique_id }}',\n                    '{{ res.node.name }}',\n                    '{{ res.node.relation_name }}',\n                    '{{ res.node.config.materialized }}',\n                    '{{ res.status }}', \n                    '{{ tidy_message }}',\n                    current_timestamp()\n                );\n            {%- endset %}\n            {% do run_query(query) %}\n\n\n        {% endfor %}\n        \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8884933, "supported_languages": null}, "macro.secret.v_sql_upd_run_batch": {"name": "v_sql_upd_run_batch", "resource_type": "macro", "package_name": "secret", "path": "macros/onsemi/batch/v_sql_upd_run_batch.sql", "original_file_path": "macros/onsemi/batch/v_sql_upd_run_batch.sql", "unique_id": "macro.secret.v_sql_upd_run_batch", "macro_sql": "{% macro v_sql_upd_run_batch(v_dbt_job_name) %}\n    \n  {% set query %}\n    CALL UTILITY.EDW_BATCH_RUNNING_PROC('\"~{{ v_dbt_job_name }}~\"')\n  {% endset %}\n\n  {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8891993, "supported_languages": null}, "macro.secret.create_run_end_results_table": {"name": "create_run_end_results_table", "resource_type": "macro", "package_name": "secret", "path": "macros/onsemi/batch/create_run_end_results.sql", "original_file_path": "macros/onsemi/batch/create_run_end_results.sql", "unique_id": "macro.secret.create_run_end_results_table", "macro_sql": "{% macro create_run_end_results_table() %}\n\n  {{ log('Creating `dbt_meta__run_end_results` table if not exists.', info=True) }}\n\n  create table if not exists {{ target.database }}.{{ target.schema }}.dbt_meta__run_end_results (\n      run_invocation_id text not null,\n      model_identifier text not null,\n      model_name text not null,\n      relation_name text not null,\n      materialization text not null,\n      model_status text not null,\n      model_message text not null,\n      updated_at timestamp not null\n  );\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8900332, "supported_languages": null}, "macro.secret.v_sql_ins_queue_batch": {"name": "v_sql_ins_queue_batch", "resource_type": "macro", "package_name": "secret", "path": "macros/onsemi/batch/v_sql_ins_queue_batch.sql", "original_file_path": "macros/onsemi/batch/v_sql_ins_queue_batch.sql", "unique_id": "macro.secret.v_sql_ins_queue_batch", "macro_sql": "{% macro v_sql_ins_queue_batch(v_dbt_job_name, ts=current_timestamp) %}\n    \n  {% set query %}\n    CALL UTILITY.EDW_BATCH_QUEUE_PROC('\"~{{ v_dbt_job_name }}~\"' ,{{ ts }})\n  {% endset %}\n\n  {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8908322, "supported_languages": null}, "macro.secret.get_stage_columns_from_loading_config": {"name": "get_stage_columns_from_loading_config", "resource_type": "macro", "package_name": "secret", "path": "macros/snowflake_utils/get_stage_columns_from_loading_config.sql", "original_file_path": "macros/snowflake_utils/get_stage_columns_from_loading_config.sql", "unique_id": "macro.secret.get_stage_columns_from_loading_config", "macro_sql": "{% macro get_stage_columns_from_loading_config(stage_name, config_table) %}\n    {#- get column info from config table -#}\n    {% set get_ddl_portions_query %}\n        with \n        \n        stage_cols as (\n            select *\n            from {{config_table}}\n            where stage_name = '{{stage_name}}'\n        ),\n\n        latest_stage_columns as (\n            select * \n            from stage_cols\n            where updated_at = (select max(updated_at) from stage_cols)\n        ),\n\n        ddl_portions as (\n            select\n                '$' || column_position || '::' || column_type || ' as ' || column_name as ddl_portions\n            from latest_stage_columns\n        )\n\n        select * from ddl_portions\n    {% endset %}\n\n    {% if execute %}\n        {% set ddl_portions = run_query(get_ddl_portions_query).columns[0].values() %}\n        {% for ddl_portion in ddl_portions %}\n          {{ddl_portion}} {% if not loop.last %}, {% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8926516, "supported_languages": null}, "macro.secret.unpack_json": {"name": "unpack_json", "resource_type": "macro", "package_name": "secret", "path": "macros/snowflake_utils/unpack_json.sql", "original_file_path": "macros/snowflake_utils/unpack_json.sql", "unique_id": "macro.secret.unpack_json", "macro_sql": "{% macro unpack_json(model, variant_column_name) %}\n\n  {% set variant_keys_query %}\n    WITH \n\n    KEYS AS (\n      SELECT \n        OBJECT_KEYS({{variant_column_name}})\n      FROM {{model}}\n    )\n\n    SELECT \n      K.VALUE::STRING\n    \n    FROM TABLE(FLATTEN(INPUT => (SELECT * FROM KEYS))) K\n  {% endset %}\n\n  {% if execute %}\n    {% set keys = run_query(variant_keys_query).columns[0].values() %}\n\n    {% for key in keys %}\n        GET({{variant_column_name}}, '{{key}}') AS {{key}}{% if not loop.last %}, {% endif %}\n    {% endfor %}\n\n  {% else %}\n    {{ return('NULL')}}\n  {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.8946514, "supported_languages": null}, "macro.secret.pack_json": {"name": "pack_json", "resource_type": "macro", "package_name": "secret", "path": "macros/snowflake_utils/pack_json.sql", "original_file_path": "macros/snowflake_utils/pack_json.sql", "unique_id": "macro.secret.pack_json", "macro_sql": "{% macro pack_json(from, relation_alias=False, except=[]) -%}\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n\n    {%- for col in cols -%}\n        {%- if col.column not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    object_construct_keep_null(\n        {%- for col in include_cols %}        \n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{\"'\" + col + \"'\" + ', ' + col }}\n            {%- if not loop.last %},{{'\\n  ' }}{% endif %}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.897023, "supported_languages": null}, "macro.secret.get_workspace_setup_script": {"name": "get_workspace_setup_script", "resource_type": "macro", "package_name": "secret", "path": "macros/snowflake_utils/get_workspace_setup_script.sql", "original_file_path": "macros/snowflake_utils/get_workspace_setup_script.sql", "unique_id": "macro.secret.get_workspace_setup_script", "macro_sql": "{% macro get_workspace_setup_script(project_name, test_svc_accnt_password, prod_svc_accnt_password) %}\n\n{% set setup_script %}\n\n//=============================================================================\n// create data resources\n//=============================================================================\nUSE ROLE SYSADMIN;\n\n// Databases\nCREATE DATABASE {{ project_name }}_DEV;\nCREATE DATABASE {{ project_name }}_PROD;\n\n// Clean public schemas\nDROP SCHEMA {{ project_name }}_DEV.PUBLIC;\nDROP SCHEMA {{ project_name }}_PROD.PUBLIC;\n//=============================================================================\n\n\n//=============================================================================\n// create warehouses\n//=============================================================================\nUSE ROLE SYSADMIN;\n\n// dev warehouse\nCREATE WAREHOUSE {{ project_name }}_DEV_WH\n  COMMENT='Warehouse for powering data engineering activities for the {{ project_name }} project'\n  WAREHOUSE_SIZE=XSMALL\n  AUTO_SUSPEND=60\n  INITIALLY_SUSPENDED=TRUE;\n\n// test warehouse\nCREATE WAREHOUSE {{ project_name }}_TEST_WH\n    COMMENT='Warehouse for powering CI test activities for the {{ project_name }} project'\n    WAREHOUSE_SIZE=XSMALL\n    AUTO_SUSPEND=60\n    INITIALLY_SUSPENDED=TRUE;\n\n// prod warehouse\nCREATE WAREHOUSE {{ project_name }}_PROD_WH\n    COMMENT='Warehouse for powering CI production activities for the {{ project_name }} project'\n    WAREHOUSE_SIZE=XSMALL\n    AUTO_SUSPEND=60\n    INITIALLY_SUSPENDED=TRUE;\n//=============================================================================\n\n\n//=============================================================================\n// create object access (OA) roles\n//=============================================================================\nUSE ROLE SECURITYADMIN;\n\n// data access\nCREATE ROLE {{ project_name }}_DEV_READ;\nCREATE ROLE {{ project_name }}_DEV_WRITE;\nCREATE ROLE {{ project_name }}_PROD_READ;\nCREATE ROLE {{ project_name }}_PROD_WRITE;\nCREATE ROLE {{ project_name }}_RAW_DATA_READ; -- Grant full source read access to this role. Think Fivetran read role for example.\n\n// warehouse access\nCREATE ROLE {{ project_name }}_DEV_WH_ALL_PRIVILEGES;\nCREATE ROLE {{ project_name }}_TEST_WH_USAGE;\nCREATE ROLE {{ project_name }}_PROD_WH_USAGE;\n\n// grant all roles to sysadmin (always do this)\nGRANT ROLE {{ project_name }}_DEV_WRITE             TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_DEV_READ              TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_PROD_WRITE            TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_PROD_READ             TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_RAW_DATA_READ         TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_DEV_WH_ALL_PRIVILEGES TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_TEST_WH_USAGE         TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_PROD_WH_USAGE         TO ROLE SYSADMIN;\n//=============================================================================\n\n\n//=============================================================================\n// grant privileges to object access roles\n//=============================================================================\nUSE ROLE SECURITYADMIN;\n\n// dev data access\nGRANT USAGE ON DATABASE {{ project_name }}_DEV                               TO ROLE {{ project_name }}_DEV_READ;\nGRANT USAGE ON ALL SCHEMAS IN DATABASE {{ project_name }}_DEV                TO ROLE {{ project_name }}_DEV_READ;\nGRANT USAGE ON FUTURE SCHEMAS IN DATABASE {{ project_name }}_DEV             TO ROLE {{ project_name }}_DEV_READ;\nGRANT SELECT ON ALL TABLES IN DATABASE {{ project_name }}_DEV                TO ROLE {{ project_name }}_DEV_READ;\nGRANT SELECT ON ALL VIEWS IN DATABASE {{ project_name }}_DEV                 TO ROLE {{ project_name }}_DEV_READ;\nGRANT SELECT ON ALL MATERIALIZED VIEWS IN DATABASE {{ project_name }}_DEV    TO ROLE {{ project_name }}_DEV_READ;\nGRANT SELECT ON FUTURE TABLES IN DATABASE {{ project_name }}_DEV             TO ROLE {{ project_name }}_DEV_READ;\nGRANT SELECT ON FUTURE VIEWS IN DATABASE {{ project_name }}_DEV              TO ROLE {{ project_name }}_DEV_READ;\nGRANT SELECT ON FUTURE MATERIALIZED VIEWS IN DATABASE {{ project_name }}_DEV TO ROLE {{ project_name }}_DEV_READ;\nGRANT ROLE {{ project_name }}_DEV_READ                                       TO ROLE {{ project_name }}_DEV_WRITE;\nGRANT CREATE SCHEMA ON DATABASE {{ project_name }}_DEV                       TO ROLE {{ project_name }}_DEV_WRITE;\n\n// prod data access\nGRANT USAGE ON DATABASE {{ project_name }}_PROD                               TO ROLE {{ project_name }}_PROD_READ;\nGRANT USAGE ON ALL SCHEMAS IN DATABASE {{ project_name }}_PROD                TO ROLE {{ project_name }}_PROD_READ;\nGRANT USAGE ON FUTURE SCHEMAS IN DATABASE {{ project_name }}_PROD             TO ROLE {{ project_name }}_PROD_READ;\nGRANT SELECT ON ALL TABLES IN DATABASE {{ project_name }}_PROD                TO ROLE {{ project_name }}_PROD_READ;\nGRANT SELECT ON ALL VIEWS IN DATABASE {{ project_name }}_PROD                 TO ROLE {{ project_name }}_PROD_READ;\nGRANT SELECT ON ALL MATERIALIZED VIEWS IN DATABASE {{ project_name }}_PROD    TO ROLE {{ project_name }}_PROD_READ;\nGRANT SELECT ON FUTURE TABLES IN DATABASE {{ project_name }}_PROD             TO ROLE {{ project_name }}_PROD_READ;\nGRANT SELECT ON FUTURE VIEWS IN DATABASE {{ project_name }}_PROD              TO ROLE {{ project_name }}_PROD_READ;\nGRANT SELECT ON FUTURE MATERIALIZED VIEWS IN DATABASE {{ project_name }}_PROD TO ROLE {{ project_name }}_PROD_READ;\nGRANT ROLE {{ project_name }}_PROD_READ                                       TO ROLE {{ project_name }}_PROD_WRITE;\nGRANT CREATE SCHEMA ON DATABASE {{ project_name }}_PROD                       TO ROLE {{ project_name }}_PROD_WRITE;\n\n// warehouse access\nGRANT ALL PRIVILEGES ON WAREHOUSE {{ project_name }}_DEV_WH TO ROLE {{ project_name }}_DEV_WH_ALL_PRIVILEGES;\nGRANT USAGE ON WAREHOUSE {{ project_name }}_TEST_WH         TO ROLE {{ project_name }}_TEST_WH_USAGE;\nGRANT USAGE ON WAREHOUSE {{ project_name }}_PROD_WH         TO ROLE {{ project_name }}_PROD_WH_USAGE;\n//=============================================================================\n\n\n//=============================================================================\n// create business function roles and grant access to object access roles\n//=============================================================================\nUSE ROLE SECURITYADMIN;\n\n// BF roles\nCREATE ROLE {{ project_name }}_ADMIN;\nCREATE ROLE {{ project_name }}_DEVELOPER;\nCREATE ROLE {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_ROLE;\nCREATE ROLE {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_ROLE;\n\n// grant all roles to sysadmin (always do this)\nGRANT ROLE {{ project_name }}_ADMIN                         TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_DEVELOPER                     TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_ROLE TO ROLE SYSADMIN;\nGRANT ROLE {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_ROLE TO ROLE SYSADMIN;\n\n// grant bf roles to admin\nGRANT ROLE {{ project_name }}_DEVELOPER                     TO ROLE {{ project_name }}_ADMIN;\nGRANT ROLE {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_ROLE TO ROLE {{ project_name }}_ADMIN;\nGRANT ROLE {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_ROLE TO ROLE {{ project_name }}_ADMIN;\n\n// grant OA roles to the developer\nGRANT ROLE {{ project_name }}_DEV_WRITE                     TO ROLE {{ project_name }}_DEVELOPER;\nGRANT ROLE {{ project_name }}_PROD_READ                     TO ROLE {{ project_name }}_DEVELOPER;\nGRANT ROLE {{ project_name }}_RAW_DATA_READ                 TO ROLE {{ project_name }}_DEVELOPER;\nGRANT ROLE {{ project_name }}_DEV_WH_ALL_PRIVILEGES         TO ROLE {{ project_name }}_DEVELOPER;\nGRANT ROLE {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_ROLE TO ROLE {{ project_name }}_DEVELOPER;\n\n// grant OA roles to the test service account role\nGRANT ROLE {{ project_name }}_DEV_WRITE     TO ROLE {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_ROLE;\nGRANT ROLE {{ project_name }}_RAW_DATA_READ TO ROLE {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_ROLE;\nGRANT ROLE {{ project_name }}_TEST_WH_USAGE TO ROLE {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_ROLE;\n\n// grant OA roles to the prod service account role\nGRANT ROLE {{ project_name }}_PROD_WRITE    TO ROLE {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_ROLE;\nGRANT ROLE {{ project_name }}_RAW_DATA_READ TO ROLE {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_ROLE;\nGRANT ROLE {{ project_name }}_PROD_WH_USAGE TO ROLE {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_ROLE;\n//=============================================================================\n\n\n//=============================================================================\n// create service accounts\n//=============================================================================\nUSE ROLE SECURITYADMIN;\n\n// test service account\nCREATE USER {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_USER\n  PASSWORD = '{{ test_svc_accnt_password }}' \n  COMMENT = 'Service account for dbt CI/CD in the test (TEST) environment of the {{ project_name }} project.'\n  DEFAULT_WAREHOUSE = {{ project_name }}_TEST_WH\n  DEFAULT_ROLE = {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_ROLE\n  MUST_CHANGE_PASSWORD = FALSE;\n\n// prod service account\nCREATE USER {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_USER\n  PASSWORD = '{{ prod_svc_accnt_password }}' \n  COMMENT = 'Service account for dbt CI/CD in the production (PROD) environment of the {{ project_name }} project.'\n  DEFAULT_WAREHOUSE = {{ project_name }}_PROD_WH\n  DEFAULT_ROLE = {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_ROLE\n  MUST_CHANGE_PASSWORD = FALSE;\n\n// grant permissions to service accounts\nGRANT ROLE {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_ROLE TO USER {{ project_name }}_DBT_TEST_SERVICE_ACCOUNT_USER;\nGRANT ROLE {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_ROLE TO USER {{ project_name }}_DBT_PROD_SERVICE_ACCOUNT_USER;\n//=============================================================================\n\n\n//=============================================================================\n// Connect this good funk to your existing warehouse junk\n//=============================================================================\n// Importantly, make sure you grant the proper read access for your sources to the {{ project_name }}_RAW_DATA_READ role\n// Something like:\nUSE ROLE SECURITYADMIN;\n-- GRANT USAGE ON DATABASE FIVETRAN                   TO ROLE {{ project_name }}_RAW_DATA_READ;\n-- GRANT USAGE ON ALL SCHEMAS IN DATABASE FIVETRAN    TO ROLE {{ project_name }}_RAW_DATA_READ;\n-- GRANT USAGE ON FUTURE SCHEMAS IN DATABASE FIVETRAN TO ROLE {{ project_name }}_RAW_DATA_READ;\n-- GRANT SELECT ON ALL TABLES IN DATABASE FIVETRAN    TO ROLE {{ project_name }}_RAW_DATA_READ;\n-- GRANT SELECT ON FUTURE TABLES IN DATABASE FIVETRAN TO ROLE {{ project_name }}_RAW_DATA_READ;\n\n// Check out this example below for adding the snowflake account usage data to your dbt projects\nUSE ROLE SECURITYADMIN;\n-- CREATE ROLE SNOWFLAKE_ACCOUNT_USAGE_READ_ROLE;\n-- GRANT ROLE SNOWFLAKE_ACCOUNT_USAGE_READ_ROLE TO ROLE SYSADMIN; -- always do this\n-- GRANT ROLE SNOWFLAKE_ACCOUNT_USAGE_READ_ROLE TO ROLE {{ project_name }}_RAW_DATA_READ;\n\n-- USE ROLE ACCOUNTADMIN;\n-- GRANT IMPORTED PRIVILEGES ON DATABASE SNOWFLAKE TO ROLE SNOWFLAKE_ACCOUNT_USAGE_READ_ROLE;\n\n// Annnnd lastly, you should probably grant the dev permissions to some of your favorite people\nUSE ROLE SECURITYADMIN;\n-- GRANT ROLE {{ project_name }}_ADMIN     TO USER LILY;\n-- GRANT ROLE {{ project_name }}_DEVELOPER TO USER PENELOPE;\n//=============================================================================\n{% endset %}\n\n{% do log('\\n\\n' ~ setup_script ~ '\\n\\n', True) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.971251, "supported_languages": null}, "macro.secret.resize_warehouse": {"name": "resize_warehouse", "resource_type": "macro", "package_name": "secret", "path": "macros/snowflake_utils/resize_warehouse.sql", "original_file_path": "macros/snowflake_utils/resize_warehouse.sql", "unique_id": "macro.secret.resize_warehouse", "macro_sql": "{% macro resize_warehouse(warehouse_name, warehouse_size) %}\n    {% set query = 'ALTER WAREHOUSE ' ~ warehouse_name ~ ' SET WAREHOUSE_SIZE=' ~ warehouse_size ~ ';' %}\n    {% if execute %}            \n        {% do run_query(query) %}        \n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.9722729, "supported_languages": null}, "macro.secret.update_controlled_db_read_access": {"name": "update_controlled_db_read_access", "resource_type": "macro", "package_name": "secret", "path": "macros/snowflake_utils/update_controlled_db_read_access.sql", "original_file_path": "macros/snowflake_utils/update_controlled_db_read_access.sql", "unique_id": "macro.secret.update_controlled_db_read_access", "macro_sql": "{% macro update_controlled_db_read_access(dry_run=True) %}\n\n    {# Set the database you intend to grant access to here. You could modify this macro to make this a param if you like. #}\n    {% set db = 'MY_DATABASE' %}\n    {% set schemas = ['schema_a', 'schema_b'] %}\n    {% set object_access_role = db ~ '_CONTROLLED_READ_ACCESS_ROLE' %}\n\n    {% set update_query %}\n        USE ROLE SECURITYADMIN;\n\n        -- Create the access role if it doesn't exist\n        CREATE ROLE IF NOT EXISTS {{object_access_role}};\n        GRANT ROLE {{object_access_role}} TO ROLE SYSADMIN; -- always do this as a best practice\n\n        -- Update grants to the object access role\n        GRANT USAGE ON DATABASE {{db}} TO ROLE {{object_access_role}};\n        {% for schema in schemas %}\n            GRANT USAGE ON {{db}}.{{schema}} TO ROLE {{object_access_role}};\n            GRANT SELECT ON ALL TABLES    IN SCHEMA {{db}}.{{schema}} TO ROLE {{object_access_role}};\n            GRANT SELECT ON ALL VIEWS     IN SCHEMA {{db}}.{{schema}} TO ROLE {{object_access_role}};\n            GRANT SELECT ON FUTURE TABLES IN SCHEMA {{db}}.{{schema}} TO ROLE {{object_access_role}};\n            GRANT SELECT ON FUTURE VIEWS  IN SCHEMA {{db}}.{{schema}} TO ROLE {{object_access_role}};\n        {% endfor %}\n    {% endset %}\n\n    {% if dry_run %}\n        {% do log('Dry run of update controlled db read access:\\n' ~ update_query, True) %}\n    {% else %}\n        {% do run_query(update_query) %}\n    {% endif %}\n\n    {# Always a good idea to explicitly jump back to the default role for the current environment #}\n    {% do run_query('USE ROLE ' ~ target.role) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.976431, "supported_languages": null}, "macro.secret.stored_proc__pi": {"name": "stored_proc__pi", "resource_type": "macro", "package_name": "secret", "path": "macros/snowflake_utils/stored_proc__pi.sql", "original_file_path": "macros/snowflake_utils/stored_proc__pi.sql", "unique_id": "macro.secret.stored_proc__pi", "macro_sql": "{% macro stored_proc__pi() %}\n\n    {% set stored_proc_name %}\n        {{target.database}}.{{target.schema}}.sp_pi\n    {% endset %}\n    \n    {% set stored_proc_ddl_query %}\n        create or replace procedure {{stored_proc_name}}()\n        returns float not null\n        language javascript\n        as\n        $$\n            return 3.1415926;\n        $$\n        ;\n    {% endset %}\n\n    {% do run_query(stored_proc_ddl_query) %}\n    {% do log('Created stored proc:\\t' ~ stored_proc_name, True) %}\n\n    {# return the name of the stored procedure #}\n    {%- do return(stored_proc_name) %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.9779773, "supported_languages": null}, "macro.secret.drop_empty_schemas": {"name": "drop_empty_schemas", "resource_type": "macro", "package_name": "secret", "path": "macros/snowflake_utils/cleanup/drop_empty_schemas.sql", "original_file_path": "macros/snowflake_utils/cleanup/drop_empty_schemas.sql", "unique_id": "macro.secret.drop_empty_schemas", "macro_sql": "{% macro drop_empty_schemas() %}\n\n  {% set cleanup_query %}\n\n      WITH \n      \n      ALL_SCHEMAS AS (\n        SELECT\n          CONCAT_WS('.', CATALOG_NAME, SCHEMA_NAME) AS SCHEMA_NAME\n        FROM \n          {{ target.database }}.INFORMATION_SCHEMA.SCHEMATA\n        WHERE \n          SCHEMA_NAME NOT IN ('INFORMATION_SCHEMA', 'PUBLIC')\n      ),\n\n      NON_EMPTY_SCHEMAS AS (\n        SELECT\n          DISTINCT CONCAT_WS('.', TABLE_CATALOG, TABLE_SCHEMA) AS SCHEMA_NAME\n        FROM \n          {{ target.database }}.INFORMATION_SCHEMA.TABLES\n        WHERE \n          TABLE_SCHEMA NOT IN ('INFORMATION_SCHEMA', 'PUBLIC')\n      ),\n\n      EMPTY_SCHEMAS AS (\n        SELECT * FROM ALL_SCHEMAS\n        MINUS\n        SELECT * FROM NON_EMPTY_SCHEMAS\n      )\n\n      SELECT \n        'DROP SCHEMA ' || SCHEMA_NAME || ';' as DROP_COMMANDS\n      FROM \n        EMPTY_SCHEMAS\n\n  {% endset %}\n\n    \n  {% set drop_commands = run_query(cleanup_query).columns[0].values() %}\n\n\n  {% if drop_commands %}\n    {% for drop_command in drop_commands %}\n      {% do log(drop_command, True) %}\n      {% do run_query(drop_command) %}\n    {% endfor %}\n  {% else %}\n    {% do log('No schemas to clean.', True) %}\n  {% endif %}\n  \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.9802473, "supported_languages": null}, "macro.secret.drop_old_relations": {"name": "drop_old_relations", "resource_type": "macro", "package_name": "secret", "path": "macros/snowflake_utils/cleanup/drop_old_relations.sql", "original_file_path": "macros/snowflake_utils/cleanup/drop_old_relations.sql", "unique_id": "macro.secret.drop_old_relations", "macro_sql": "{% macro drop_old_relations(cutoff_in_hours) %}\n\n  {% set cleanup_query %}\n\n      WITH \n      \n      MODELS_TO_DROP AS (\n        SELECT\n          CASE \n            WHEN TABLE_TYPE = 'BASE TABLE' THEN 'TABLE'\n            WHEN TABLE_TYPE = 'VIEW' THEN 'VIEW'\n          END AS RELATION_TYPE,\n          CONCAT_WS('.', TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME) AS RELATION_NAME\n        FROM \n          {{ target.database }}.INFORMATION_SCHEMA.TABLES\n        WHERE \n          TABLE_SCHEMA NOT IN ('INFORMATION_SCHEMA', 'PUBLIC')\n          AND \n          LAST_ALTERED < DATEADD('HOUR', -{{ cutoff_in_hours }}, CURRENT_TIMESTAMP)\n      )\n\n      SELECT \n        'DROP ' || RELATION_TYPE || ' ' || RELATION_NAME || ';' as DROP_COMMANDS\n      FROM \n        MODELS_TO_DROP\n\n  {% endset %}\n    \n  {% set drop_commands = run_query(cleanup_query).columns[0].values() %}\n\n  {% if drop_commands %}\n    {% for drop_command in drop_commands %}\n      {% do log(drop_command, True) %}\n      {% do run_query(drop_command) %}\n    {% endfor %}\n  {% else %}\n    {% do log('No relations to clean.', True) %}\n  {% endif %}\n  \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.982461, "supported_languages": null}, "macro.secret.clean_workspace": {"name": "clean_workspace", "resource_type": "macro", "package_name": "secret", "path": "macros/snowflake_utils/cleanup/clean_workspace.sql", "original_file_path": "macros/snowflake_utils/cleanup/clean_workspace.sql", "unique_id": "macro.secret.clean_workspace", "macro_sql": "{% macro clean_workspace(database=target.database, dry_run=True, schema_like=None, schema_not_like=None) %}\n    {%- set msg -%}\n        Starting clean_workspace...\n          database:        {{database}} \n          dry_run:         {{dry_run}} \n          schema_like:     {{schema_like}} \n          schema_not_like: {{schema_not_like}} \n    {%- endset -%}\n    {{ log(msg, info=True) }}\n\n\n    {% set get_drop_commands_query %}\n        SELECT\n            'DROP SCHEMA {{database}}.' || SCHEMA_NAME || ';' AS DROP_QUERY\n        FROM\n            {{database}}.INFORMATION_SCHEMA.SCHEMATA\n        WHERE\n            SCHEMA_NAME != 'INFORMATION_SCHEMA'\n        {%- if schema_like -%}\n            AND SCHEMA_NAME ILIKE '{{schema_like}}' \n        {%- endif -%}\n        {%- if schema_not_like -%}\n            AND NOT SCHEMA_NAME ILIKE '{{schema_not_like}}' \n        {%- endif -%}\n    {% endset %}\n\n\n    {{ log('\\nGenerating cleanup queries...\\n', info=True) }}\n    {% set drop_queries = run_query(get_drop_commands_query).columns[0].values() %}\n\n\n    {% for drop_query in drop_queries %}\n        {% if execute and not dry_run %}\n            {{ log('Dropping schema with command: ' ~ drop_query, info=True) }}\n            {% do run_query(drop_query) %}    \n        {% else %}\n            {{ log(drop_query, info=True) }}\n        {% endif %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.986587, "supported_languages": null}, "macro.secret.drop_deprecated_tables": {"name": "drop_deprecated_tables", "resource_type": "macro", "package_name": "secret", "path": "macros/snowflake_utils/cleanup/drop_deprecated_tables.sql", "original_file_path": "macros/snowflake_utils/cleanup/drop_deprecated_tables.sql", "unique_id": "macro.secret.drop_deprecated_tables", "macro_sql": "{% macro drop_deprecated_tables(dry_run) %}\n\n    {% if execute %}\n\n        {% set current_models=[] %}\n\n        {% for node in graph.nodes.values()\n            | selectattr(\"resource_type\", \"in\", [\"model\", \"seed\", \"snapshot\"])%}\n            {% do current_models.append(node.name) %}\n        {% endfor %}\n\n    {% endif %}\n    \n    {% set cleanup_query %}\n        \n        with \n        models_to_drop as (\n            select\n                case\n                    when table_type = 'BASE TABLE' then 'TABLE'\n                    when table_type = 'VIEW' then 'VIEW'\n                end as relation_type,\n                concat_ws('.', table_catalog, table_schema, table_name) as relation_name\n            from\n                {{ target.database }}.information_schema.tables\n            where \n                table_schema ilike '{{ target.schema }}%'\n                and table_name not in\n                    (\n                        {%- for model in current_models -%}\n                            '{{ model.upper() }}'\n                            {%- if not loop.last -%},{% endif %}\n                        {%- endfor -%}\n                    )\n        )\n\n        select\n            'drop ' || relation_type || ' ' || relation_name || ';' as drop_commands\n        from\n            models_to_drop\n        -- intentionally exclude unhandled table_types, including 'external table`\n        where drop_commands is not null\n\n    {% endset %}\n\n    {% do log(cleanup_query, info=True) %}\n    \n    {% set drop_commands = run_query(cleanup_query).columns[0].values() %}\n    \n    {% if drop_commands %}\n        {% for drop_command in drop_commands %}\n\n            {% do log(drop_command, True) %}\n            {% if dry_run == false %}\n                {% do run_query(drop_command) %}\n                {% do log('Deprecated Tables Dropped.', True) %}\n            {% endif %}\n\n        {% endfor %}\n        \n        {% else %}\n        {% do log('No relations to clean.', True) %}\n\n    {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.9920802, "supported_languages": null}, "macro.secret.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "secret", "path": "macros/config/generate_schema_name.sql", "original_file_path": "macros/config/generate_schema_name.sql", "unique_id": "macro.secret.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {%- set default_schema = target.schema -%}\n    \n    {% set log_msg='getting custom schema:\\ntarget_name:' ~ target.name ~ '\\ncustom_schema_name:' ~ custom_schema_name %}\n    {% do log(log_msg, False) %}\n\n    {%- if custom_schema_name -%}\n        {{ custom_schema_name if 'prod' in target.name.lower() else target.schema ~ '__' ~ custom_schema_name }}\n    {%- else -%}\n        {{ default_schema }} \n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.9935923, "supported_languages": null}, "macro.secret.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "secret", "path": "macros/config/generate_database_name.sql", "original_file_path": "macros/config/generate_database_name.sql", "unique_id": "macro.secret.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name, node) -%}\n    {%- set default_database = target.database -%}\n    \n    {% set log_msg='getting custom database:\\ntarget_name:' ~ target.name ~ '\\ncustom_database_name:' ~ custom_database_name %}\n    {% do log(log_msg, False) %}\n\n    {%- if custom_database_name is none -%}\n        {{ default_database }} \n    {%- else -%}\n        {{ custom_database_name }}_{{ target.name | trim }}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.9949703, "supported_languages": null}, "macro.secret.wh_assign_config": {"name": "wh_assign_config", "resource_type": "macro", "package_name": "secret", "path": "macros/config/macro_in_config_example.sql", "original_file_path": "macros/config/macro_in_config_example.sql", "unique_id": "macro.secret.wh_assign_config", "macro_sql": "{% macro wh_assign_config(model=this.name, env=target.name) -%}\n    {% set model_env = model ~ '_' ~ env%}\n\n    {# Fill in your table values here #}\n    {# In the format \"model_env\": \"warehouse\" #}\n\n        {% set wh_dict = {\n            \"dim_customers_prod\" : \"DAPL_PROD_WH\",\n            \"dim_customers_dev\" : \"DAPL_ADHOC_WH\",\n            \"request_prod\" : \"PROD_WH\",\n            \"request_dev\" : \"DEV_WH\",\n            \"request_default\" : \"DEFAULT_WH\",\n        } -%}\n\n    {{ return(wh_dict[model_env]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.9964466, "supported_languages": null}, "macro.secret.generate_source_yml_for_database": {"name": "generate_source_yml_for_database", "resource_type": "macro", "package_name": "secret", "path": "macros/codegen/generate_source_yml_for_database.sql", "original_file_path": "macros/codegen/generate_source_yml_for_database.sql", "unique_id": "macro.secret.generate_source_yml_for_database", "macro_sql": "{% macro generate_source_yml_for_database(db='RAW', generate_cols=True) %}\n\n    {# Get schemas (technically, schemata is the plural of schema - but I am a rebel) #}\n    {% set schemas = run_query(\"select schema_name from \" ~ db ~ \".information_schema.schemata where schema_name != 'INFORMATION_SCHEMA'\").columns[0].values() %}\n\n    {# Generate source yaml for each database. There are duplicate version entries for now but I would like to fix this in the future. For now, just buck up and clean the text by hand #}\n    {% for schema in schemas %}\n        {{ codegen.generate_source(schema_name=schema, database_name=db, generate_columns=generate_cols) }}\n        {% do log('\\n---\\n\\n', true) %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.codegen.generate_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.9980273, "supported_languages": null}, "macro.secret.delete_snapshots": {"name": "delete_snapshots", "resource_type": "macro", "package_name": "secret", "path": "macros/snapshots/delete_snapshots.sql", "original_file_path": "macros/snapshots/delete_snapshots.sql", "unique_id": "macro.secret.delete_snapshots", "macro_sql": "{% macro delete_snapshots() %}\n    {#\n    Run the following dbt command to delete snapshots in this project:\n        dbt run-operation delete_snapshots\n    #}\n\n    {% set query = 'drop table ' ~target.database~'.'~target.schema~'.hard_deletes__snapshot' %}\n\n    {% if execute %}\n        {% do run_query(query) %}\n        {% do log('Cleaned up snapshots with following query:\\n'~query, True) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482185.9991937, "supported_languages": null}, "macro.secret.create_augmented_snapshot": {"name": "create_augmented_snapshot", "resource_type": "macro", "package_name": "secret", "path": "macros/snapshots/create_augmented_snapshot.sql", "original_file_path": "macros/snapshots/create_augmented_snapshot.sql", "unique_id": "macro.secret.create_augmented_snapshot", "macro_sql": "{% macro create_augmented_snapshot(snapshot_table, table_key) %}\n\n    {% if 'snowflake' == target.type %}\n        {{ snowflake__create_augmented_snapshot(snapshot_table, table_key) }}\n    {% elif 'bigquery' == target.type %}\n        {{ bigquery__create_augmented_snapshot(snapshot_table, table_key) }}\n    {% else %}\n        {% do log('Target type \"' ~ target.type ~ '\" not supported by the create_augmented_snapshot macro at this time', True) %}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.secret.snowflake__create_augmented_snapshot", "macro.secret.bigquery__create_augmented_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.000652, "supported_languages": null}, "macro.secret.snowflake__create_augmented_snapshot": {"name": "snowflake__create_augmented_snapshot", "resource_type": "macro", "package_name": "secret", "path": "macros/snapshots/snowflake/snowflake__create_augmented_snapshot.sql", "original_file_path": "macros/snapshots/snowflake/snowflake__create_augmented_snapshot.sql", "unique_id": "macro.secret.snowflake__create_augmented_snapshot", "macro_sql": "{% macro snowflake__create_augmented_snapshot(snapshot_table, table_key) %}\n\n    {% set distant_past       =\"TO_TIMESTAMP('1900-01-01 00:00:00+00')\"%}\n    {% set distant_future     =\"TO_TIMESTAMP('9999-12-31 23:59:59+00')\"%}\n    {% set dbt_valid_from_min =\n        'min(dbt_valid_from) over (\n            partition by ' ~ table_key ~ ' order by dbt_valid_from rows between unbounded preceding and unbounded following\n        )'\n    %}\n\n\n    with\n\n    snapshot_with_distant_past_and_distant_future_raw as (\n        select\n            *,\n\n            iff(\n                dbt_valid_from = {{ dbt_valid_from_min }},\n                {{ distant_past }},\n                dbt_valid_from\n            ) as valid_from_with_distant_past,\n\n            iff(\n                dbt_valid_to is null,\n                {{ distant_future }},\n                dbt_valid_to\n            ) as valid_to_with_distant_future\n\n        from {{ snapshot_table }}\n    ),\n\n\n    snapshot_with_distant_past_and_distant_future as (\n        select \n            {{ dbt_utils.star(snapshot_table) }},\n            valid_from_with_distant_past,\n            valid_to_with_distant_future\n        \n        from snapshot_with_distant_past_and_distant_future_raw\n    ),\n\n\n    snapshot_with_is_deleted as (\n        select \n            *,\n            first_value(dbt_valid_to) over (\n                partition by {{table_key}} order by dbt_valid_to asc rows between unbounded preceding and unbounded following\n            ) is not null as is_deleted\n        \n        from snapshot_with_distant_past_and_distant_future\n    ),\n\n    snapshot_with_current_values as (\n        select \n            *,\n\n            iff(\n                is_deleted or (dbt_valid_to is null),\n                true,\n                false\n            ) as is_current\n        \n        from snapshot_with_is_deleted\n    )\n\n    select * from snapshot_with_current_values\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0032122, "supported_languages": null}, "macro.secret.bigquery__create_augmented_snapshot": {"name": "bigquery__create_augmented_snapshot", "resource_type": "macro", "package_name": "secret", "path": "macros/snapshots/bigquery/bigquery__create_augmented_snapshot.sql", "original_file_path": "macros/snapshots/bigquery/bigquery__create_augmented_snapshot.sql", "unique_id": "macro.secret.bigquery__create_augmented_snapshot", "macro_sql": "{% macro bigquery__create_augmented_snapshot(snapshot_table, table_key) %}\n\n    {% set distant_past       =\"TIMESTAMP('1900-01-01 00:00:00+00')\"%}\n    {% set distant_future     =\"TIMESTAMP('9999-12-31 23:59:59+00')\"%}\n    {% set dbt_valid_from_min =\n        'min(dbt_valid_from) over (\n            partition by ' ~ table_key ~ ' order by dbt_valid_from rows between unbounded preceding and unbounded following\n        )'\n    %}\n\n\n    with\n\n    snapshot_with_distant_past_and_distant_future_raw as (\n        select\n            *,\n\n            if(\n                dbt_valid_from = {{ dbt_valid_from_min }},\n                {{ distant_past }},\n                dbt_valid_from\n            ) as valid_from_with_distant_past,\n\n            if(\n                dbt_valid_to is null,\n                {{ distant_future }},\n                dbt_valid_to\n            ) as valid_to_with_distant_future\n\n        from {{ snapshot_table }}\n    ),\n\n\n    snapshot_with_distant_past_and_distant_future as (\n        select \n            {{ dbt_utils.star(snapshot_table) }},\n            valid_from_with_distant_past,\n            valid_to_with_distant_future\n        \n        from snapshot_with_distant_past_and_distant_future_raw\n    ),\n\n\n    snapshot_with_is_deleted as (\n        select \n            *,\n            first_value(dbt_valid_to) over (\n                partition by {{table_key}} order by dbt_valid_to asc rows between unbounded preceding and unbounded following\n            ) is not null as is_deleted\n        \n        from snapshot_with_distant_past_and_distant_future\n    ),\n\n    snapshot_with_current_values as (\n        select \n            *,\n\n            if(\n                is_deleted or (dbt_valid_to is null),\n                true,\n                false\n            ) as is_current\n        \n        from snapshot_with_is_deleted\n    )\n\n    select * from snapshot_with_current_values\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0057712, "supported_languages": null}, "macro.secret.materialization_easy_incremental_default": {"name": "materialization_easy_incremental_default", "resource_type": "macro", "package_name": "secret", "path": "macros/materializations/easy_incremental/easy_incremental.sql", "original_file_path": "macros/materializations/easy_incremental/easy_incremental.sql", "unique_id": "macro.secret.materialization_easy_incremental_default", "macro_sql": "{% materialization easy_incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n  {% set watermark  = config.get('watermark') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n\n      {% set easy_incremental_sql %}\n        {{sql}} \n\n        {% if watermark is not none %}\n            -- this filter will only be applied on an incremental run\n            WHERE {{ watermark }} > (SELECT MAX(THIS.{{ watermark }}) FROM {{ this }} THIS)\n        {% endif %}\n      {% endset %}\n\n      {% do run_query(create_table_as(True, tmp_relation, easy_incremental_sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.should_full_refresh", "macro.dbt.run_query", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0136683, "supported_languages": ["sql"]}, "macro.secret.materialization_landing_default": {"name": "materialization_landing_default", "resource_type": "macro", "package_name": "secret", "path": "macros/materializations/landing/landing.sql", "original_file_path": "macros/materializations/landing/landing.sql", "unique_id": "macro.secret.materialization_landing_default", "macro_sql": "{% materialization landing, default -%}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% call statement(\"main\") %}\n      {{ sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n  \n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0162692, "supported_languages": ["sql"]}, "macro.secret.materialization_partitioned_incremental_default": {"name": "materialization_partitioned_incremental_default", "resource_type": "macro", "package_name": "secret", "path": "macros/materializations/partitioned_incremental/partitioned_incremental.sql", "original_file_path": "macros/materializations/partitioned_incremental/partitioned_incremental.sql", "unique_id": "macro.secret.materialization_partitioned_incremental_default", "macro_sql": "{% materialization partitioned_incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n  {% set partition_by  = config.get('partition_by') %}\n  {% set partitions_to_process  = config.get('partitions_to_process') %}\n\n  {% do log('\\nunique_key=' ~unique_key~ '\\npartition_by=' ~partition_by~ '\\npartitions_to_process=' ~partitions_to_process, False)%}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n\n      {% set partitioned_incremental_sql %}\n        {{sql}} \n\n        {% if partition_by and partitions_to_process %}\n            -- this filter will only be applied on an incremental run\n            WHERE {{ partition_by }} IN ( \n                {% for partition_to_process in partitions_to_process %}\n                    {{partition_to_process}}{% if not loop.last %},{% endif %}\n                {% endfor %}\n            )\n        {% endif %}\n      {% endset %}\n\n      {% do log('\\n\\n'~partitioned_incremental_sql~'\\n\\n', False)%}\n\n\n      {% do run_query(create_table_as(True, tmp_relation, partitioned_incremental_sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.should_full_refresh", "macro.dbt.run_query", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0253975, "supported_languages": ["sql"]}, "macro.secret.get_column_names": {"name": "get_column_names", "resource_type": "macro", "package_name": "secret", "path": "macros/audit/get_column_names.sql", "original_file_path": "macros/audit/get_column_names.sql", "unique_id": "macro.secret.get_column_names", "macro_sql": "{% macro get_column_names(model) %}\n  {% set query = 'describe view ' ~ model %}\n\n  {% if execute %}\n    {% set cols = run_query(query).columns[0].values() %}\n    {{ return(cols) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.026504, "supported_languages": null}, "macro.secret.validate_model_name": {"name": "validate_model_name", "resource_type": "macro", "package_name": "secret", "path": "macros/audit/validate_model_name.sql", "original_file_path": "macros/audit/validate_model_name.sql", "unique_id": "macro.secret.validate_model_name", "macro_sql": "{% macro validate_model_name(model, ruleset=None) %}\n\n  {% if ruleset == None %}\n      {{ return() }}\n  {% elif ruleset == 'stage' %}  \n    {% if not model.identifier.startswith('stg_') %}\n      {{ exceptions.raise_compiler_error(\"Invalid model name validation. Staging models must start with 'stg_'. Got: \" ~ model.identifier) }}\n    {% endif %}\n  {% else %}  \n    {{ exceptions.raise_compiler_error(\"Invalid model name validation ruleset. Got: \" ~ ruleset) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0281155, "supported_languages": null}, "macro.secret.validate_column_names": {"name": "validate_column_names", "resource_type": "macro", "package_name": "secret", "path": "macros/audit/validate_column_names.sql", "original_file_path": "macros/audit/validate_column_names.sql", "unique_id": "macro.secret.validate_column_names", "macro_sql": "{% macro validate_column_names(model) %}\n  {% if not execute %}\n      {{ return(None) }}\n  {% endif %}\n\n  {% set cols = get_column_names(model) %}\n  \n  {% set has_id_col = [] %}\n  {% for col in cols %}\n    {% if col.lower().endswith('_id') %}\n      {% do has_id_col.append(True) %}\n    {% endif %}\n  {% endfor %}\n  \n  {% if not has_id_col %}\n    {%- set err -%}\n      Model {{model.identifier}} has no id column. 1 column name must end in '_id'. Columns:\n      {%- for col in cols -%}\n        {{'\\n\\t'}}{{col}}\n      {%- endfor -%}\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(err) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.secret.get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0306954, "supported_languages": null}, "macro.secret.test_is_even": {"name": "test_is_even", "resource_type": "macro", "package_name": "secret", "path": "tests/generic/is_even.sql", "original_file_path": "tests/generic/is_even.sql", "unique_id": "macro.secret.test_is_even", "macro_sql": "{% test is_even(model, column_name, to) %}\n\nwith validation as (\n\n    select\n        {{ column_name }} as even_field\n\n    from {{ model }} m\n    left join\n    {{ to }} c\n    on m.customer_id = c.customer_id\n\n),\n\nvalidation_errors as (\n\n    select\n        even_field\n\n    from validation\n    -- if this is true, then even_field is actually odd!\n    where (even_field % 2) = 1\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0314505, "supported_languages": null}, "macro.secret.test_is_not_null_custom": {"name": "test_is_not_null_custom", "resource_type": "macro", "package_name": "secret", "path": "tests/generic/is_not_null_custom.sql", "original_file_path": "tests/generic/is_not_null_custom.sql", "unique_id": "macro.secret.test_is_not_null_custom", "macro_sql": "{% test is_not_null_custom(model, column_name, header) %}\n\n{{ config(sql_header = header) }}\n\nwith validation_errors as (\n\n    select {{ column_name }} \n      from {{ model }}\n     where {{ column_name }} is null\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0322156, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }}\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.060871, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.062876, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0636158, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0661464, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0665565, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0685706, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0700493, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many objects in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0713887, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0722613, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0727842, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0734556, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0740008, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0753217, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0758078, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0762675, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0775318, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.078043, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0793319, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0815005, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0821054, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0827587, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.084749, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0854688, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0857801, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0864465, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0869238, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.08722, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.087509, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0878725, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0882788, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0888553, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0893433, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0898066, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0902636, "supported_languages": null}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.091635, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0925918, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.0985796, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1072881, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1077414, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1105876, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.111416, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1121218, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1130352, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.118718, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.119471, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{% macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1197407, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.124809, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1256135, "supported_languages": ["sql"]}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1262822, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.127046, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1278765, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1292832, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.132243, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1329389, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1334364, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1338716, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.134354, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.135043, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1357539, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.136592, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1370952, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1375346, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1385536, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.139631, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1407652, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1411695, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1415534, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1418533, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1422982, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.14251, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1429503, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1433945, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1495726, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1500342, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1506603, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.151431, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.152101, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1529503, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1534526, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1540375, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.154919, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.155376, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1559145, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.156694, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1573584, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1588135, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.159428, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1598136, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1603582, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1638482, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.164192, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1646457, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1649513, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.165865, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.166368, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1666543, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1672513, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.167757, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1683826, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1688912, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1695, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1714168, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.171933, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.172614, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1732283, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.176247, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1777513, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1782258, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1787722, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1792274, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.179946, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1812413, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1821606, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1826565, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1830952, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1835914, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.187996, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1884365, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1892636, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1898649, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1904151, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1908977, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1930532, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.193984, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1944742, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1953833, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1960049, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.1975868, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.198273, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2003484, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2014422, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.201819, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2022605, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2033174, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2042994, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2049859, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2061973, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2069094, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.207669, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2086923, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2097116, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2133005, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2150028, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.215791, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2194858, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2226355, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2246346, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2252662, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2261267, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2265763, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2272863, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2276502, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.228396, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2287636, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2294083, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2296944, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2303472, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.230636, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.231474, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2321904, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.232596, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2331843, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2333999, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2340577, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.234408, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2353468, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2358108, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2365828, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2369533, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2375867, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2378852, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2385948, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2389529, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.239591, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2400453, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2414525, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2425523, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2437246, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2441924, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2447932, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2456348, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2461047, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2467701, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.247205, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.247889, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2482991, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2489614, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.249263, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2503476, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2510126, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2516098, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2518258, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.252582, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.252954, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2536867, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2540817, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.256205, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2566214, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2570565, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2574682, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2579224, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2583363, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2587814, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2592602, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2596958, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.260129, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2605748, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.260966, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2613955, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2617884, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2645261, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2650585, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2654443, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2658381, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2662272, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.267096, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2679024, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2687435, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.270935, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2712643, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2726748, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2731352, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2735028, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2768598, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2779107, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2788258, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.280737, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2812347, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.282395, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2843237, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2855456, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2860596, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.secret.get_column_names", "macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2865381, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n    /* Do the equivalent of rename_if_exists */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.293194, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2965202, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.297981, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.2997231, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3003788, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3022788, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3038373, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3158092, "supported_languages": ["sql"]}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3266485, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3308535, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3315456, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3342123, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.334929, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3366463, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3465605, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3497446, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3530064, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.355245, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3572075, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3578281, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3583395, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3591127, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3596113, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.36041, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.360912, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.36161, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.362112, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3625245, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.363248, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    /* Do the equivalent of rename_if_exists */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3698928, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3735874, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3743544, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3749444, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.375923, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3763766, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3768601, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3779747, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3866994, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3890557, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3896804, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3909578, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3914685, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3918333, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3922331, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.392552, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3929722, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3932912, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3945744, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3951972, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.3984485, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4060743, "supported_languages": ["sql"]}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4196405, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.420709, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4214146, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4284015, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4291582, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4296038, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.429861, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.430257, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4305718, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.431116, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4334106, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.433938, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4346142, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4357557, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4431775, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4436383, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4442627, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4462664, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4467263, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.447192, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.450834, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4542508, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4551666, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4561965, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4572413, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4580595, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4629858, "supported_languages": ["sql"]}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4662154, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4666271, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4687445, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4698157, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4713378, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4726002, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4728165, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4740033, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4746234, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4753768, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4761248, "supported_languages": null}, "macro.dbt_artifacts.migrate_from_v0_to_v1": {"name": "migrate_from_v0_to_v1", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/migrate_from_v0_to_v1.sql", "original_file_path": "macros/migrate_from_v0_to_v1.sql", "unique_id": "macro.dbt_artifacts.migrate_from_v0_to_v1", "macro_sql": "{%- macro migrate_from_v0_to_v1(old_database, old_schema, new_database, new_schema) -%}\n\n    {% set migrate_model_executions %}\n        insert into {{new_database}}.{{new_schema}}.model_executions (\n            command_invocation_id,\n            compile_started_at,\n            materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            model_materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            model_schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__model_executions\n    {% endset %}\n\n    {{ log(\"Migrating model_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_model_executions }}\n    {%- endcall -%}\n\n    {% set migrate_tests %}\n        insert into {{new_database}}.{{new_schema}}.tests (\n            command_invocation_id,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            tags,\n            test_path,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            [],\n            test_path,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__tests\n    {% endset %}\n\n    {{ log(\"Migrating tests\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_tests }}\n    {%- endcall -%}\n\n    {% set migrate_test_executions %}\n        insert into {{new_database}}.{{new_schema}}.test_executions (\n            command_invocation_id,\n            compile_started_at,\n            failures,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            null,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__test_executions\n    {% endset %}\n\n    {{ log(\"Migrating test_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_test_executions }}\n    {%- endcall -%}\n\n    {% set migrate_models %}\n        insert into {{new_database}}.{{new_schema}}.models (\n            checksum,\n            command_invocation_id,\n            database,\n            depends_on_nodes,\n            materialization,\n            name,\n            node_id,\n            package_name,\n            path,\n            schema,\n            run_started_at\n        )\n        select\n            checksum,\n            command_invocation_id,\n            model_database,\n            depends_on_nodes,\n            model_materialization,\n            name,\n            node_id,\n            package_name,\n            model_path,\n            model_schema,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__models\n    {% endset %}\n\n    {{ log(\"Migrating models\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_models }}\n    {%- endcall -%}\n\n    {% set migrate_seeds %}\n        insert into {{new_database}}.{{new_schema}}.seeds (\n            checksum,\n            command_invocation_id,\n            database,\n            name,\n            node_id,\n            package_name,\n            path,\n            schema,\n            run_started_at\n        )\n        select\n            checksum,\n            command_invocation_id,\n            seed_database,\n            name,\n            node_id,\n            package_name,\n            seed_path,\n            seed_schema,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__seeds\n    {% endset %}\n\n    {{ log(\"Migrating seeds\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_seeds }}\n    {%- endcall -%}\n\n    {% set migrate_seed_executions %}\n        insert into {{new_database}}.{{new_schema}}.seed_executions (\n            command_invocation_id,\n            compile_started_at,\n            materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            'seed',\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            seed_schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__seed_executions\n    {% endset %}\n\n    {{ log(\"Migrating seed_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_seed_executions }}\n    {%- endcall -%}\n\n    {% set migrate_exposures %}\n        insert into {{new_database}}.{{new_schema}}.exposures (\n            command_invocation_id,\n            depends_on_nodes,\n            description,\n            maturity,\n            name,\n            node_id,\n            owner,\n            package_name,\n            path,\n            type,\n            url,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            array_agg(output_feeds), {#- Here we un-flatten the transformation originally done -#}\n            null,\n            any_value(maturity) as maturity,\n            name,\n            node_id,\n            null, {#- v0 is a string, v1 is a variant -#}\n            any_value(package_name) as package_name,\n            null,\n            any_value(type) as type,\n            null,\n            any_value(artifact_generated_at) as artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__exposures\n        group by command_invocation_id, node_id, name, artifact_generated_at\n    {% endset %}\n\n    {{ log(\"Migrating exposures\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_exposures }}\n    {%- endcall -%}\n\n    {% set migrate_snapshots %}\n        insert into {{new_database}}.{{new_schema}}.snapshots (\n            checksum,\n            command_invocation_id,\n            database,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            path,\n            schema,\n            strategy,\n            run_started_at\n        )\n        select\n            checksum,\n            command_invocation_id,\n            snapshot_database,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            snapshot_path,\n            snapshot_schema,\n            null,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__snapshots\n    {% endset %}\n\n    {{ log(\"Migrating snapshots\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_snapshots }}\n    {%- endcall -%}\n\n    {% set migrate_snapshot_executions %}\n        insert into {{new_database}}.{{new_schema}}.snapshot_executions (\n            command_invocation_id,\n            compile_started_at,\n            materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            'snapshot',\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            snapshot_schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__snapshot_executions\n    {% endset %}\n\n    {{ log(\"Migrating snapshot_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_snapshot_executions }}\n    {%- endcall -%}\n\n    {% set migrate_sources %}\n        insert into {{new_database}}.{{new_schema}}.sources (\n            command_invocation_id,\n            database,\n            freshness,\n            identifier,\n            loaded_at_field,\n            loader,\n            name,\n            node_id,\n            schema,\n            source_name,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            node_database,\n            parse_json('[{\"error_after\":{\"count\":null,\"period\":null},\"filter\":null,\"warn_after\":{\"count\":null,\"period\":null}}]'),\n            name,\n            null,\n            source_loader,\n            name,\n            node_id,\n            source_schema,\n            source_name,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__sources\n    {% endset %}\n\n    {{ log(\"Migrating sources\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_sources }}\n    {%- endcall -%}\n\n    {{ log(\"Migration complete. You can now safely delete any data from before 1.0.0\", info=True) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.4993687, "supported_languages": null}, "macro.dbt_artifacts.upload_snapshots": {"name": "upload_snapshots", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_snapshots.sql", "original_file_path": "macros/upload_snapshots.sql", "unique_id": "macro.dbt_artifacts.upload_snapshots", "macro_sql": "{% macro upload_snapshots(graph) -%}\n    {% set snapshots = [] %}\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"snapshot\") %}\n        {% do snapshots.append(node) %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_snapshots_dml_sql', 'dbt_artifacts')(snapshots)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_snapshots_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5058196, "supported_languages": null}, "macro.dbt_artifacts.default__get_snapshots_dml_sql": {"name": "default__get_snapshots_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_snapshots.sql", "original_file_path": "macros/upload_snapshots.sql", "unique_id": "macro.dbt_artifacts.default__get_snapshots_dml_sql", "macro_sql": "{% macro default__get_snapshots_dml_sql(snapshots) -%}\n\n    {% if snapshots != [] %}\n        {% set snapshot_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(7)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(14)) }}\n        from values\n        {% for snapshot in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ snapshot.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ snapshot.database }}', {# database #}\n                '{{ snapshot.schema }}', {# schema #}\n                '{{ snapshot.name }}', {# name #}\n                '{{ tojson(snapshot.depends_on.nodes) }}', {# depends_on_nodes #}\n                '{{ snapshot.package_name }}', {# package_name #}\n                '{{ snapshot.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ snapshot.checksum.checksum }}', {# checksum #}\n                '{{ snapshot.config.strategy }}', {# strategy #}\n                '{{ tojson(snapshot.config.meta) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}', {# meta #}\n                '{{ snapshot.alias }}', {# alias #}\n                '{{ tojson(snapshot) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.512375, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_snapshots_dml_sql": {"name": "bigquery__get_snapshots_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_snapshots.sql", "original_file_path": "macros/upload_snapshots.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_snapshots_dml_sql", "macro_sql": "{% macro bigquery__get_snapshots_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_values %}\n            {% for snapshot in snapshots -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ snapshot.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ snapshot.database }}', {# database #}\n                    '{{ snapshot.schema }}', {# schema #}\n                    '{{ snapshot.name }}', {# name #}\n                    {{ tojson(snapshot.depends_on.nodes) }}, {# depends_on_nodes #}\n                    '{{ snapshot.package_name }}', {# package_name #}\n                    '{{ snapshot.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    '{{ snapshot.checksum.checksum }}', {# checksum #}\n                    '{{ snapshot.config.strategy }}', {# strategy #}\n                    {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(snapshot.config.meta)) }}, {# meta #}\n                    '{{ snapshot.alias }}', {# alias #}\n                    {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(snapshot) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"')) }} {# all_results #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ snapshot_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5156057, "supported_languages": null}, "macro.dbt_artifacts.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.type_boolean", "macro_sql": "{% macro type_boolean() %}\n    {{ return(adapter.dispatch('type_boolean', 'dbt_artifacts')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5167434, "supported_languages": null}, "macro.dbt_artifacts.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.default__type_boolean", "macro_sql": "{% macro default__type_boolean() %}\n   {{ return(api.Column.translate_type(\"boolean\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.517156, "supported_languages": null}, "macro.dbt_artifacts.type_json": {"name": "type_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.type_json", "macro_sql": "{% macro type_json() %}\n    {{ return(adapter.dispatch('type_json', 'dbt_artifacts')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__type_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5176034, "supported_languages": null}, "macro.dbt_artifacts.default__type_json": {"name": "default__type_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.default__type_json", "macro_sql": "{% macro default__type_json() %}\n   {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5180242, "supported_languages": null}, "macro.dbt_artifacts.snowflake__type_json": {"name": "snowflake__type_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.snowflake__type_json", "macro_sql": "{% macro snowflake__type_json() %}\n   OBJECT\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5182354, "supported_languages": null}, "macro.dbt_artifacts.bigquery__type_json": {"name": "bigquery__type_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.bigquery__type_json", "macro_sql": "{% macro bigquery__type_json() %}\n   JSON\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5184371, "supported_languages": null}, "macro.dbt_artifacts.type_array": {"name": "type_array", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.type_array", "macro_sql": "{% macro type_array() %}\n    {{ return(adapter.dispatch('type_array', 'dbt_artifacts')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__type_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5188754, "supported_languages": null}, "macro.dbt_artifacts.default__type_array": {"name": "default__type_array", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.default__type_array", "macro_sql": "{% macro default__type_array() %}\n   {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5192802, "supported_languages": null}, "macro.dbt_artifacts.snowflake__type_array": {"name": "snowflake__type_array", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.snowflake__type_array", "macro_sql": "{% macro snowflake__type_array() %}\n   ARRAY\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5194902, "supported_languages": null}, "macro.dbt_artifacts.bigquery__type_array": {"name": "bigquery__type_array", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.bigquery__type_array", "macro_sql": "{% macro bigquery__type_array() %}\n   ARRAY<string>\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5196934, "supported_languages": null}, "macro.dbt_artifacts.column_identifier": {"name": "column_identifier", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "unique_id": "macro.dbt_artifacts.column_identifier", "macro_sql": "{% macro column_identifier(column_index) -%}\n  {{ return(adapter.dispatch('column_identifier')(column_index)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.520455, "supported_languages": null}, "macro.dbt_artifacts.default__column_identifier": {"name": "default__column_identifier", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "unique_id": "macro.dbt_artifacts.default__column_identifier", "macro_sql": "{% macro default__column_identifier(column_index) -%}\n    {{ column_index }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5207253, "supported_languages": null}, "macro.dbt_artifacts.snowflake__column_identifier": {"name": "snowflake__column_identifier", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "unique_id": "macro.dbt_artifacts.snowflake__column_identifier", "macro_sql": "{% macro snowflake__column_identifier(column_index) -%}\n    ${{ column_index }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.520995, "supported_languages": null}, "macro.dbt_artifacts.spark__column_identifier": {"name": "spark__column_identifier", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "unique_id": "macro.dbt_artifacts.spark__column_identifier", "macro_sql": "{% macro spark__column_identifier(column_index) -%}\n    col{{ column_index }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5212636, "supported_languages": null}, "macro.dbt_artifacts.upload_seeds": {"name": "upload_seeds", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_seeds.sql", "original_file_path": "macros/upload_seeds.sql", "unique_id": "macro.dbt_artifacts.upload_seeds", "macro_sql": "{% macro upload_seeds(graph) -%}\n    {% set seeds = [] %}\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"seed\") %}\n        {% do seeds.append(node) %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_seeds_dml_sql', 'dbt_artifacts')(seeds)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_seeds_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.52676, "supported_languages": null}, "macro.dbt_artifacts.default__get_seeds_dml_sql": {"name": "default__get_seeds_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_seeds.sql", "original_file_path": "macros/upload_seeds.sql", "unique_id": "macro.dbt_artifacts.default__get_seeds_dml_sql", "macro_sql": "{% macro default__get_seeds_dml_sql(seeds) -%}\n\n    {% if seeds != [] %}\n        {% set seed_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(10)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }}\n        from values\n        {% for seed in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ seed.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ seed.database }}', {# database #}\n                '{{ seed.schema }}', {# schema #}\n                '{{ seed.name }}', {# name #}\n                '{{ seed.package_name }}', {# package_name #}\n                '{{ seed.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ seed.checksum.checksum }}', {# checksum #}\n                '{{ tojson(seed.config.meta) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}', {# meta #}\n                '{{ seed.alias }}', {# alias #}\n                '{{ tojson(seed) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5326827, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_seeds_dml_sql": {"name": "bigquery__get_seeds_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_seeds.sql", "original_file_path": "macros/upload_seeds.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_seeds_dml_sql", "macro_sql": "{% macro bigquery__get_seeds_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_values %}\n            {% for seed in seeds -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ seed.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ seed.database }}', {# database #}\n                    '{{ seed.schema }}', {# schema #}\n                    '{{ seed.name }}', {# name #}\n                    '{{ seed.package_name }}', {# package_name #}\n                    '{{ seed.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    '{{ seed.checksum.checksum }}', {# checksum #}\n                    {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(seed.config.meta)) }}, {# meta #}\n                    '{{ seed.alias }}', {# alias #}\n                    {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(seed) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"')) }} {# all_results #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ seed_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5356364, "supported_languages": null}, "macro.dbt_artifacts.upload_exposures": {"name": "upload_exposures", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_exposures.sql", "original_file_path": "macros/upload_exposures.sql", "unique_id": "macro.dbt_artifacts.upload_exposures", "macro_sql": "{% macro upload_exposures(graph) -%}\n    {% set exposures = [] %}\n    {% for node in graph.exposures.values() %}\n        {% do exposures.append(node) %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_exposures_dml_sql', 'dbt_artifacts')(exposures)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_exposures_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5420473, "supported_languages": null}, "macro.dbt_artifacts.default__get_exposures_dml_sql": {"name": "default__get_exposures_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_exposures.sql", "original_file_path": "macros/upload_exposures.sql", "unique_id": "macro.dbt_artifacts.default__get_exposures_dml_sql", "macro_sql": "{% macro default__get_exposures_dml_sql(exposures) -%}\n\n    {% if exposures != [] %}\n        {% set exposure_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(6)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(13)) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(14)) }}\n        from values\n        {% for exposure in exposures -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ exposure.unique_id | replace(\"'\",\"\\\\'\") }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ exposure.name | replace(\"'\",\"\\\\'\") }}', {# name #}\n                '{{ exposure.type }}', {# type #}\n                '{{ tojson(exposure.owner) }}', {# owner #}\n                '{{ exposure.maturity }}', {# maturity #}\n                '{{ exposure.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ exposure.description | replace(\"'\",\"\\\\'\") }}', {# description #}\n                '{{ exposure.url }}', {# url #}\n                '{{ exposure.package_name }}', {# package_name #}\n                '{{ tojson(exposure.depends_on.nodes) }}', {# depends_on_nodes #}\n                '{{ tojson(exposure.tags) }}', {# tags #}\n                '{{ tojson(exposure) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ exposure_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5486987, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_exposures_dml_sql": {"name": "bigquery__get_exposures_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_exposures.sql", "original_file_path": "macros/upload_exposures.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_exposures_dml_sql", "macro_sql": "{% macro bigquery__get_exposures_dml_sql(exposures) -%}\n    {% if exposures != [] %}\n        {% set exposure_values %}\n            {% for exposure in exposures -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ exposure.unique_id | replace(\"'\",\"\\\\'\") }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ exposure.name | replace(\"'\",\"\\\\'\") }}', {# name #}\n                    '{{ exposure.type }}', {# type #}\n                    {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(exposure.owner) | replace(\"'\",\"\\\\'\")) }}, {# owner #}\n                    '{{ exposure.maturity }}', {# maturity #}\n                    '{{ exposure.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    \"\"\"{{ exposure.description | replace(\"'\",\"\\\\'\") }}\"\"\", {# description #}\n                    '{{ exposure.url }}', {# url #}\n                    '{{ exposure.package_name }}', {# package_name #}\n                    {{ tojson(exposure.depends_on.nodes) }}, {# depends_on_nodes #}\n                    {{ tojson(exposure.tags) }}, {# tags #}\n                    {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(exposure) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"')) }} {# all_results #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ exposure_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5523515, "supported_languages": null}, "macro.dbt_artifacts.upload_snapshot_executions": {"name": "upload_snapshot_executions", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "unique_id": "macro.dbt_artifacts.upload_snapshot_executions", "macro_sql": "{% macro upload_snapshot_executions(results) -%}\n    {% set snapshots = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"snapshot\" %}\n            {% do snapshots.append(result) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_snapshot_executions_dml_sql', 'dbt_artifacts')(snapshots)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.563013, "supported_languages": null}, "macro.dbt_artifacts.default__get_snapshot_executions_dml_sql": {"name": "default__get_snapshot_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "unique_id": "macro.dbt_artifacts.default__get_snapshot_executions_dml_sql", "macro_sql": "{% macro default__get_snapshot_executions_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n        from values\n        {% for model in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Only available in Snowflake #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5714576, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_snapshot_executions_dml_sql": {"name": "bigquery__get_snapshot_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_snapshot_executions_dml_sql", "macro_sql": "{% macro bigquery__get_snapshot_executions_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_execution_values %}\n        {% for model in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                {{ config_full_refresh }}, {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Databricks #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') | replace(\"\\n\", \"\\\\n\") }}', {# message #}\n                {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"')) }} {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5767376, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql": {"name": "snowflake__get_snapshot_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "unique_id": "macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql", "macro_sql": "{% macro snowflake__get_snapshot_executions_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n        from values\n        {% for model in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5852413, "supported_languages": null}, "macro.dbt_artifacts.upload_tests": {"name": "upload_tests", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_tests.sql", "original_file_path": "macros/upload_tests.sql", "unique_id": "macro.dbt_artifacts.upload_tests", "macro_sql": "{% macro upload_tests(tests) -%}\n    {{ return(adapter.dispatch('get_tests_dml_sql', 'dbt_artifacts')(tests)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_tests_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.588715, "supported_languages": null}, "macro.dbt_artifacts.default__get_tests_dml_sql": {"name": "default__get_tests_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_tests.sql", "original_file_path": "macros/upload_tests.sql", "unique_id": "macro.dbt_artifacts.default__get_tests_dml_sql", "macro_sql": "{% macro default__get_tests_dml_sql(tests) -%}\n\n    {% if tests != [] %}\n        {% set test_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(5)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(8)) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(9)) }}\n        from values\n        {% for test in tests -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ test.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ test.name }}', {# name #}\n                '{{ tojson(test.depends_on.nodes) }}', {# depends_on_nodes #}\n                '{{ test.package_name }}', {# package_name #}\n                '{{ test.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# test_path #}\n                '{{ tojson(test.tags) }}', {# tags #}\n                '{{ tojson(test) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_fields #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ test_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.593334, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_tests_dml_sql": {"name": "bigquery__get_tests_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_tests.sql", "original_file_path": "macros/upload_tests.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_tests_dml_sql", "macro_sql": "{% macro bigquery__get_tests_dml_sql(tests) -%}\n    {% if tests != [] %}\n        {% set test_values %}\n            {% for test in tests -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ test.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ test.name }}', {# name #}\n                    {{ tojson(test.depends_on.nodes) }}, {# depends_on_nodes #}\n                    '{{ test.package_name }}', {# package_name #}\n                    '{{ test.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# test_path #}\n                    {{ tojson(test.tags) }}, {# tags #}\n                    {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(test) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"')) }} {# all_fields #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ test_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5958843, "supported_languages": null}, "macro.dbt_artifacts.parse_json": {"name": "parse_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "unique_id": "macro.dbt_artifacts.parse_json", "macro_sql": "{% macro parse_json(field) -%}\n  {{ return(adapter.dispatch('parse_json')(field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.596682, "supported_languages": null}, "macro.dbt_artifacts.default__parse_json": {"name": "default__parse_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "unique_id": "macro.dbt_artifacts.default__parse_json", "macro_sql": "{% macro default__parse_json(field) -%}\n    {{ field }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5969486, "supported_languages": null}, "macro.dbt_artifacts.snowflake__parse_json": {"name": "snowflake__parse_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "unique_id": "macro.dbt_artifacts.snowflake__parse_json", "macro_sql": "{% macro snowflake__parse_json(field) -%}\n    parse_json({{ field }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5972238, "supported_languages": null}, "macro.dbt_artifacts.bigquery__parse_json": {"name": "bigquery__parse_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "unique_id": "macro.dbt_artifacts.bigquery__parse_json", "macro_sql": "{% macro bigquery__parse_json(field) -%}\n    safe.parse_json(\"\"\"{{ field }}\"\"\", wide_number_mode=>'round')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.5975063, "supported_languages": null}, "macro.dbt_artifacts.upload_model_executions": {"name": "upload_model_executions", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "unique_id": "macro.dbt_artifacts.upload_model_executions", "macro_sql": "{% macro upload_model_executions(results) -%}\n    {% set models = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"model\" %}\n            {% do models.append(result) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_model_executions_dml_sql', 'dbt_artifacts')(models)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_model_executions_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.608042, "supported_languages": null}, "macro.dbt_artifacts.default__get_model_executions_dml_sql": {"name": "default__get_model_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "unique_id": "macro.dbt_artifacts.default__get_model_executions_dml_sql", "macro_sql": "{% macro default__get_model_executions_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n\n        from values\n        {% for model in models -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Only available in Snowflake & BigQuery #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.6164134, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_model_executions_dml_sql": {"name": "bigquery__get_model_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_model_executions_dml_sql", "macro_sql": "{% macro bigquery__get_model_executions_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_execution_values %}\n        {% for model in models -%}\n            (\n            '{{ invocation_id }}', {# command_invocation_id #}\n            '{{ model.node.unique_id }}', {# node_id #}\n            '{{ run_started_at }}', {# run_started_at #}\n\n            {% set config_full_refresh = model.node.config.full_refresh %}\n            {% if config_full_refresh is none %}\n                {% set config_full_refresh = flags.FULL_REFRESH %}\n            {% endif %}\n            {{ config_full_refresh }}, {# was_full_refresh #}\n\n            '{{ model.thread_id }}', {# thread_id #}\n            '{{ model.status }}', {# status #}\n\n            {% if model.timing != [] %}\n                {% for stage in model.timing if stage.name == \"compile\" %}\n                    {% if loop.length == 0 %}\n                        null, {# compile_started_at #}\n                    {% else %}\n                        '{{ stage.started_at }}', {# compile_started_at #}\n                    {% endif %}\n                {% endfor %}\n\n                {% for stage in model.timing if stage.name == \"execute\" %}\n                    {% if loop.length == 0 %}\n                        null, {# query_completed_at #}\n                    {% else %}\n                        '{{ stage.completed_at }}', {# query_completed_at #}\n                    {% endif %}\n                {% endfor %}\n            {% else %}\n                null, {# compile_started_at #}\n                null, {# query_completed_at #}\n            {% endif %}\n\n            {{ model.execution_time }}, {# total_node_runtime #}\n            safe_cast('{{ model.adapter_response.rows_affected }}' as int64),\n            safe_cast('{{ model.adapter_response.bytes_processed }}' as int64),\n            '{{ model.node.config.materialized }}', {# materialization #}\n            '{{ model.node.schema }}', {# schema #}\n            '{{ model.node.name }}', {# name #}\n            '{{ model.node.alias }}', {# alias #}\n            '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') | replace(\"\\n\", \"\\\\n\") }}', {# message #}\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"')) }} {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.6219156, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_model_executions_dml_sql": {"name": "snowflake__get_model_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "unique_id": "macro.dbt_artifacts.snowflake__get_model_executions_dml_sql", "macro_sql": "{% macro snowflake__get_model_executions_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n        from values\n        {% for model in models -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.6304038, "supported_languages": null}, "macro.dbt_artifacts.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/generate_surrogate_key.sql", "original_file_path": "macros/generate_surrogate_key.sql", "unique_id": "macro.dbt_artifacts.generate_surrogate_key", "macro_sql": "\n\n{%- macro generate_surrogate_key(field_list) -%}\n    {# Note - update the reference to `dbt_utils` to `dbt_artifacts` here #}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_artifacts')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.6314235, "supported_languages": null}, "macro.dbt_artifacts.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/generate_surrogate_key.sql", "original_file_path": "macros/generate_surrogate_key.sql", "unique_id": "macro.dbt_artifacts.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{# Note - Removed this logic to retain consistency with the previous surrogate_key logic #}\n{# {%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%} #}\n{%- set default_null_value = \"\" -%}\n{# {%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%} #}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.6328673, "supported_languages": null}, "macro.dbt_artifacts.upload_models": {"name": "upload_models", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_models.sql", "original_file_path": "macros/upload_models.sql", "unique_id": "macro.dbt_artifacts.upload_models", "macro_sql": "{% macro upload_models(models) -%}\n    {{ return(adapter.dispatch('get_models_dml_sql', 'dbt_artifacts')(models)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_models_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.6389697, "supported_languages": null}, "macro.dbt_artifacts.default__get_models_dml_sql": {"name": "default__get_models_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_models.sql", "original_file_path": "macros/upload_models.sql", "unique_id": "macro.dbt_artifacts.default__get_models_dml_sql", "macro_sql": "{% macro default__get_models_dml_sql(models) -%}\n\n    {% if models != [] %}\n        {% set model_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(7)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(13)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(15)) }}\n        from values\n        {% for model in models -%}\n                {% do model.pop('raw_code', None) %}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ model.database }}', {# database #}\n                '{{ model.schema }}', {# schema #}\n                '{{ model.name }}', {# name #}\n                '{{ tojson(model.depends_on.nodes) | replace('\\\\', '\\\\\\\\') }}', {# depends_on_nodes #}\n                '{{ model.package_name }}', {# package_name #}\n                '{{ model.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ model.checksum.checksum }}', {# checksum #}\n                '{{ model.config.materialized }}', {# materialization #}\n                '{{ tojson(model.tags) }}', {# tags #}\n                '{{ tojson(model.config.meta) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}', {# meta #}\n                '{{ model.alias }}', {# alias #}\n                '{{ tojson(model) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.6462493, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_models_dml_sql": {"name": "bigquery__get_models_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_models.sql", "original_file_path": "macros/upload_models.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_models_dml_sql", "macro_sql": "{% macro bigquery__get_models_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_values %}\n            {% for model in models -%}\n                {% do model.pop('raw_code', None) %}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ model.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ model.database }}', {# database #}\n                    '{{ model.schema }}', {# schema #}\n                    '{{ model.name }}', {# name #}\n                    {{ tojson(model.depends_on.nodes) }}, {# depends_on_nodes #}\n                    '{{ model.package_name }}', {# package_name #}\n                    '{{ model.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    '{{ model.checksum.checksum }}', {# checksum #}\n                    '{{ model.config.materialized }}', {# materialization #}\n                    {{ tojson(model.tags) }}, {# tags #}\n                    {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(model.config.meta)) }}, {# meta #}\n                    '{{ model.alias }}', {# alias #}\n                    {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(model) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"')) }} {# all_results #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ model_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.6497838, "supported_languages": null}, "macro.dbt_artifacts.upload_sources": {"name": "upload_sources", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_sources.sql", "original_file_path": "macros/upload_sources.sql", "unique_id": "macro.dbt_artifacts.upload_sources", "macro_sql": "{% macro upload_sources(sources) -%}\n    {{ return(adapter.dispatch('get_sources_dml_sql', 'dbt_artifacts')(sources)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_sources_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.6543393, "supported_languages": null}, "macro.dbt_artifacts.default__get_sources_dml_sql": {"name": "default__get_sources_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_sources.sql", "original_file_path": "macros/upload_sources.sql", "unique_id": "macro.dbt_artifacts.default__get_sources_dml_sql", "macro_sql": "{% macro default__get_sources_dml_sql(sources) -%}\n\n    {% if sources != [] %}\n        {% set source_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(11)) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }}\n        from values\n        {% for source in sources -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ source.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ source.database }}', {# database #}\n                '{{ source.schema }}', {# schema #}\n                '{{ source.source_name }}', {# source_name #}\n                '{{ source.loader }}', {# loader #}\n                '{{ source.name }}', {# name #}\n                '{{ source.identifier }}', {# identifier #}\n                '{{ source.loaded_at_field | replace(\"'\",\"\\\\'\") }}', {# loaded_at_field #}\n                '{{ tojson(source.freshness) | replace(\"'\",\"\\\\'\") }}', {# freshness #}\n                '{{ tojson(source) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ source_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.6596425, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_sources_dml_sql": {"name": "bigquery__get_sources_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_sources.sql", "original_file_path": "macros/upload_sources.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_sources_dml_sql", "macro_sql": "{% macro bigquery__get_sources_dml_sql(sources) -%}\n    {% if sources != [] %}\n        {% set source_values %}\n            {% for source in sources -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ source.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ source.database }}', {# database #}\n                    '{{ source.schema }}', {# schema #}\n                    '{{ source.source_name }}', {# source_name #}\n                    '{{ source.loader }}', {# loader #}\n                    '{{ source.name }}', {# name #}\n                    '{{ source.identifier }}', {# identifier #}\n                    '{{ source.loaded_at_field | replace(\"'\",\"\\\\'\") }}', {# loaded_at_field #}\n                    {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(source.freshness) | replace(\"'\",\"\\\\'\")) }},  {# freshness #}\n                    {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(source) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"')) }} {# all_results #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ source_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.662909, "supported_languages": null}, "macro.dbt_artifacts.upload_seed_executions": {"name": "upload_seed_executions", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "unique_id": "macro.dbt_artifacts.upload_seed_executions", "macro_sql": "{% macro upload_seed_executions(results) -%}\n    {% set seeds = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"seed\" %}\n            {% do seeds.append(result) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_seed_executions_dml_sql', 'dbt_artifacts')(seeds)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.6735194, "supported_languages": null}, "macro.dbt_artifacts.default__get_seed_executions_dml_sql": {"name": "default__get_seed_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "unique_id": "macro.dbt_artifacts.default__get_seed_executions_dml_sql", "macro_sql": "{% macro default__get_seed_executions_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n        from values\n        {% for model in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Only available in Snowflake #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.6818442, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_seed_executions_dml_sql": {"name": "bigquery__get_seed_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_seed_executions_dml_sql", "macro_sql": "{% macro bigquery__get_seed_executions_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_execution_values %}\n        {% for model in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                {{ config_full_refresh }}, {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Databricks #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') | replace(\"\\n\", \"\\\\n\") }}', {# message #}\n                {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"')) }} {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.6870515, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql": {"name": "snowflake__get_seed_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "unique_id": "macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql", "macro_sql": "{% macro snowflake__get_seed_executions_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n        from values\n        {% for model in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.6954997, "supported_languages": null}, "macro.dbt_artifacts.upload_test_executions": {"name": "upload_test_executions", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_test_executions.sql", "original_file_path": "macros/upload_test_executions.sql", "unique_id": "macro.dbt_artifacts.upload_test_executions", "macro_sql": "{% macro upload_test_executions(results) -%}\n    {% set tests = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"test\" %}\n            {% do tests.append(result) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_test_executions_dml_sql', 'dbt_artifacts')(tests)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_test_executions_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.7014947, "supported_languages": null}, "macro.dbt_artifacts.default__get_test_executions_dml_sql": {"name": "default__get_test_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_test_executions.sql", "original_file_path": "macros/upload_test_executions.sql", "unique_id": "macro.dbt_artifacts.default__get_test_executions_dml_sql", "macro_sql": "{% macro default__get_test_executions_dml_sql(tests) -%}\n    {% if tests != [] %}\n        {% set test_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(13)) }}\n        from values\n        {% for test in tests -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ test.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = test.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ test.thread_id }}', {# thread_id #}\n                '{{ test.status }}', {# status #}\n\n                {% if test.timing != [] %}\n                    {% for stage in test.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in test.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ test.execution_time }}, {# total_node_runtime #}\n                null, {# rows_affected not available in Databricks #}\n                {{ 'null' if test.failures is none else test.failures }}, {# failures #}\n                '{{ test.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(test.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ test_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.7090087, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_test_executions_dml_sql": {"name": "bigquery__get_test_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_test_executions.sql", "original_file_path": "macros/upload_test_executions.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_test_executions_dml_sql", "macro_sql": "{% macro bigquery__get_test_executions_dml_sql(tests) -%}\n    {% if tests != [] %}\n        {% set test_execution_values %}\n        {% for test in tests -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ test.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = test.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                {{ config_full_refresh }}, {# was_full_refresh #}\n\n                '{{ test.thread_id }}', {# thread_id #}\n                '{{ test.status }}', {# status #}\n\n                {% if test.timing != [] %}\n                    {% for stage in test.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in test.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ test.execution_time }}, {# total_node_runtime #}\n                null, {# rows_affected not available in Databricks #}\n                {{ 'null' if test.failures is none else test.failures }}, {# failures #}\n                '{{ test.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') | replace(\"\\n\", \"\\\\n\") }}', {# message #}\n                {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(test.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"')) }} {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n\n        {%- endfor %}\n        {% endset %}\n        {{ test_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.71401, "supported_languages": null}, "macro.dbt_artifacts.get_relation": {"name": "get_relation", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results.sql", "original_file_path": "macros/upload_results.sql", "unique_id": "macro.dbt_artifacts.get_relation", "macro_sql": "{% macro get_relation(get_relation_name) %}\n    {% if execute %}\n        {% set model_get_relation_node = graph.nodes.values() | selectattr('name', 'equalto', get_relation_name) | first %}\n        {% set relation = api.Relation.create(\n            database = model_get_relation_node.database,\n            schema = model_get_relation_node.schema,\n            identifier = model_get_relation_node.alias\n        )\n        %}\n        {% do return(relation) %}\n    {% else %}\n        {% do return(api.Relation.create()) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.7221208, "supported_languages": null}, "macro.dbt_artifacts.upload_results": {"name": "upload_results", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results.sql", "original_file_path": "macros/upload_results.sql", "unique_id": "macro.dbt_artifacts.upload_results", "macro_sql": "{% macro upload_results(results) -%}\n\n    {% if execute %}\n\n        {% if results != [] %}\n            {% do log(\"Uploading model executions\", true) %}\n            {% set model_executions = dbt_artifacts.get_relation('model_executions') %}\n            {% set content_model_executions = dbt_artifacts.upload_model_executions(results) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=model_executions.database,\n                schema_name=model_executions.schema,\n                table_name=model_executions.identifier,\n                content=content_model_executions\n                )\n            }}\n\n            {% do log(\"Uploading seed executions\", true) %}\n            {% set seed_executions = dbt_artifacts.get_relation('seed_executions') %}\n            {% set content_seed_executions = dbt_artifacts.upload_seed_executions(results) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=seed_executions.database,\n                schema_name=seed_executions.schema,\n                table_name=seed_executions.identifier,\n                content=content_seed_executions\n                )\n            }}\n\n            {% do log(\"Uploading snapshot executions\", true) %}\n            {% set snapshot_executions = dbt_artifacts.get_relation('snapshot_executions') %}\n            {% set content_snapshot_executions = dbt_artifacts.upload_snapshot_executions(results) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=snapshot_executions.database,\n                schema_name=snapshot_executions.schema,\n                table_name=snapshot_executions.identifier,\n                content=content_snapshot_executions\n                )\n            }}\n\n            {% do log(\"Uploading test executions\", true) %}\n            {% set test_executions = dbt_artifacts.get_relation('test_executions') %}\n            {% set content_test_executions = dbt_artifacts.upload_test_executions(results) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=test_executions.database,\n                schema_name=test_executions.schema,\n                table_name=test_executions.identifier,\n                content=content_test_executions\n                )\n            }}\n\n        {% endif %}\n\n        {% do log(\"Uploading exposures\", true) %}\n        {% set exposures = dbt_artifacts.get_relation('exposures') %}\n        {% set content_exposures = dbt_artifacts.upload_exposures(graph) %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=exposures.database,\n            schema_name=exposures.schema,\n            table_name=exposures.identifier,\n            content=content_exposures\n            )\n        }}\n\n        {% do log(\"Uploading tests\", true) %}\n        {% set tests = dbt_artifacts.get_relation('tests') %}\n        {% set tests_set = [] %}\n        {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"test\") %}\n            {% do tests_set.append(node) %}\n        {% endfor %}\n        {# upload tests in chunks of 5000 tests (300 for BigQuery), or less #}\n        {% set upload_limit = 300 if target.type == 'bigquery' else 5000 %}\n        {% for i in range(0, tests_set | length, upload_limit) -%}\n            {% set content_tests = dbt_artifacts.upload_tests(tests_set[i: i + upload_limit]) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=tests.database,\n                schema_name=tests.schema,\n                table_name=tests.identifier,\n                content=content_tests\n                )\n            }}\n        {%- endfor %}\n\n        {% do log(\"Uploading seeds\", true) %}\n        {% set seeds = dbt_artifacts.get_relation('seeds') %}\n        {% set content_seeds = dbt_artifacts.upload_seeds(graph) %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=seeds.database,\n            schema_name=seeds.schema,\n            table_name=seeds.identifier,\n            content=content_seeds\n            )\n        }}\n\n        {% do log(\"Uploading models\", true) %}\n        {% set models = dbt_artifacts.get_relation('models') %}\n        {% set models_set = [] %}\n        {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"model\") %}\n            {% do models_set.append(node) %}\n        {% endfor %}\n        {% set upload_limit = 50 if target.type == 'bigquery' else 100 %}\n        {% for i in range(0, models_set | length, upload_limit) -%}\n            {% set content_models = dbt_artifacts.upload_models(models_set[i: i + upload_limit]) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=models.database,\n                schema_name=models.schema,\n                table_name=models.identifier,\n                content=content_models\n                )\n            }}\n        {%- endfor %}\n\n        {% do log(\"Uploading sources\", true) %}\n        {% set sources = dbt_artifacts.get_relation('sources') %}\n        {% set sources_set = [] %}\n        {% for node in graph.sources.values() %}\n            {% do sources_set.append(node) %}\n        {% endfor %}\n        {# upload sources in chunks of 5000 sources (300 for BigQuery), or less #}\n        {% set upload_limit = 300 if target.type == 'bigquery' else 5000 %}\n        {% for i in range(0, sources_set | length, upload_limit) -%}\n            {% set content_sources = dbt_artifacts.upload_sources(sources_set[i: i + upload_limit]) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=sources.database,\n                schema_name=sources.schema,\n                table_name=sources.identifier,\n                content=content_sources\n                )\n            }}\n        {%- endfor %}\n\n        {% do log(\"Uploading snapshots\", true) %}\n        {% set snapshots = dbt_artifacts.get_relation('snapshots') %}\n        {% set content_snapshots = dbt_artifacts.upload_snapshots(graph) %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=snapshots.database,\n            schema_name=snapshots.schema,\n            table_name=snapshots.identifier,\n            content=content_snapshots\n            )\n        }}\n\n        {% do log(\"Uploading invocations\", true) %}\n        {% set invocations = dbt_artifacts.get_relation('invocations') %}\n        {% set content_invocations = dbt_artifacts.upload_invocations() %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=invocations.database,\n            schema_name=invocations.schema,\n            table_name=invocations.identifier,\n            content=content_invocations\n            )\n        }}\n\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.get_relation", "macro.dbt_artifacts.upload_model_executions", "macro.dbt_artifacts.insert_into_metadata_table", "macro.dbt_artifacts.upload_seed_executions", "macro.dbt_artifacts.upload_snapshot_executions", "macro.dbt_artifacts.upload_test_executions", "macro.dbt_artifacts.upload_exposures", "macro.dbt_artifacts.upload_tests", "macro.dbt_artifacts.upload_seeds", "macro.dbt_artifacts.upload_models", "macro.dbt_artifacts.upload_sources", "macro.dbt_artifacts.upload_snapshots", "macro.dbt_artifacts.upload_invocations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.736364, "supported_languages": null}, "macro.dbt_artifacts.upload_invocations": {"name": "upload_invocations", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_invocations.sql", "original_file_path": "macros/upload_invocations.sql", "unique_id": "macro.dbt_artifacts.upload_invocations", "macro_sql": "{% macro upload_invocations() -%}\n\n    {# Need to remove keys with results that can't be handled properly #}\n    {# warn_error_options - returns a python object in 1.5 #}\n    {% if 'warn_error_options' in invocation_args_dict %}\n        {% if invocation_args_dict.warn_error_options is not string %}\n            {% if invocation_args_dict.warn_error_options.include %}\n                {% set include_options = invocation_args_dict.warn_error_options.include %}\n            {% else %}\n                {% set include_options = '' %}\n            {% endif %}\n            {% if invocation_args_dict.warn_error_options.exclude %}\n                {% set exclude_options = invocation_args_dict.warn_error_options.exclude %}\n            {% else %}\n                {% set exclude_options = '' %}\n            {% endif %}\n            {% set warn_error_options = {'include': include_options, 'exclude': exclude_options} %}\n            {%- do invocation_args_dict.update({'warn_error_options': warn_error_options}) %}\n        {% endif %}\n    {% endif %}\n\n    {{ return(adapter.dispatch('get_invocations_dml_sql', 'dbt_artifacts')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_invocations_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.7471004, "supported_languages": null}, "macro.dbt_artifacts.default__get_invocations_dml_sql": {"name": "default__get_invocations_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_invocations.sql", "original_file_path": "macros/upload_invocations.sql", "unique_id": "macro.dbt_artifacts.default__get_invocations_dml_sql", "macro_sql": "{% macro default__get_invocations_dml_sql() -%}\n    {% set invocation_values %}\n    select\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }}, ''),\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }},\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(17)) }},\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(18)) }},\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(19)) }}\n    from values\n    (\n        '{{ invocation_id }}', {# command_invocation_id #}\n        '{{ dbt_version }}', {# dbt_version #}\n        '{{ project_name }}', {# project_name #}\n        '{{ run_started_at }}', {# run_started_at #}\n        '{{ flags.WHICH }}', {# dbt_command #}\n        '{{ flags.FULL_REFRESH }}', {# full_refresh_flag #}\n        '{{ target.profile_name }}', {# target_profile_name #}\n        '{{ target.name }}', {# target_name #}\n        '{{ target.schema }}', {# target_schema #}\n        {{ target.threads }}, {# target_threads #}\n\n        '{{ env_var('DBT_CLOUD_PROJECT_ID', '') }}', {# dbt_cloud_project_id #}\n        '{{ env_var('DBT_CLOUD_JOB_ID', '') }}', {# dbt_cloud_job_id #}\n        '{{ env_var('DBT_CLOUD_RUN_ID', '') }}', {# dbt_cloud_run_id #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON_CATEGORY', '') }}', {# dbt_cloud_run_reason_category #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON', '') | replace(\"'\",\"\\\\'\") }}', {# dbt_cloud_run_reason #}\n\n        {% if var('env_vars', none) %}\n            {% set env_vars_dict = {} %}\n            {% for env_variable in var('env_vars') %}\n                {% do env_vars_dict.update({env_variable: (env_var(env_variable, '') | replace(\"'\", \"''\"))}) %}\n            {% endfor %}\n            '{{ tojson(env_vars_dict) }}', {# env_vars #}\n        {% else %}\n            null, {# env_vars #}\n        {% endif %}\n\n        {% if var('dbt_vars', none) %}\n            {% set dbt_vars_dict = {} %}\n            {% for dbt_var in var('dbt_vars') %}\n                {% do dbt_vars_dict.update({dbt_var: (var(dbt_var, '') | replace(\"'\", \"''\"))}) %}\n            {% endfor %}\n            '{{ tojson(dbt_vars_dict) }}', {# dbt_vars #}\n        {% else %}\n            null, {# dbt_vars #}\n        {% endif %}\n\n        '{{ tojson(invocation_args_dict) | replace('\\\\', '\\\\\\\\') | replace(\"'\", \"\\\\'\") }}', {# invocation_args #}\n\n        {% set metadata_env = {} %}\n        {% for key, value in dbt_metadata_envs.items() %}\n            {% do metadata_env.update({key: (value | replace(\"'\", \"''\"))}) %}\n        {% endfor %}\n        '{{ tojson(metadata_env) | replace('\\\\', '\\\\\\\\') }}' {# dbt_custom_envs #}\n\n    )\n    {% endset %}\n    {{ invocation_values }}\n\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.7572787, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_invocations_dml_sql": {"name": "bigquery__get_invocations_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_invocations.sql", "original_file_path": "macros/upload_invocations.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_invocations_dml_sql", "macro_sql": "{% macro bigquery__get_invocations_dml_sql() -%}\n    {% set invocation_values %}\n        (\n        '{{ invocation_id }}', {# command_invocation_id #}\n        '{{ dbt_version }}', {# dbt_version #}\n        '{{ project_name }}', {# project_name #}\n        '{{ run_started_at }}', {# run_started_at #}\n        '{{ flags.WHICH }}', {# dbt_command #}\n        {{ flags.FULL_REFRESH }}, {# full_refresh_flag #}\n        '{{ target.profile_name }}', {# target_profile_name #}\n        '{{ target.name }}', {# target_name #}\n        '{{ target.schema }}', {# target_schema #}\n        {{ target.threads }}, {# target_threads #}\n\n        '{{ env_var('DBT_CLOUD_PROJECT_ID', '') }}', {# dbt_cloud_project_id #}\n        '{{ env_var('DBT_CLOUD_JOB_ID', '') }}', {# dbt_cloud_job_id #}\n        '{{ env_var('DBT_CLOUD_RUN_ID', '') }}', {# dbt_cloud_run_id #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON_CATEGORY', '') }}', {# dbt_cloud_run_reason_category #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON', '') | replace(\"'\",\"\\\\'\") }}', {# dbt_cloud_run_reason #}\n\n        {% if var('env_vars', none) %}\n            {% set env_vars_dict = {} %}\n            {% for env_variable in var('env_vars') %}\n                {% do env_vars_dict.update({env_variable: (env_var(env_variable, ''))}) %}\n            {% endfor %}\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(env_vars_dict)) }}, {# env_vars #}\n        {% else %}\n            null, {# env_vars #}\n        {% endif %}\n\n        {% if var('dbt_vars', none) %}\n            {% set dbt_vars_dict = {} %}\n            {% for dbt_var in var('dbt_vars') %}\n                {% do dbt_vars_dict.update({dbt_var: (var(dbt_var, ''))}) %}\n            {% endfor %}\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(dbt_vars_dict)) }}, {# dbt_vars #}\n        {% else %}\n            null, {# dbt_vars #}\n        {% endif %}\n\n        {% if invocation_args_dict.vars %}\n            {# vars - different format for pre v1.5 (yaml vs list) #}\n            {% if invocation_args_dict.vars is string %}\n                {# BigQuery does not handle the yaml-string from \"--vars\" well, when passed to \"parse_json\". Workaround is to parse the string, and then \"tojson\" will properly format the dict as a json-object. #}\n                {% set parsed_inv_args_vars = fromyaml(invocation_args_dict.vars) %}\n                {% do invocation_args_dict.update({'vars': parsed_inv_args_vars}) %}\n            {% endif %}\n        {% endif %}\n\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(invocation_args_dict) | replace(\"'\", \"\\\\'\")) }}, {# invocation_args #}\n\n        {% set metadata_env = {} %}\n        {% for key, value in dbt_metadata_envs.items() %}\n            {% do metadata_env.update({key: value}) %}\n        {% endfor %}\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(metadata_env) | replace('\\\\', '\\\\\\\\')) }} {# dbt_custom_envs #}\n\n        )\n    {% endset %}\n    {{ invocation_values }}\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.7641156, "supported_languages": null}, "macro.dbt_artifacts.insert_into_metadata_table": {"name": "insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.insert_into_metadata_table", "macro_sql": "{% macro insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n    {% if content != \"\" %}\n        {{ return(adapter.dispatch('insert_into_metadata_table', 'dbt_artifacts')(database_name, schema_name, table_name, content)) }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__insert_into_metadata_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.766539, "supported_languages": null}, "macro.dbt_artifacts.spark__insert_into_metadata_table": {"name": "spark__insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.spark__insert_into_metadata_table", "macro_sql": "{% macro spark__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n    {% set insert_into_table_query %}\n    insert into {% if database_name %}{{ database_name }}.{% endif %}{{ schema_name }}.{{ table_name }}\n    {{ content }}\n    {% endset %}\n\n    {% do run_query(insert_into_table_query) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.7673893, "supported_languages": null}, "macro.dbt_artifacts.snowflake__insert_into_metadata_table": {"name": "snowflake__insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.snowflake__insert_into_metadata_table", "macro_sql": "{% macro snowflake__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n    {% set insert_into_table_query %}\n    insert into {{database_name}}.{{ schema_name }}.{{ table_name }}\n    {{ content }}\n    {% endset %}\n\n    {% do run_query(insert_into_table_query) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.7681377, "supported_languages": null}, "macro.dbt_artifacts.bigquery__insert_into_metadata_table": {"name": "bigquery__insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.bigquery__insert_into_metadata_table", "macro_sql": "{% macro bigquery__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n\n        {% set insert_into_table_query %}\n        insert into `{{database_name}}.{{ schema_name }}.{{ table_name }}`\n        VALUES\n        {{ content }}\n        {% endset %}\n\n        {% do run_query(insert_into_table_query) %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.7688735, "supported_languages": null}, "macro.dbt_artifacts.default__insert_into_metadata_table": {"name": "default__insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.default__insert_into_metadata_table", "macro_sql": "{% macro default__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.769169, "supported_languages": null}, "macro.codegen.generate_column_yaml": {"name": "generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, parent_column_name=\"\") %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column_name  | lower ) %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.7738657, "supported_languages": null}, "macro.codegen.generate_model_yaml": {"name": "generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False) %}\n\n    {% set model_yaml=[] %}\n\n    {% do model_yaml.append('version: 2') %}\n    {% do model_yaml.append('') %}\n    {% do model_yaml.append('models:') %}\n\n    {% if model_names is string %}\n        {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n    {% else %}\n        {% for model in model_names %}\n            {% do model_yaml.append('  - name: ' ~ model | lower) %}\n            {% do model_yaml.append('    description: \"\"') %}\n            {% do model_yaml.append('    columns:') %}\n\n            {% set relation=ref(model) %}\n            {%- set columns = adapter.get_columns_in_relation(relation) -%}\n            {% set column_desc_dict =  codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n            {% for column in columns %}\n                {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict) %}\n            {% endfor %}\n        {% endfor %}\n    {% endif %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.7773874, "supported_languages": null}, "macro.codegen.generate_base_model": {"name": "generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n    {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.7824297, "supported_languages": null}, "macro.codegen.get_tables_in_schema": {"name": "get_tables_in_schema", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.786938, "supported_languages": null}, "macro.codegen.generate_source": {"name": "generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, include_data_types=False, table_pattern='%', exclude='', name=schema_name, table_names=None, include_database=False, include_schema=False) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database or include_database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name or include_schema %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_data_types %}\n                {% do sources_yaml.append('            data_type: ' ~ (column.data_type | upper ) ) %}\n            {% endif %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.7935262, "supported_languages": null}, "macro.codegen.generate_model_import_ctes": {"name": "generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.generate_model_import_ctes", "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = false) %}\n\n    {%- if execute -%}\n    {%- set nodes = graph.nodes.values() -%}\n\n    {%- set model = (nodes\n        | selectattr('name', 'equalto', model_name) \n        | selectattr('resource_type', 'equalto', 'model')\n        | list).pop() -%}\n\n    {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n    {%- else -%}\n    {%- set model_raw_sql = '' -%}\n    {%- endif -%}\n\n    {#-\n\n        REGEX Explanations\n\n        # with_regex\n        - matches (start of file followed by anything then whitespace\n        or whitespace\n        or a comma) followed by the word with then a space   \n\n        # from_ref \n        - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n        # from_source \n        - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n        # from_var_1\n        - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n        # from_var_2\n        - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n        # from_table_1\n        - matches (from or join) followed by some spaces and then <something>.<something_else>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_2\n        - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_3\n        - matches (from or join) followed by some spaces and then <something>\n          where <something> is enclosed by (` or [ or \" or ')\n\n        # config block\n        - matches the start of the file followed by anything and then {{config(<something>)}}\n\n    -#}\n\n    {%- set re = modules.re -%}\n\n    {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n    {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n    {%- set from_regexes = {\n        'from_ref':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), ref, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)\n            \n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n        \n            ',\n        'from_source':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), source, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*source\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark\n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n\n            ',\n        'from_var_1':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n            \n            ',\n        'from_var_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n            \n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark            \n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)            \n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}            \n            (\\)\\s*}})\n            \n            ',\n        'from_table_1':\n            '(?ix)\n            \n            # first matching group\n            # from or join followed by at least 1 whitespace character            \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)\n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period\n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # seventh matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n\n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)            \n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period            \n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n\n            # seventh matching group\n            # at least 1 word character            \n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) \n            ([\\]`\\\"\\']?)\n            \n            # ninth matching group\n            # a period             \n            (\\.)\n            \n            # tenth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)             \n            ([\\[`\\\"\\']?)\n            \n            # eleventh matching group\n            # at least 1 word character   \n            (\\w+)\n\n            # twelfth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_3':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character             \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\'])\n            \n            # third matching group\n            # at least 1 word character or space \n            ([\\w ]+)\n\n            # fourth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\'])(?=\\s|$)\n            \n            ',\n        'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n    } -%}\n\n    {%- set from_list = [] -%}\n    {%- set config_list = [] -%}\n    {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n    {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n        {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n        {%- for match in all_regex_matches -%}\n\n            {%- if regex_name == 'config_block' -%}\n                {%- set match_tuple = (match|trim, regex_name) -%}\n                {%- do config_list.append(match_tuple) -%}\n            {%- elif regex_name == 'from_source' -%}    \n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = 'source_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%} \n            {%- elif regex_name == 'from_table_1' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}   \n            {%- elif regex_name == 'from_table_2' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}                     \n            {%- else -%}\n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = match[2]|trim|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n        {%- if regex_name == 'config_block' -%}\n        {%- elif regex_name == 'from_source' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%}            \n        {%- elif regex_name == 'from_table_1' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%}     \n        {%- elif regex_name == 'from_table_2' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n        {%- else -%}   \n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%}         \n        {% endif %}\n\n    {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n    {%- for config_obj in config_list -%}\n\n    {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n    {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n    select * from {{ from_obj[1] }}\n    {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n    -- CAUTION: It's best practice to create staging layer for raw sources\n    {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n    {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a var\n    {%- endif %}\n  \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n    {%- if leading_commas -%}\n        {%- set replace_with = '\\g<1>,' -%}\n    {%- else -%}\n        {%- set replace_with = '\\g<1>' -%}\n    {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ log(model_import_ctes, info=True) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.818543, "supported_languages": null}, "macro.codegen.create_base_models": {"name": "create_base_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/create_base_models.sql", "original_file_path": "macros/create_base_models.sql", "unique_id": "macro.codegen.create_base_models", "macro_sql": "{% macro create_base_models(source_name, tables) %}\n\n{% set source_name = \"\"~ source_name ~\"\" %}\n\n{% set zsh_command_models = \"source dbt_packages/codegen/bash_scripts/base_model_creation.sh \"\"\"~ source_name ~\"\"\" \" %}\n\n{%- set models_array = [] -%}\n\n{% for t in tables %}\n    {% set help_command = zsh_command_models + t %}\n    {{ models_array.append(help_command) }}\n{% endfor %}\n\n{{ log(\"Run these commands in your shell to generate the models:\\n\" ~ models_array|join(' && \\n'), info=True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8203356, "supported_languages": null}, "macro.codegen.get_model_dependencies": {"name": "get_model_dependencies", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8227837, "supported_languages": null}, "macro.codegen.add_model_column_descriptions_to_dict": {"name": "add_model_column_descriptions_to_dict", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8240488, "supported_languages": null}, "macro.codegen.build_dict_column_descriptions": {"name": "build_dict_column_descriptions", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8251889, "supported_languages": null}, "macro.codegen.get_models": {"name": "get_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_models", "macro_sql": "{% macro get_models(directory=None, prefix=None) %}\n    {% set model_names=[] %}\n    {% set models = graph.nodes.values() | selectattr('resource_type', \"equalto\", 'model') %}\n    {% if directory and prefix %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory and model.name.startswith(prefix) %}\n                {% do model_names.append(model.name) %}\n            {% endif %} \n        {% endfor %}\n    {% elif directory %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory %}\n                {% do model_names.append(model.name) %}\n            {% endif %}\n        {% endfor %}\n    {% elif prefix %}\n        {% for model in models if model.name.startswith(prefix) %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% else %}\n        {% for model in models %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% endif %}\n    {{ return(model_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8289216, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8309646, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.831682, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.832224, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8337827, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.834465, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8349037, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8355536, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8360333, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8371637, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8395116, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8435602, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8444483, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8453343, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8480551, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8522167, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8530228, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.853943, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.85495, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.855699, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8581035, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8603423, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.863579, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.864563, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.866471, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.867819, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8693578, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8709145, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8715382, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8725076, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8736835, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8758786, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8775253, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8781066, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8786376, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.879149, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8795996, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8800814, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8811824, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8830855, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.884042, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8855925, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8882084, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8920512, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8942268, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8949628, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8964348, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.8985767, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9044318, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.913362, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9151628, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9162745, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9167855, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9181638, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9197729, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9210312, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9215503, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9222858, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9229631, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.923703, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.924094, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9251938, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9268885, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9278152, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9292452, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9302037, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.930825, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.931923, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9323192, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9326906, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.933056, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9339712, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.935527, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.937069, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9392872, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9408107, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9430335, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9449944, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9473894, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.948858, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.950108, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9515724, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9524858, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.953929, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9560728, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9577234, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.960048, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.961295, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9622085, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9640481, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.967009, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9692285, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9718788, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9733694, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9754496, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.976623, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9774132, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9790554, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.981235, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.982329, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9835432, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9849687, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9866707, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9928727, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.997026, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9982994, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482186.9993165, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482187.0003276, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482187.0012844, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482187.0023518, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482187.0040646, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482187.0048718, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482187.0057142, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482187.0065606, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691482187.0077763, "supported_languages": null}}, "docs": {"doc.secret.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "secret", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.secret.__overview__", "block_contents": "# This is basically just a storage of random dbt snippets I grab from wherever and mostly do not create myself.  Big shout out to Randy Pitcher!"}, "doc.secret.order_status": {"name": "order_status", "resource_type": "doc", "package_name": "secret", "path": "staging/jaffle_shop/order_status.md", "original_file_path": "models/staging/jaffle_shop/order_status.md", "unique_id": "doc.secret.order_status", "block_contents": "One of the following values:\n\n| status         | definition                                                 |\n|----------------|------------------------------------------------------------|\n| placed         | Order placed but not yet shipped                           |\n| shipped        | Order has been shipped but hasn't yet been delivered       |\n| completed      | Order has been received by customers                       |\n| return_pending | Customer has indicated they would like to return this item |\n| returned       | Item has been returned                                     |"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.dbt_artifacts.command_invocation_id": {"name": "command_invocation_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.command_invocation_id", "block_contents": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation."}, "doc.dbt_artifacts.node_id": {"name": "node_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.node_id", "block_contents": "Unique node identifier."}, "doc.dbt_artifacts.name": {"name": "name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.name", "block_contents": "Name of the node."}, "doc.dbt_artifacts.schema": {"name": "schema", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.schema", "block_contents": "Configured schema for the node."}, "doc.dbt_artifacts.package_name": {"name": "package_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.package_name", "block_contents": "Name of the dbt package which contains the node."}, "doc.dbt_artifacts.total_node_runtime": {"name": "total_node_runtime", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.total_node_runtime", "block_contents": "Total time spent executing this node (seconds)."}, "doc.dbt_artifacts.compile_started_at": {"name": "compile_started_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.compile_started_at", "block_contents": "Timestamp when the node started compiling."}, "doc.dbt_artifacts.depends_on_nodes": {"name": "depends_on_nodes", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.depends_on_nodes", "block_contents": "Array of node identifiers that this node depends on in the execution graph."}, "doc.dbt_artifacts.status": {"name": "status", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.status", "block_contents": "Represents the execution status of a node, can be success, failure, or error."}, "doc.dbt_artifacts.query_completed_at": {"name": "query_completed_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.query_completed_at", "block_contents": "Timestamp when the node's SQL query completed."}, "doc.dbt_artifacts.materialization": {"name": "materialization", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.materialization", "block_contents": "The materialization of the model."}, "doc.dbt_artifacts.database": {"name": "database", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.database", "block_contents": "The configured database for the node."}, "doc.dbt_artifacts.rows_affected": {"name": "rows_affected", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.rows_affected", "block_contents": "Number of rows affected by the model execution."}, "doc.dbt_artifacts.bytes_processed": {"name": "bytes_processed", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.bytes_processed", "block_contents": "Number of bytes processed by the model execution."}, "doc.dbt_artifacts.thread_id": {"name": "thread_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.thread_id", "block_contents": "Which thread executed this node? E.g. Thread-1"}, "doc.dbt_artifacts.path": {"name": "path", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.path", "block_contents": "Path to the model on the local filesystem."}, "doc.dbt_artifacts.was_full_refresh": {"name": "was_full_refresh", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.was_full_refresh", "block_contents": "Boolean flag indicating whether the nodes run was a full refresh or not."}, "doc.dbt_artifacts.checksum": {"name": "checksum", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.checksum", "block_contents": "Checksum of the model."}, "doc.dbt_artifacts.seed_execution_id": {"name": "seed_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.seed_execution_id", "block_contents": "Execution ID of the seed node."}, "doc.dbt_artifacts.test_execution_id": {"name": "test_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.test_execution_id", "block_contents": "Execution ID of the test node."}, "doc.dbt_artifacts.snapshot_execution_id": {"name": "snapshot_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.snapshot_execution_id", "block_contents": "Execution ID of the snapshot node."}, "doc.dbt_artifacts.model_execution_id": {"name": "model_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.model_execution_id", "block_contents": "Execution ID of the model node."}, "doc.dbt_artifacts.loader": {"name": "loader", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.loader", "block_contents": "Describes the tool that loads this source into your warehouse."}, "doc.dbt_artifacts.freshness": {"name": "freshness", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.freshness", "block_contents": "The specified freshness of the source model."}, "doc.dbt_artifacts.url": {"name": "url", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.url", "block_contents": "The URL of the BI tool where the data defined by the exposure can be viewed."}, "doc.dbt_artifacts.identifier": {"name": "identifier", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.identifier", "block_contents": "Source identifier."}, "doc.dbt_artifacts.source_name": {"name": "source_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.source_name", "block_contents": "Source name."}, "doc.dbt_artifacts.test_path": {"name": "test_path", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.test_path", "block_contents": "Path to the yaml (SQL in case of a singular test) file describing the test."}, "doc.dbt_artifacts.tags": {"name": "tags", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.tags", "block_contents": "Tags used in resource selection associated with the node."}, "doc.dbt_artifacts.strategy": {"name": "strategy", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.strategy", "block_contents": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check."}, "doc.dbt_artifacts.failures": {"name": "failures", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.failures", "block_contents": "Test failures. Value is 1 if the test failed, 0 if successful."}, "doc.dbt_artifacts.loaded_at_field": {"name": "loaded_at_field", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.loaded_at_field", "block_contents": "A column name (or expression) that returns a timestamp indicating freshness."}, "doc.dbt_artifacts.type": {"name": "type", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.type", "block_contents": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)"}, "doc.dbt_artifacts.description": {"name": "description", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.description", "block_contents": "Node description."}, "doc.dbt_artifacts.maturity": {"name": "maturity", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.maturity", "block_contents": "Exposure maturity; one of high, medium, low."}, "doc.dbt_artifacts.owner": {"name": "owner", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.owner", "block_contents": "Owner of the exposure, usually an email address."}, "doc.dbt_artifacts.source_execution_id": {"name": "source_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.source_execution_id", "block_contents": "Execution ID of the source node."}, "doc.dbt_artifacts.exposure_execution_id": {"name": "exposure_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.exposure_execution_id", "block_contents": "Execution ID of the exposure node."}, "doc.dbt_artifacts.dbt_version": {"name": "dbt_version", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_version", "block_contents": "Installed version of dbt that is currently running."}, "doc.dbt_artifacts.project_name": {"name": "project_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.project_name", "block_contents": "Name for the root-level project which is being run by dbt."}, "doc.dbt_artifacts.run_started_at": {"name": "run_started_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.run_started_at", "block_contents": "The start timestamp of the dbt execution which generated the record."}, "doc.dbt_artifacts.dbt_command": {"name": "dbt_command", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_command", "block_contents": "dbt command of this run."}, "doc.dbt_artifacts.full_refresh_flag": {"name": "full_refresh_flag", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.full_refresh_flag", "block_contents": "Boolean flag indicating whether the dbt run was in full refresh mode or not."}, "doc.dbt_artifacts.target_profile_name": {"name": "target_profile_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.target_profile_name", "block_contents": "The name of the active profile."}, "doc.dbt_artifacts.target_name": {"name": "target_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.target_name", "block_contents": "The name of the active target."}, "doc.dbt_artifacts.target_schema": {"name": "target_schema", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.target_schema", "block_contents": "The name of the target dbt schema."}, "doc.dbt_artifacts.target_threads": {"name": "target_threads", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.target_threads", "block_contents": "The number of threads in use by dbt."}, "doc.dbt_artifacts.dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_project_id", "block_contents": "The ID of the dbt Cloud Project for this run."}, "doc.dbt_artifacts.dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_job_id", "block_contents": "The ID of the dbt Cloud Job for this run."}, "doc.dbt_artifacts.dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_run_id", "block_contents": "The ID of this particular run."}, "doc.dbt_artifacts.dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_run_reason_category", "block_contents": "The \"category\" of the trigger for this run."}, "doc.dbt_artifacts.dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_run_reason", "block_contents": "The specific trigger for this run."}, "doc.dbt_artifacts.env_vars": {"name": "env_vars", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.env_vars", "block_contents": "Key-value pairs of environment variables to be capture."}, "doc.dbt_artifacts.dbt_vars": {"name": "dbt_vars", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_vars", "block_contents": "Key-value pairs of project variables to be capture."}, "doc.dbt_artifacts.last_full_refresh_run_completed_at": {"name": "last_full_refresh_run_completed_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_full_refresh_run_completed_at", "block_contents": "Timestamp when the node's SQL query completed on the last full (non-incremental) run."}, "doc.dbt_artifacts.last_full_refresh_run_rows_affected": {"name": "last_full_refresh_run_rows_affected", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_full_refresh_run_rows_affected", "block_contents": "Number of rows affected by the node's last full (non-incremental) run."}, "doc.dbt_artifacts.last_full_refresh_run_bytes_processed": {"name": "last_full_refresh_run_bytes_processed", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_full_refresh_run_bytes_processed", "block_contents": "Number of bytes processed by the node's last full (non-incremental) run."}, "doc.dbt_artifacts.last_full_refresh_run_total_runtime": {"name": "last_full_refresh_run_total_runtime", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_full_refresh_run_total_runtime", "block_contents": "Total time spent executing the node's last full (non-incremental) run (seconds)."}, "doc.dbt_artifacts.last_run_completed_at": {"name": "last_run_completed_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_run_completed_at", "block_contents": "Timestamp when the node's SQL query completed on the last run."}, "doc.dbt_artifacts.last_run_rows_affected": {"name": "last_run_rows_affected", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_run_rows_affected", "block_contents": "Number of rows affected by the node's last run."}, "doc.dbt_artifacts.last_run_bytes_processed": {"name": "last_run_bytes_processed", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_run_bytes_processed", "block_contents": "Number of bytes processed by the node's last run."}, "doc.dbt_artifacts.last_run_total_runtime": {"name": "last_run_total_runtime", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_run_total_runtime", "block_contents": "Total time spent executing the node's last run (seconds)."}, "doc.dbt_artifacts.meta": {"name": "meta", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.meta", "block_contents": "The meta field of the config associated with the node."}, "doc.dbt_artifacts.invocation_args": {"name": "invocation_args", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.invocation_args", "block_contents": "Key-value pairs of args passed to invocation."}, "doc.dbt_artifacts.dbt_custom_envs": {"name": "dbt_custom_envs", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_custom_envs", "block_contents": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_"}, "doc.dbt_artifacts.alias": {"name": "alias", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.alias", "block_contents": "Alias of the node."}, "doc.dbt_artifacts.message": {"name": "message", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.message", "block_contents": "Result report, based on information returned from the database"}, "doc.dbt_artifacts.adapter_response": {"name": "adapter_response", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.adapter_response", "block_contents": "Response provided by the adapter as JSON."}, "doc.dbt_artifacts.all_results": {"name": "all_results", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.all_results", "block_contents": "All results as a JSON blob"}}, "exposures": {"exposure.secret.Total_Cloud_Spend_Analysis": {"name": "Total_Cloud_Spend_Analysis", "resource_type": "exposure", "package_name": "secret", "path": "marts/exposures.yml", "original_file_path": "models/marts/exposures.yml", "unique_id": "exposure.secret.Total_Cloud_Spend_Analysis", "fqn": ["secret", "marts", "Total_Cloud_Spend_Analysis"], "type": "dashboard", "owner": {"email": "data@jaffleshop.com", "name": "Claire from Data"}, "description": "", "label": null, "maturity": null, "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://tableau.generalmills.com/#/views/TotalCloudSpendAnalysis_16348351446230/GMITotalCloudSpend?:iid=1", "depends_on": {"macros": [], "nodes": ["model.secret.customers"]}, "refs": [{"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1691482189.7346358}, "exposure.secret.Azure_Cost_Explorer": {"name": "Azure_Cost_Explorer", "resource_type": "exposure", "package_name": "secret", "path": "marts/exposures.yml", "original_file_path": "models/marts/exposures.yml", "unique_id": "exposure.secret.Azure_Cost_Explorer", "fqn": ["secret", "marts", "Azure_Cost_Explorer"], "type": "dashboard", "owner": {"email": "data@jaffleshop.com", "name": "Claire from Data"}, "description": "", "label": null, "maturity": null, "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://tableau.generalmills.com/#/views/AzureCostExplorer_16299105616250/AzureCostOverview?:iid=1", "depends_on": {"macros": [], "nodes": ["model.secret.orders"]}, "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1691482189.738198}, "exposure.secret.Alicloud_Cost_Explorer": {"name": "Alicloud_Cost_Explorer", "resource_type": "exposure", "package_name": "secret", "path": "marts/exposures.yml", "original_file_path": "models/marts/exposures.yml", "unique_id": "exposure.secret.Alicloud_Cost_Explorer", "fqn": ["secret", "marts", "Alicloud_Cost_Explorer"], "type": "dashboard", "owner": {"email": "data@jaffleshop.com", "name": "Claire from Data"}, "description": "", "label": null, "maturity": null, "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://tableau.generalmills.com/#/views/AlicloudCostExplorer/AliCloudCostOverview?:iid=1", "depends_on": {"macros": [], "nodes": ["model.secret.payments__pivoted"]}, "refs": [{"name": "payments__pivoted", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1691482189.7416904}, "exposure.secret.Big_Query_Spend_Analysis": {"name": "Big_Query_Spend_Analysis", "resource_type": "exposure", "package_name": "secret", "path": "marts/exposures.yml", "original_file_path": "models/marts/exposures.yml", "unique_id": "exposure.secret.Big_Query_Spend_Analysis", "fqn": ["secret", "marts", "Big_Query_Spend_Analysis"], "type": "dashboard", "owner": {"email": "data@jaffleshop.com", "name": "Claire from Data"}, "description": "", "label": null, "maturity": null, "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://tableau.generalmills.com/#/views/GCPCostExplorer_16303332095400/GCPCostOverview?:iid=1", "depends_on": {"macros": [], "nodes": ["model.secret.stg_orders", "model.secret.stg_customers"]}, "refs": [{"name": "stg_orders", "package": null, "version": null}, {"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1691482189.7457225}}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"model.secret.incrementing_incremental": [{"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "incrementing_incremental", "resource_type": "model", "package_name": "secret", "path": "incrementing_incremental.sql", "original_file_path": "models/incrementing_incremental.sql", "unique_id": "model.secret.incrementing_incremental", "fqn": ["secret", "incrementing_incremental"], "alias": "incrementing_incremental", "checksum": {"name": "sha256", "checksum": "c8c368c3f58f6e4bf0855446d2cb79cb72c3583a6e051c00c5d154c9f5891f26"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "meta": {"some_key": "some_value"}, "unique_key": "unique_id", "enabled": false}, "created_at": 1691482188.0957072, "config_call_dict": {"materialized": "incremental", "unique_key": "unique_id", "enabled": false}, "relation_name": "DEVELOPMENT.dbt_pkearns.incrementing_incremental", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='unique_id',\n        enabled=false\n    )\n}}\n\nwith\n\nsample_data as (\n    select\n        1 as unique_id,\n        1 as generic_id,\n        'Pass' as some_status,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        2 as unique_id,\n        1 as generic_id,\n        'Fail' as some_status,\n        current_timestamp as _updated_at\n\n    union all\n\n    select\n        3 as unique_id,\n        2 as generic_id,\n        'Pass' as some_status,\n        current_timestamp as _updated_at\n)\n\n{% if is_incremental() %}\n,increment_data as (\n    select\n        unique_id + 1 as unique_id,\n        case when generic_id % 2 = 3 then 1 else 2 end as generic_id,\n        case when unique_id % 3 = 0 then 'Pass' else 'Fail' end as some_status,\n        _updated_at\n    from\n        {{ this }}\n    order by unique_id desc\n    limit 1\n)\n{% endif %}\n\n,increment_data as (\n    select 0\n)\n\n{% if is_incremental() %}\n,final as (\n    select * from increment_data\n)\n{% endif %}\n\n,final as (\n    select * from sample_data\n)\n\nselect\n    *\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}], "model.secret.corporation": [{"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "corporation", "resource_type": "model", "package_name": "secret", "path": "onsemi/corporation.sql", "original_file_path": "models/onsemi/corporation.sql", "unique_id": "model.secret.corporation", "fqn": ["secret", "onsemi", "corporation"], "alias": "corporation", "checksum": {"name": "sha256", "checksum": "e5110f88e2f6f3b21072cb1e76acbfe462bd2e45434690dc7305e786a3573301"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CORPORATION_KEY", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "meta": {"some_key": "some_value"}, "unique_key": "CORPORATION_KEY", "enabled": false}, "created_at": 1691482188.1455529, "config_call_dict": {"materialized": "incremental", "unique_key": "CORPORATION_KEY", "enabled": false}, "relation_name": "DEVELOPMENT.dbt_pkearns.corporation", "raw_code": "-- incremental model to bring in:\n    -- one time load data\n    -- -1 for pk \n    -- stg data \n\n{{\n    config(\n        materialized='incremental',\n        unique_key=\"CORPORATION_KEY\",\n        enabled=false\n        )\n}}\n\nwith\n\n-- one time load with an added -1 for product key\none_time_load as (\n    {{ dbt_utils.union_relations(\n    relations=[\n        ref('seed__corporation__one_time_load'),\n        ref('seed__negative_key'),\n        ],\n    ) }}\n\n),\n\n-- daily updated data\nstg_data as (\n    select * from {{ ref('seed__corporation__stg_data') }}\n    {%- if is_incremental() %}\n    where snapshot__date >= (select max(snapshot__date) from {{ this }})\n    {%- endif %}\n)\n\nselect\n    -- using this to only select columns from the one_time_load_table\n    {{ dbt_utils.star(from=ref('seed__corporation__one_time_load')) }}\nfrom one_time_load\n    -- after the initial load, we will not need to run this again\n    {%- if is_incremental() %}\n    where snapshot__date >= (select max(snapshot__date) from {{ this }}) or snapshot_date is null\n    {%- endif %}\n\nunion all\n\nselect * from stg_data", "language": "sql", "refs": [{"name": "seed__corporation__one_time_load", "package": null, "version": null}, {"name": "seed__negative_key", "package": null, "version": null}, {"name": "seed__corporation__stg_data", "package": null, "version": null}, {"name": "seed__corporation__one_time_load", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.is_incremental", "macro.dbt_utils.star"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}], "model.secret.batch_control": [{"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "batch_control", "resource_type": "model", "package_name": "secret", "path": "onsemi/batch_control.sql", "original_file_path": "models/onsemi/batch_control.sql", "unique_id": "model.secret.batch_control", "fqn": ["secret", "onsemi", "batch_control"], "alias": "batch_control", "checksum": {"name": "sha256", "checksum": "2e38d036b36fb4aa50e7682b9568e0ea1e4a52fb300bece2df3f08bbf5ef62fd"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "materialization": "incremental", "post-hook": [{"sql": "{{ v_sql_upd_success(v_dbt_job_name) }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}, "materialization": "incremental", "enabled": false, "post-hook": ["{{ v_sql_upd_success(v_dbt_job_name) }}"]}, "created_at": 1691482188.2107587, "config_call_dict": {"materialization": "incremental", "enabled": false, "post-hook": ["{{ v_sql_upd_success(v_dbt_job_name) }}"]}, "relation_name": "DEVELOPMENT.dbt_pkearns.batch_control", "raw_code": "-- This is an example Incremental model. This is the code that you would have within all of your incremental models\n-- so they can kick off the stored procedures to update the ETL Control table\n{{\n    config(\n        materialization='incremental',\n        post_hook=\"{{ v_sql_upd_success(v_dbt_job_name) }}\",\n        enabled=false\n    )\n}}\n\n\n-- TODO: consider changing job name to the name of the file so you could use something standard like {{ this.name }} or some version of that (like fully qualified name)\n    -- I am unsure how to get the on-run-end hook to update failures otherwise\n{%- set v_dbt_job_name = 'DBT_MART_SALES_BILLING_FACT'-%}\n    --suggested alternative:\n    -- {%- set v_dbt_job_name = this.name -%}  or {%- set v_dbt_job_name = this -%}\n\n-- Step 1 Create new batch ID\n{{ v_sql_ins_queue_batch(v_dbt_job_name, current_timestamp) }}\n\n-- Step 2 Set the batch to running\n{{ v_sql_upd_run_batch(v_dbt_job_name) }}\n\n-- Step 3 Fetch the batch id\n{%- set V_BIW_BATCH_ID = v_sql_get_batch(v_dbt_job_name) -%}\n\n-- Step 4 Get the High and Low water mark\n{%- set V_LWM = v_sql_get_watermark(V_BIW_BATCH_ID)[0] -%}\n{%- set V_HWM = v_sql_get_watermark(V_BIW_BATCH_ID)[1] -%}\n{%- set V_START_DTTM = v_sql_get_watermark(V_BIW_BATCH_ID)[2] -%}\n\n\nselect\n{{ V_BIW_BATCH_ID }}  as batch_id,\n{{ V_LWM }} as V_LWM,\n{{ V_HWM }} as V_HWM,\n{{ V_START_DTTM }} as V_START_DTTM\n\n--------\n-- ... rest of the SQL here\n\n-- from\n--   some_table\n-- where\n-- {% if is_incremental() %}\n--     -- this filter will only be applied on an incremental run\n--     where event_time > (select max(event_time) from {{ this }}) \n-- {% endif %}\n--------\n\n-- Step 5 Success or Failure to ETL table\n-- success happens in post-hook, which runs only if the model succeeds\n-- failure happes via on-run-end hook: https://gist.github.com/jeremyyeo/064106e480106b49cd337f33a765ef20", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.secret.v_sql_ins_queue_batch", "macro.secret.v_sql_upd_run_batch", "macro.secret.v_sql_get_batch", "macro.secret.v_sql_get_watermark", "macro.dbt.is_incremental", "macro.secret.v_sql_upd_success"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}], "model.secret.stg_query_history": [{"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "stg_query_history", "resource_type": "model", "package_name": "secret", "path": "demos/dynamic_refs/stg_query_history.sql", "original_file_path": "models/demos/dynamic_refs/stg_query_history.sql", "unique_id": "model.secret.stg_query_history", "fqn": ["secret", "demos", "dynamic_refs", "stg_query_history"], "alias": "stg_query_history", "checksum": {"name": "sha256", "checksum": "b62eea7eaa0fb773a0ad79281405db4f5f127c0a656499b421e8d18571f02170"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": ["snowflake_meta", "daily"], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": true, "post-hook": [], "pre-hook": []}, "tags": ["snowflake_meta", "daily"], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}, "tags": ["snowflake_meta", "daily"], "transient": true, "enabled": false}, "created_at": 1691482188.3900416, "config_call_dict": {"tags": ["snowflake_meta", "daily"], "materialized": "view", "transient": true, "enabled": false}, "relation_name": "DEVELOPMENT.dbt_pkearns.stg_query_history", "raw_code": "{{ config(\n  tags=[\"snowflake_meta\", \"daily\"],\n  materialized='view',\n  transient=true,\n  enabled=false\n) }}\n\nWITH HISTORY AS (\n  SELECT \n    *\n\n  FROM \n  {% if target.name == 'prod' %}\n    {{ source('snowflake_meta', 'query_history') }}\n  {% elif target.name == 'qa' %}\n    {{ source('snowflake_meta_qa', 'query_history') }}\n  {% else %}\n    {{ source('snowflake_meta_dev', 'query_history') }}\n  {% endif %}\n)\n\nSELECT * FROM HISTORY", "language": "sql", "refs": [], "sources": [["snowflake_meta_dev", "query_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}], "model.secret.easy_incremental_demo": [{"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "easy_incremental_demo", "resource_type": "model", "package_name": "secret", "path": "demos/easy_incremental/easy_incremental_demo.sql", "original_file_path": "models/demos/easy_incremental/easy_incremental_demo.sql", "unique_id": "model.secret.easy_incremental_demo", "fqn": ["secret", "demos", "easy_incremental", "easy_incremental_demo"], "alias": "easy_incremental_demo", "checksum": {"name": "sha256", "checksum": "5d599329fc634c3cfd12916bbc07923affa23512a217995485d28c375048310f"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "easy_incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "watermark": "watermark", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "easy_incremental", "meta": {"some_key": "some_value"}, "watermark": "watermark", "enabled": false}, "created_at": 1691482188.464974, "config_call_dict": {"materialized": "easy_incremental", "watermark": "watermark", "enabled": false}, "relation_name": "DEVELOPMENT.dbt_pkearns.easy_incremental_demo", "raw_code": "{{ config(\n  materialized='easy_incremental',\n  watermark='watermark',\n  enabled=False\n  ) }}\n\nWITH HISTORY AS (\n  SELECT \n    {{ standardize_timestamp('START_TIME') }} AS START_TIME_CENTRAL_TIME,\n    {{ standardize_timestamp('END_TIME') }}   AS END_TIME_CENTRAL_TIME,\n\n\t{{ \n      dbt_utils.star(\n        from=source('snowflake_meta', 'warehouse_metering_history'),\n        except=[\n          \"START_TIME\",\n          \"END_TIME\",\n          \"INGESTION_TIME\"\n        ]\n      ) \n    }}, \n\n    END_TIME AS WATERMARK\n\n  FROM \n    {{ source('snowflake_meta', 'warehouse_metering_history') }}\n)\n\nSELECT * FROM HISTORY", "language": "sql", "refs": [], "sources": [["snowflake_meta", "warehouse_metering_history"], ["snowflake_meta", "warehouse_metering_history"]], "metrics": [], "depends_on": {"macros": ["macro.secret.standardize_timestamp", "macro.dbt_utils.star"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}], "model.secret.find_distincts": [{"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "find_distincts", "resource_type": "model", "package_name": "secret", "path": "demos/dedupe_incremental/find_distincts.sql", "original_file_path": "models/demos/dedupe_incremental/find_distincts.sql", "unique_id": "model.secret.find_distincts", "fqn": ["secret", "demos", "dedupe_incremental", "find_distincts"], "alias": "find_distincts", "checksum": {"name": "sha256", "checksum": "9c37b942bc21a867429232855534519291b23af840cd2b173692911ed0aa287a"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "meta": {"some_key": "some_value"}, "enabled": false}, "created_at": 1691482188.509718, "config_call_dict": {"enabled": false}, "relation_name": "DEVELOPMENT.dbt_pkearns.find_distincts", "raw_code": "{{\n    config(\n        enabled=False\n    )\n}}\n\n-- Bigquery only -- find distinct rows\n-- cool stuff https://stackoverflow.com/questions/53719148/big-query-deduplication-query-example-explanation\nSELECT tt.*\nFROM (\n  SELECT t.id, ARRAY_AGG(t ORDER BY t.insert_time DESC LIMIT 1)[OFFSET(0)] tt\n  FROM {{ ref('dedupe_incremental') }} t\n  GROUP BY 1\n)", "language": "sql", "refs": [{"name": "dedupe_incremental", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}], "model.secret.partitioned_incremental": [{"database": "DEVELOPMENT", "schema": "dbt_pkearns", "name": "partitioned_incremental", "resource_type": "model", "package_name": "secret", "path": "demos/partitioned_incremental/partitioned_incremental.sql", "original_file_path": "models/demos/partitioned_incremental/partitioned_incremental.sql", "unique_id": "model.secret.partitioned_incremental", "fqn": ["secret", "demos", "partitioned_incremental", "partitioned_incremental"], "alias": "partitioned_incremental", "checksum": {"name": "sha256", "checksum": "e94823f7afcb4e8b2d4df5358192a7701c301a7b97760510c337c229d06adbcb"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"some_key": "some_value"}, "group": null, "materialized": "partitioned_incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "record_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partition_by": "WAREHOUSE_NAME", "partitions_to_process": ["'RANDY_PITCHER_WORKSPACE_PROD_WH'", "'RANDY_PITCHER_WORKSPACE_DEV_WH'"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"some_key": "some_value"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "partitioned_incremental", "meta": {"some_key": "some_value"}, "partition_by": "WAREHOUSE_NAME", "partitions_to_process": ["'RANDY_PITCHER_WORKSPACE_PROD_WH'", "'RANDY_PITCHER_WORKSPACE_DEV_WH'"], "unique_key": "record_id", "enabled": false}, "created_at": 1691482188.653455, "config_call_dict": {"materialized": "partitioned_incremental", "partition_by": "WAREHOUSE_NAME", "partitions_to_process": ["'RANDY_PITCHER_WORKSPACE_PROD_WH'", "'RANDY_PITCHER_WORKSPACE_DEV_WH'"], "unique_key": "record_id", "enabled": false}, "relation_name": "DEVELOPMENT.dbt_pkearns.partitioned_incremental", "raw_code": "{{ \n    config(\n        materialized='partitioned_incremental', \n        partition_by='WAREHOUSE_NAME', \n        partitions_to_process=[\"'RANDY_PITCHER_WORKSPACE_PROD_WH'\", \"'RANDY_PITCHER_WORKSPACE_DEV_WH'\"],\n        unique_key='record_id',\n        enabled=False\n    ) \n}}\n\nWITH HISTORY AS (\n  SELECT \n    {{ standardize_timestamp('START_TIME') }} AS START_TIME_CENTRAL_TIME,\n    {{ standardize_timestamp('END_TIME') }}   AS END_TIME_CENTRAL_TIME,\n\n\t{{ \n      dbt_utils.star(\n        from=source('snowflake_meta', 'warehouse_metering_history'),\n        except=[\n          \"START_TIME\",\n          \"END_TIME\",\n          \"INGESTION_TIME\"\n        ]\n      ) \n    }}, \n\n    END_TIME AS WATERMARK,\n    {{dbt_utils.generate_surrogate_key(['START_TIME', 'WAREHOUSE_NAME'])}} AS record_id\n\n  FROM \n    {{ source('snowflake_meta', 'warehouse_metering_history') }}\n)\n\nSELECT * FROM HISTORY\n\n-- {{this}} {{target.database}}", "language": "sql", "refs": [], "sources": [["snowflake_meta", "warehouse_metering_history"], ["snowflake_meta", "warehouse_metering_history"]], "metrics": [], "depends_on": {"macros": ["macro.secret.standardize_timestamp", "macro.dbt_utils.star", "macro.dbt_utils.generate_surrogate_key"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}], "snapshot.secret.snapshot_dupe": [{"database": "development", "schema": "snapshots", "name": "snapshot_dupe", "resource_type": "snapshot", "package_name": "secret", "path": "snapshot_dupe.sql", "original_file_path": "snapshots/snapshot_dupe.sql", "unique_id": "snapshot.secret.snapshot_dupe", "fqn": ["secret", "snapshot_dupe", "snapshot_dupe"], "alias": "snapshot_dupe", "checksum": {"name": "sha256", "checksum": "7875160b73cbd6774348d160bf5c4f2b19faaadfd27e3ac7d3042a82738a1a31"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "some_value", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "strategy": "check", "target_schema": "snapshots", "target_database": "development", "updated_at": null, "check_cols": ["id", "some_value"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "development", "target_schema": "snapshots", "unique_key": "some_value", "strategy": "check", "check_cols": ["id", "some_value"], "enabled": false}, "created_at": 1691482188.8695998, "config_call_dict": {"target_database": "development", "target_schema": "snapshots", "unique_key": "some_value", "strategy": "check", "check_cols": ["id", "some_value"], "enabled": false}, "relation_name": "development.snapshots.snapshot_dupe", "raw_code": "\n\n{{\n    config(\n      target_database='development',\n      target_schema='snapshots',\n      unique_key='some_value',\n      strategy='check',\n      check_cols=['id', 'some_value'],\n      enabled=False\n    )\n}}\n\n-- this will fail because of dupes\n-- 03:54:07  Database Error in snapshot snapshot_dupe (snapshots/snapshot_dupe.sql)\n-- 100090 (42P18): Duplicate row detected during DML action\n\nselect\n 1 as id,\n 3 as some_value,\n TIMEADD(minute, -4, current_timestamp) as updated_at\n\nunion all\n\nselect\n 1 as id,\n 3 as some_value,\n TIMEADD(minute, -4, current_timestamp) as updated_at\n\nunion all\n\nselect\n 2 as id,\n 3 as some_value,\n TIMEADD(minute, -4, current_timestamp) as updated_at\n\n", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}], "snapshot.secret.snpsht__snowflake_query_history": [{"database": "DEVELOPMENT", "schema": "dbt_pkearns__snowflake_meta", "name": "snpsht__snowflake_query_history", "resource_type": "snapshot", "package_name": "secret", "path": "snowflake_meta/snpsht__snowflake_query_history.sql", "original_file_path": "snapshots/snowflake_meta/snpsht__snowflake_query_history.sql", "unique_id": "snapshot.secret.snpsht__snowflake_query_history", "fqn": ["secret", "snowflake_meta", "snpsht__snowflake_query_history", "snpsht__snowflake_query_history"], "alias": "snpsht__snowflake_query_history", "checksum": {"name": "sha256", "checksum": "36b03812104be098c3cbc6bf623a1f7e8232f8916345ad454ea2fd19cb3f6bab"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": ["snowflake_meta"], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "query_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "strategy": "timestamp", "target_schema": "dbt_pkearns__snowflake_meta", "target_database": null, "updated_at": "end_time", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": ["snowflake_meta"], "description": "some description for this snapshot", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "secret://snapshots/snowflake_meta/snowflake_meta.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": ["snowflake_meta"], "target_schema": "{{ 'snowflake_meta' if 'prod' in target.name.lower() else target.schema ~ '__snowflake_meta' }}", "unique_key": "query_id", "strategy": "timestamp", "updated_at": "end_time", "enabled": false}, "created_at": 1691482189.5952873, "config_call_dict": {"unique_key": "query_id", "strategy": "timestamp", "updated_at": "end_time", "enabled": false}, "relation_name": "DEVELOPMENT.dbt_pkearns__snowflake_meta.snpsht__snowflake_query_history", "raw_code": "\n\n{{\n    config(\n        unique_key = 'query_id',\n        strategy   = 'timestamp',\n        updated_at = 'end_time',\n        enabled=false\n    )\n}}\n\nselect * from {{ source('snowflake_meta', 'query_history') }}\n\n", "language": "sql", "refs": [], "sources": [["snowflake_meta", "query_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}]}, "parent_map": {"model.secret.my_incremental_model": [], "model.secret.my_third_model": ["model.secret.my_second_model"], "model.secret.run_query_return": ["model.secret.stg_customers", "model.secret.stg_payments"], "model.secret.union_relations": [], "model.secret.foo_table": [], "model.secret.my_second_model": ["model.secret.my_first_model"], "model.secret.bar_view": ["model.secret.foo_view"], "model.secret.baz_table": ["model.secret.bar_table"], "model.secret.json_example": [], "model.secret.ephemeral_1": [], "model.secret.bar_table": ["model.secret.foo_table"], "model.secret.tag_model": [], "model.secret.query_tag": [], "model.secret.test_list_depends_on": ["model.secret.stg_orders", "model.secret.stg_payments"], "model.secret.project_info": [], "model.secret.ephemeral_2": ["model.secret.ephemeral_1"], "model.secret.conditional_run": [], "model.secret.incremental_dupes": [], "model.secret.my_first_model": [], "model.secret.foo_view": [], "model.secret.baz_view": ["model.secret.bar_view"], "model.secret.stg_customers_2": ["source.secret.jaffle_shop.customers_2"], "model.secret.stg_orders": ["source.secret.jaffle_shop.orders"], "model.secret.stg_customers": ["source.secret.jaffle_shop.customers"], "model.secret.stg_payments": ["source.secret.stripe.payment"], "model.secret.stg_stripe__payments": [], "model.secret.check_sources": [], "model.secret.int_onsemi": ["model.secret.stg_onsemi"], "model.secret.product_using_macros": ["seed.secret.seed__negative_key", "seed.secret.seed__product__one_time_load", "seed.secret.seed__product__stg_data"], "model.secret.onsemi_incremental": ["model.secret.int_onsemi", "model.secret.int_onsemi", "model.secret.int_onsemi", "model.secret.int_onsemi", "seed.secret.seed__sample_data_status", "seed.secret.seed__sample_data_status"], "model.secret.stg_onsemi": [], "model.secret.product": ["seed.secret.seed__negative_key", "seed.secret.seed__product__one_time_load", "seed.secret.seed__product__one_time_load", "seed.secret.seed__product__stg_data"], "model.secret.show_this_variable": ["model.secret.my_first_model"], "model.secret.pack_json_demo": ["model.secret.stg_warehouse_metering_history", "model.secret.stg_warehouse_metering_history"], "model.secret.raw_json": [], "model.secret.dynamic_unpack": ["model.secret.raw_json", "model.secret.raw_json"], "model.secret.change_roles": [], "model.secret.execute_query": ["model.secret.customers"], "model.secret.warehouse_metering_history__incremental_snapshot": ["model.secret.stg_warehouse_metering_history"], "model.secret.env_var_changes": [], "model.secret.hard_deletes__augmented_snapshot_view": ["snapshot.secret.hard_deletes__snapshot"], "model.secret.hard_deletes_source": [], "model.secret.hard_deletes__snapshot_passthrough": ["snapshot.secret.hard_deletes__snapshot"], "model.secret.dedupe_incremental": [], "model.secret.find_dupes": ["model.secret.dedupe_incremental", "model.secret.dedupe_incremental"], "model.secret.autogenerate_join_conditions": ["model.secret.customers", "model.secret.orders", "model.secret.stg_customers"], "model.secret.namespacing": [], "model.secret.disable_list_create": [], "model.secret.skip_this_incremental": ["model.secret.disable_list_create"], "model.secret.variable_usage": ["model.secret.disable_list_create"], "model.secret.in_and_out": [], "model.secret.local_variables": [], "model.secret.model_with_schema_tests": [], "model.secret.landing": [], "model.secret.custom_schema": [], "model.secret.get_dynamic_sql_value_usage": [], "model.secret.rows_affected__table": [], "model.secret.rows_affected__incremental": [], "model.secret.rows_affected__view": [], "model.secret.payments__pivoted": ["model.secret.stg_payments", "model.secret.stg_payments"], "model.secret.customers_plus_two": ["model.secret.customers_plus_one"], "model.secret.customers_plus_one": ["model.secret.customers"], "model.secret.customers": ["model.secret.orders", "model.secret.stg_customers"], "model.secret.customer_orders_dummy_join": ["model.secret.customers", "model.secret.orders"], "model.secret.orders": ["model.secret.stg_orders", "model.secret.stg_payments"], "model.secret.stg_warehouse_metering_history": ["source.secret.snowflake_meta.warehouse_metering_history", "source.secret.snowflake_meta.warehouse_metering_history"], "model.secret.use_variables__customers_limit_10": ["model.secret.customers"], "model.secret.import_pypi_package__holiday": ["model.secret.orders"], "model.secret.add_udf_function__payment_glitch": ["model.secret.define_function__payment_glitch"], "model.secret.python_builtins__describe": ["model.secret.customers"], "model.secret.define_function__payment_glitch": ["model.secret.stg_payments"], "snapshot.secret.snapshot_update": [], "snapshot.secret.snapshot_test_late_data": [], "snapshot.secret.test_hard_deletes": [], "snapshot.secret.hard_deletes__snapshot": ["model.secret.hard_deletes_source"], "test.secret.assert_my_second_model_has_one_record": ["model.secret.my_second_model"], "seed.secret.sample_json_and_array_fields": [], "seed.secret.seed__corporation__one_time_load": [], "seed.secret.seed__product__stg_data": [], "seed.secret.seed__edw_process_batch_ctl": [], "seed.secret.seed__product__one_time_load": [], "seed.secret.seed__negative_key": [], "seed.secret.seed__sample_data_status": [], "seed.secret.seed__corporation__stg_data": [], "seed.secret.seed__sample_data": [], "seed.secret.seed__edw_process_info": [], "model.dbt_artifacts.dim_dbt__exposures": ["model.dbt_artifacts.stg_dbt__exposures"], "model.dbt_artifacts.fct_dbt__model_executions": ["model.dbt_artifacts.stg_dbt__model_executions"], "model.dbt_artifacts.fct_dbt__invocations": ["model.dbt_artifacts.stg_dbt__invocations"], "model.dbt_artifacts.fct_dbt__test_executions": ["model.dbt_artifacts.stg_dbt__test_executions"], "model.dbt_artifacts.dim_dbt__tests": ["model.dbt_artifacts.stg_dbt__tests"], "model.dbt_artifacts.dim_dbt__sources": ["model.dbt_artifacts.stg_dbt__sources"], "model.dbt_artifacts.fct_dbt__snapshot_executions": ["model.dbt_artifacts.stg_dbt__snapshot_executions"], "model.dbt_artifacts.dim_dbt__models": ["model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.dim_dbt__current_models": ["model.dbt_artifacts.stg_dbt__model_executions", "model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.fct_dbt__seed_executions": ["model.dbt_artifacts.stg_dbt__seed_executions"], "model.dbt_artifacts.dim_dbt__snapshots": ["model.dbt_artifacts.stg_dbt__snapshots"], "model.dbt_artifacts.dim_dbt__seeds": ["model.dbt_artifacts.stg_dbt__seeds"], "model.dbt_artifacts.exposures": [], "model.dbt_artifacts.model_executions": [], "model.dbt_artifacts.snapshots": [], "model.dbt_artifacts.seeds": [], "model.dbt_artifacts.models": [], "model.dbt_artifacts.snapshot_executions": [], "model.dbt_artifacts.seed_executions": [], "model.dbt_artifacts.tests": [], "model.dbt_artifacts.invocations": [], "model.dbt_artifacts.sources": [], "model.dbt_artifacts.test_executions": [], "model.dbt_artifacts.stg_dbt__seed_executions": ["model.dbt_artifacts.seed_executions"], "model.dbt_artifacts.stg_dbt__exposures": ["model.dbt_artifacts.exposures"], "model.dbt_artifacts.stg_dbt__model_executions": ["model.dbt_artifacts.model_executions"], "model.dbt_artifacts.stg_dbt__snapshots": ["model.dbt_artifacts.snapshots"], "model.dbt_artifacts.stg_dbt__seeds": ["model.dbt_artifacts.seeds"], "model.dbt_artifacts.stg_dbt__test_executions": ["model.dbt_artifacts.test_executions"], "model.dbt_artifacts.stg_dbt__sources": ["model.dbt_artifacts.sources"], "model.dbt_artifacts.stg_dbt__invocations": ["model.dbt_artifacts.invocations"], "model.dbt_artifacts.stg_dbt__snapshot_executions": ["model.dbt_artifacts.snapshot_executions"], "model.dbt_artifacts.stg_dbt__models": ["model.dbt_artifacts.models"], "model.dbt_artifacts.stg_dbt__tests": ["model.dbt_artifacts.tests"], "test.secret.unique_my_first_model_col.344040e6f9": ["model.secret.my_first_model"], "test.secret.not_null_my_first_model_col.9dde753ebf": ["model.secret.my_first_model"], "test.secret.unique_stg_customers_customer_id.c7614daada": ["model.secret.stg_customers"], "test.secret.not_null_stg_customers_customer_id.e2cfb1f9aa": ["model.secret.stg_customers"], "test.secret.unique_stg_orders_order_id.e3b841c71a": ["model.secret.stg_orders"], "test.secret.not_null_stg_orders_order_id.81cfe2fe64": ["model.secret.stg_orders"], "test.secret.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": ["model.secret.stg_orders"], "test.secret.unique_model_with_schema_tests_id.c8cceb01b0": ["model.secret.model_with_schema_tests"], "test.secret.not_null_model_with_schema_tests_id.2aa929087e": ["model.secret.model_with_schema_tests"], "test.secret.unique_customers_customer_id.c5af1ff4b1": ["model.secret.customers"], "test.secret.not_null_customers_customer_id.5c9bf9911d": ["model.secret.customers"], "test.secret.dbt_utils_unique_combination_of_columns_customers_customer_id__first_name__last_name__first_order_date__most_recent_order_date__number_of_orders__lifetime_value.63d701a4e3": ["model.secret.customers"], "test.secret.unique_orders_order_id.fed79b3a6e": ["model.secret.orders"], "test.secret.not_null_orders_order_id.cf6c17daed": ["model.secret.orders"], "test.secret.dbt_utils_expression_is_true_orders_amount_0.23e56bc9d2": ["model.secret.orders"], "test.secret.source_not_null_jaffle_shop_customers_id.50aa22178f": ["source.secret.jaffle_shop.customers"], "test.secret.source_unique_jaffle_shop_customers_id.2777a7933e": ["source.secret.jaffle_shop.customers"], "test.secret.source_not_null_jaffle_shop_customers_2_id.5acaf12d10": ["source.secret.jaffle_shop.customers_2"], "test.secret.source_unique_jaffle_shop_customers_2_id.4e2a28ae57": ["source.secret.jaffle_shop.customers_2"], "test.secret.source_unique_jaffle_shop_orders_id.8a425b2fba": ["source.secret.jaffle_shop.orders"], "test.secret.source_not_null_jaffle_shop_orders_id.f924998b13": ["source.secret.jaffle_shop.orders"], "test.secret.source_accepted_values_jaffle_shop_orders_status__placed__shipped__completed__return_pending__returned.67e1753cce": ["source.secret.jaffle_shop.orders"], "test.secret.source_not_null_stripe_payment_id.f33f317f6c": ["source.secret.stripe.payment"], "test.secret.source_unique_stripe_payment_id.3b7989ce64": ["source.secret.stripe.payment"], "test.secret.source_accepted_values_stripe_payment_paymentmethod__credit_card__bank_transfer__gift_card__coupon.f91677821a": ["source.secret.stripe.payment"], "test.secret.source_accepted_values_stripe_payment_status__success__fail.911ca0ff27": ["source.secret.stripe.payment"], "source.secret.jaffle_shop.customers": [], "source.secret.jaffle_shop.customers_2": [], "source.secret.jaffle_shop.orders": [], "source.secret.stripe.payment": [], "source.secret.snowflake_meta.query_history": [], "source.secret.snowflake_meta.warehouse_load_history": [], "source.secret.snowflake_meta.warehouse_metering_history": [], "source.secret.snowflake_meta.metering_history": [], "source.secret.snowflake_meta.users": [], "source.secret.snowflake_meta_qa.query_history": [], "source.secret.snowflake_meta_dev.query_history": [], "source.secret.snowflake_meta_dynamic.query_history": [], "source.secret.snowflake_meta_global_variable.query_history": [], "exposure.secret.Total_Cloud_Spend_Analysis": ["model.secret.customers"], "exposure.secret.Azure_Cost_Explorer": ["model.secret.orders"], "exposure.secret.Alicloud_Cost_Explorer": ["model.secret.payments__pivoted"], "exposure.secret.Big_Query_Spend_Analysis": ["model.secret.stg_customers", "model.secret.stg_orders"]}, "child_map": {"model.secret.my_incremental_model": [], "model.secret.my_third_model": [], "model.secret.run_query_return": [], "model.secret.union_relations": [], "model.secret.foo_table": ["model.secret.bar_table"], "model.secret.my_second_model": ["model.secret.my_third_model", "test.secret.assert_my_second_model_has_one_record"], "model.secret.bar_view": ["model.secret.baz_view"], "model.secret.baz_table": [], "model.secret.json_example": [], "model.secret.ephemeral_1": ["model.secret.ephemeral_2"], "model.secret.bar_table": ["model.secret.baz_table"], "model.secret.tag_model": [], "model.secret.query_tag": [], "model.secret.test_list_depends_on": [], "model.secret.project_info": [], "model.secret.ephemeral_2": [], "model.secret.conditional_run": [], "model.secret.incremental_dupes": [], "model.secret.my_first_model": ["model.secret.my_second_model", "model.secret.show_this_variable", "test.secret.not_null_my_first_model_col.9dde753ebf", "test.secret.unique_my_first_model_col.344040e6f9"], "model.secret.foo_view": ["model.secret.bar_view"], "model.secret.baz_view": [], "model.secret.stg_customers_2": [], "model.secret.stg_orders": ["exposure.secret.Big_Query_Spend_Analysis", "model.secret.orders", "model.secret.test_list_depends_on", "test.secret.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad", "test.secret.not_null_stg_orders_order_id.81cfe2fe64", "test.secret.unique_stg_orders_order_id.e3b841c71a"], "model.secret.stg_customers": ["exposure.secret.Big_Query_Spend_Analysis", "model.secret.autogenerate_join_conditions", "model.secret.customers", "model.secret.run_query_return", "test.secret.not_null_stg_customers_customer_id.e2cfb1f9aa", "test.secret.unique_stg_customers_customer_id.c7614daada"], "model.secret.stg_payments": ["model.secret.define_function__payment_glitch", "model.secret.orders", "model.secret.payments__pivoted", "model.secret.payments__pivoted", "model.secret.run_query_return", "model.secret.test_list_depends_on"], "model.secret.stg_stripe__payments": [], "model.secret.check_sources": [], "model.secret.int_onsemi": ["model.secret.onsemi_incremental", "model.secret.onsemi_incremental", "model.secret.onsemi_incremental", "model.secret.onsemi_incremental"], "model.secret.product_using_macros": [], "model.secret.onsemi_incremental": [], "model.secret.stg_onsemi": ["model.secret.int_onsemi"], "model.secret.product": [], "model.secret.show_this_variable": [], "model.secret.pack_json_demo": [], "model.secret.raw_json": ["model.secret.dynamic_unpack", "model.secret.dynamic_unpack"], "model.secret.dynamic_unpack": [], "model.secret.change_roles": [], "model.secret.execute_query": [], "model.secret.warehouse_metering_history__incremental_snapshot": [], "model.secret.env_var_changes": [], "model.secret.hard_deletes__augmented_snapshot_view": [], "model.secret.hard_deletes_source": ["snapshot.secret.hard_deletes__snapshot"], "model.secret.hard_deletes__snapshot_passthrough": [], "model.secret.dedupe_incremental": ["model.secret.find_dupes", "model.secret.find_dupes"], "model.secret.find_dupes": [], "model.secret.autogenerate_join_conditions": [], "model.secret.namespacing": [], "model.secret.disable_list_create": ["model.secret.skip_this_incremental", "model.secret.variable_usage"], "model.secret.skip_this_incremental": [], "model.secret.variable_usage": [], "model.secret.in_and_out": [], "model.secret.local_variables": [], "model.secret.model_with_schema_tests": ["test.secret.not_null_model_with_schema_tests_id.2aa929087e", "test.secret.unique_model_with_schema_tests_id.c8cceb01b0"], "model.secret.landing": [], "model.secret.custom_schema": [], "model.secret.get_dynamic_sql_value_usage": [], "model.secret.rows_affected__table": [], "model.secret.rows_affected__incremental": [], "model.secret.rows_affected__view": [], "model.secret.payments__pivoted": ["exposure.secret.Alicloud_Cost_Explorer"], "model.secret.customers_plus_two": [], "model.secret.customers_plus_one": ["model.secret.customers_plus_two"], "model.secret.customers": ["exposure.secret.Total_Cloud_Spend_Analysis", "model.secret.autogenerate_join_conditions", "model.secret.customer_orders_dummy_join", "model.secret.customers_plus_one", "model.secret.execute_query", "model.secret.python_builtins__describe", "model.secret.use_variables__customers_limit_10", "test.secret.dbt_utils_unique_combination_of_columns_customers_customer_id__first_name__last_name__first_order_date__most_recent_order_date__number_of_orders__lifetime_value.63d701a4e3", "test.secret.not_null_customers_customer_id.5c9bf9911d", "test.secret.unique_customers_customer_id.c5af1ff4b1"], "model.secret.customer_orders_dummy_join": [], "model.secret.orders": ["exposure.secret.Azure_Cost_Explorer", "model.secret.autogenerate_join_conditions", "model.secret.customer_orders_dummy_join", "model.secret.customers", "model.secret.import_pypi_package__holiday", "test.secret.dbt_utils_expression_is_true_orders_amount_0.23e56bc9d2", "test.secret.not_null_orders_order_id.cf6c17daed", "test.secret.unique_orders_order_id.fed79b3a6e"], "model.secret.stg_warehouse_metering_history": ["model.secret.pack_json_demo", "model.secret.pack_json_demo", "model.secret.warehouse_metering_history__incremental_snapshot"], "model.secret.use_variables__customers_limit_10": [], "model.secret.import_pypi_package__holiday": [], "model.secret.add_udf_function__payment_glitch": [], "model.secret.python_builtins__describe": [], "model.secret.define_function__payment_glitch": ["model.secret.add_udf_function__payment_glitch"], "snapshot.secret.snapshot_update": [], "snapshot.secret.snapshot_test_late_data": [], "snapshot.secret.test_hard_deletes": [], "snapshot.secret.hard_deletes__snapshot": ["model.secret.hard_deletes__augmented_snapshot_view", "model.secret.hard_deletes__snapshot_passthrough"], "test.secret.assert_my_second_model_has_one_record": [], "seed.secret.sample_json_and_array_fields": [], "seed.secret.seed__corporation__one_time_load": [], "seed.secret.seed__product__stg_data": ["model.secret.product", "model.secret.product_using_macros"], "seed.secret.seed__edw_process_batch_ctl": [], "seed.secret.seed__product__one_time_load": ["model.secret.product", "model.secret.product", "model.secret.product_using_macros"], "seed.secret.seed__negative_key": ["model.secret.product", "model.secret.product_using_macros"], "seed.secret.seed__sample_data_status": ["model.secret.onsemi_incremental", "model.secret.onsemi_incremental"], "seed.secret.seed__corporation__stg_data": [], "seed.secret.seed__sample_data": [], "seed.secret.seed__edw_process_info": [], "model.dbt_artifacts.dim_dbt__exposures": [], "model.dbt_artifacts.fct_dbt__model_executions": [], "model.dbt_artifacts.fct_dbt__invocations": [], "model.dbt_artifacts.fct_dbt__test_executions": [], "model.dbt_artifacts.dim_dbt__tests": [], "model.dbt_artifacts.dim_dbt__sources": [], "model.dbt_artifacts.fct_dbt__snapshot_executions": [], "model.dbt_artifacts.dim_dbt__models": [], "model.dbt_artifacts.dim_dbt__current_models": [], "model.dbt_artifacts.fct_dbt__seed_executions": [], "model.dbt_artifacts.dim_dbt__snapshots": [], "model.dbt_artifacts.dim_dbt__seeds": [], "model.dbt_artifacts.exposures": ["model.dbt_artifacts.stg_dbt__exposures"], "model.dbt_artifacts.model_executions": ["model.dbt_artifacts.stg_dbt__model_executions"], "model.dbt_artifacts.snapshots": ["model.dbt_artifacts.stg_dbt__snapshots"], "model.dbt_artifacts.seeds": ["model.dbt_artifacts.stg_dbt__seeds"], "model.dbt_artifacts.models": ["model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.snapshot_executions": ["model.dbt_artifacts.stg_dbt__snapshot_executions"], "model.dbt_artifacts.seed_executions": ["model.dbt_artifacts.stg_dbt__seed_executions"], "model.dbt_artifacts.tests": ["model.dbt_artifacts.stg_dbt__tests"], "model.dbt_artifacts.invocations": ["model.dbt_artifacts.stg_dbt__invocations"], "model.dbt_artifacts.sources": ["model.dbt_artifacts.stg_dbt__sources"], "model.dbt_artifacts.test_executions": ["model.dbt_artifacts.stg_dbt__test_executions"], "model.dbt_artifacts.stg_dbt__seed_executions": ["model.dbt_artifacts.fct_dbt__seed_executions"], "model.dbt_artifacts.stg_dbt__exposures": ["model.dbt_artifacts.dim_dbt__exposures"], "model.dbt_artifacts.stg_dbt__model_executions": ["model.dbt_artifacts.dim_dbt__current_models", "model.dbt_artifacts.fct_dbt__model_executions"], "model.dbt_artifacts.stg_dbt__snapshots": ["model.dbt_artifacts.dim_dbt__snapshots"], "model.dbt_artifacts.stg_dbt__seeds": ["model.dbt_artifacts.dim_dbt__seeds"], "model.dbt_artifacts.stg_dbt__test_executions": ["model.dbt_artifacts.fct_dbt__test_executions"], "model.dbt_artifacts.stg_dbt__sources": ["model.dbt_artifacts.dim_dbt__sources"], "model.dbt_artifacts.stg_dbt__invocations": ["model.dbt_artifacts.fct_dbt__invocations"], "model.dbt_artifacts.stg_dbt__snapshot_executions": ["model.dbt_artifacts.fct_dbt__snapshot_executions"], "model.dbt_artifacts.stg_dbt__models": ["model.dbt_artifacts.dim_dbt__current_models", "model.dbt_artifacts.dim_dbt__models"], "model.dbt_artifacts.stg_dbt__tests": ["model.dbt_artifacts.dim_dbt__tests"], "test.secret.unique_my_first_model_col.344040e6f9": [], "test.secret.not_null_my_first_model_col.9dde753ebf": [], "test.secret.unique_stg_customers_customer_id.c7614daada": [], "test.secret.not_null_stg_customers_customer_id.e2cfb1f9aa": [], "test.secret.unique_stg_orders_order_id.e3b841c71a": [], "test.secret.not_null_stg_orders_order_id.81cfe2fe64": [], "test.secret.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": [], "test.secret.unique_model_with_schema_tests_id.c8cceb01b0": [], "test.secret.not_null_model_with_schema_tests_id.2aa929087e": [], "test.secret.unique_customers_customer_id.c5af1ff4b1": [], "test.secret.not_null_customers_customer_id.5c9bf9911d": [], "test.secret.dbt_utils_unique_combination_of_columns_customers_customer_id__first_name__last_name__first_order_date__most_recent_order_date__number_of_orders__lifetime_value.63d701a4e3": [], "test.secret.unique_orders_order_id.fed79b3a6e": [], "test.secret.not_null_orders_order_id.cf6c17daed": [], "test.secret.dbt_utils_expression_is_true_orders_amount_0.23e56bc9d2": [], "test.secret.source_not_null_jaffle_shop_customers_id.50aa22178f": [], "test.secret.source_unique_jaffle_shop_customers_id.2777a7933e": [], "test.secret.source_not_null_jaffle_shop_customers_2_id.5acaf12d10": [], "test.secret.source_unique_jaffle_shop_customers_2_id.4e2a28ae57": [], "test.secret.source_unique_jaffle_shop_orders_id.8a425b2fba": [], "test.secret.source_not_null_jaffle_shop_orders_id.f924998b13": [], "test.secret.source_accepted_values_jaffle_shop_orders_status__placed__shipped__completed__return_pending__returned.67e1753cce": [], "test.secret.source_not_null_stripe_payment_id.f33f317f6c": [], "test.secret.source_unique_stripe_payment_id.3b7989ce64": [], "test.secret.source_accepted_values_stripe_payment_paymentmethod__credit_card__bank_transfer__gift_card__coupon.f91677821a": [], "test.secret.source_accepted_values_stripe_payment_status__success__fail.911ca0ff27": [], "source.secret.jaffle_shop.customers": ["model.secret.stg_customers", "test.secret.source_not_null_jaffle_shop_customers_id.50aa22178f", "test.secret.source_unique_jaffle_shop_customers_id.2777a7933e"], "source.secret.jaffle_shop.customers_2": ["model.secret.stg_customers_2", "test.secret.source_not_null_jaffle_shop_customers_2_id.5acaf12d10", "test.secret.source_unique_jaffle_shop_customers_2_id.4e2a28ae57"], "source.secret.jaffle_shop.orders": ["model.secret.stg_orders", "test.secret.source_accepted_values_jaffle_shop_orders_status__placed__shipped__completed__return_pending__returned.67e1753cce", "test.secret.source_not_null_jaffle_shop_orders_id.f924998b13", "test.secret.source_unique_jaffle_shop_orders_id.8a425b2fba"], "source.secret.stripe.payment": ["model.secret.stg_payments", "test.secret.source_accepted_values_stripe_payment_paymentmethod__credit_card__bank_transfer__gift_card__coupon.f91677821a", "test.secret.source_accepted_values_stripe_payment_status__success__fail.911ca0ff27", "test.secret.source_not_null_stripe_payment_id.f33f317f6c", "test.secret.source_unique_stripe_payment_id.3b7989ce64"], "source.secret.snowflake_meta.query_history": [], "source.secret.snowflake_meta.warehouse_load_history": [], "source.secret.snowflake_meta.warehouse_metering_history": ["model.secret.stg_warehouse_metering_history", "model.secret.stg_warehouse_metering_history"], "source.secret.snowflake_meta.metering_history": [], "source.secret.snowflake_meta.users": [], "source.secret.snowflake_meta_qa.query_history": [], "source.secret.snowflake_meta_dev.query_history": [], "source.secret.snowflake_meta_dynamic.query_history": [], "source.secret.snowflake_meta_global_variable.query_history": [], "exposure.secret.Total_Cloud_Spend_Analysis": [], "exposure.secret.Azure_Cost_Explorer": [], "exposure.secret.Alicloud_Cost_Explorer": [], "exposure.secret.Big_Query_Spend_Analysis": []}, "group_map": {}}